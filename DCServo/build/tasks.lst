ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "ThirdParty/FreeRTOS/tasks.c"
  18              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	prvTaskIsTaskSuspended:
  25              	.LVL0:
  26              	.LFB15:
   1:ThirdParty/FreeRTOS/tasks.c **** /*
   2:ThirdParty/FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/tasks.c ****  *
   5:ThirdParty/FreeRTOS/tasks.c ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/tasks.c ****  *
   7:ThirdParty/FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/tasks.c ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/tasks.c ****  *
  14:ThirdParty/FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/tasks.c ****  *
  17:ThirdParty/FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/tasks.c ****  *
  24:ThirdParty/FreeRTOS/tasks.c ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/tasks.c ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/tasks.c ****  *
  27:ThirdParty/FreeRTOS/tasks.c ****  */
  28:ThirdParty/FreeRTOS/tasks.c **** 
  29:ThirdParty/FreeRTOS/tasks.c **** /* Standard includes. */
  30:ThirdParty/FreeRTOS/tasks.c **** #include <stdlib.h>
  31:ThirdParty/FreeRTOS/tasks.c **** #include <string.h>
  32:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 2


  33:ThirdParty/FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:ThirdParty/FreeRTOS/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:ThirdParty/FreeRTOS/tasks.c ****  * task.h is included from an application file. */
  36:ThirdParty/FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:ThirdParty/FreeRTOS/tasks.c **** 
  38:ThirdParty/FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  39:ThirdParty/FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  40:ThirdParty/FreeRTOS/tasks.c **** #include "task.h"
  41:ThirdParty/FreeRTOS/tasks.c **** #include "timers.h"
  42:ThirdParty/FreeRTOS/tasks.c **** #include "stack_macros.h"
  43:ThirdParty/FreeRTOS/tasks.c **** 
  44:ThirdParty/FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:ThirdParty/FreeRTOS/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:ThirdParty/FreeRTOS/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:ThirdParty/FreeRTOS/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:ThirdParty/FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:ThirdParty/FreeRTOS/tasks.c **** 
  50:ThirdParty/FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:ThirdParty/FreeRTOS/tasks.c ****  * functions but without including stdio.h here. */
  52:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:ThirdParty/FreeRTOS/tasks.c **** 
  54:ThirdParty/FreeRTOS/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:ThirdParty/FreeRTOS/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:ThirdParty/FreeRTOS/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:ThirdParty/FreeRTOS/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:ThirdParty/FreeRTOS/tasks.c ****     #include <stdio.h>
  59:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:ThirdParty/FreeRTOS/tasks.c **** 
  61:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:ThirdParty/FreeRTOS/tasks.c **** 
  63:ThirdParty/FreeRTOS/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:ThirdParty/FreeRTOS/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:ThirdParty/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:ThirdParty/FreeRTOS/tasks.c **** #else
  67:ThirdParty/FreeRTOS/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:ThirdParty/FreeRTOS/tasks.c **** #endif
  69:ThirdParty/FreeRTOS/tasks.c **** 
  70:ThirdParty/FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:ThirdParty/FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:ThirdParty/FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:ThirdParty/FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:ThirdParty/FreeRTOS/tasks.c **** 
  75:ThirdParty/FreeRTOS/tasks.c **** /*
  76:ThirdParty/FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:ThirdParty/FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:ThirdParty/FreeRTOS/tasks.c ****  */
  79:ThirdParty/FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:ThirdParty/FreeRTOS/tasks.c **** 
  81:ThirdParty/FreeRTOS/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:ThirdParty/FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:ThirdParty/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:ThirdParty/FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:ThirdParty/FreeRTOS/tasks.c **** 
  86:ThirdParty/FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:ThirdParty/FreeRTOS/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  88:ThirdParty/FreeRTOS/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 3


  90:ThirdParty/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:ThirdParty/FreeRTOS/tasks.c **** #else
  92:ThirdParty/FreeRTOS/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:ThirdParty/FreeRTOS/tasks.c **** #endif
  94:ThirdParty/FreeRTOS/tasks.c **** 
  95:ThirdParty/FreeRTOS/tasks.c **** /*
  96:ThirdParty/FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:ThirdParty/FreeRTOS/tasks.c ****  */
  98:ThirdParty/FreeRTOS/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:ThirdParty/FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:ThirdParty/FreeRTOS/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:ThirdParty/FreeRTOS/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:ThirdParty/FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:ThirdParty/FreeRTOS/tasks.c **** 
 104:ThirdParty/FreeRTOS/tasks.c **** /*
 105:ThirdParty/FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:ThirdParty/FreeRTOS/tasks.c ****  * be global, rather than file scope.
 107:ThirdParty/FreeRTOS/tasks.c ****  */
 108:ThirdParty/FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:ThirdParty/FreeRTOS/tasks.c ****     #define static
 110:ThirdParty/FreeRTOS/tasks.c **** #endif
 111:ThirdParty/FreeRTOS/tasks.c **** 
 112:ThirdParty/FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:ThirdParty/FreeRTOS/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:ThirdParty/FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:ThirdParty/FreeRTOS/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:ThirdParty/FreeRTOS/tasks.c **** #endif
 117:ThirdParty/FreeRTOS/tasks.c **** 
 118:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:ThirdParty/FreeRTOS/tasks.c **** 
 120:ThirdParty/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:ThirdParty/FreeRTOS/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:ThirdParty/FreeRTOS/tasks.c ****  * microcontroller architecture. */
 123:ThirdParty/FreeRTOS/tasks.c **** 
 124:ThirdParty/FreeRTOS/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:ThirdParty/FreeRTOS/tasks.c ****  * state task. */
 126:ThirdParty/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:ThirdParty/FreeRTOS/tasks.c ****     {                                               \
 128:ThirdParty/FreeRTOS/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:ThirdParty/FreeRTOS/tasks.c ****         {                                           \
 130:ThirdParty/FreeRTOS/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:ThirdParty/FreeRTOS/tasks.c ****         }                                           \
 132:ThirdParty/FreeRTOS/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:ThirdParty/FreeRTOS/tasks.c **** 
 134:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 135:ThirdParty/FreeRTOS/tasks.c **** 
 136:ThirdParty/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:ThirdParty/FreeRTOS/tasks.c ****     {                                                                         \
 138:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:ThirdParty/FreeRTOS/tasks.c ****                                                                               \
 140:ThirdParty/FreeRTOS/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:ThirdParty/FreeRTOS/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:ThirdParty/FreeRTOS/tasks.c ****         {                                                                     \
 143:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:ThirdParty/FreeRTOS/tasks.c ****             --uxTopPriority;                                                  \
 145:ThirdParty/FreeRTOS/tasks.c ****         }                                                                     \
 146:ThirdParty/FreeRTOS/tasks.c ****                                                                               \
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 4


 147:ThirdParty/FreeRTOS/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:ThirdParty/FreeRTOS/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:ThirdParty/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:ThirdParty/FreeRTOS/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:ThirdParty/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:ThirdParty/FreeRTOS/tasks.c **** 
 153:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 154:ThirdParty/FreeRTOS/tasks.c **** 
 155:ThirdParty/FreeRTOS/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:ThirdParty/FreeRTOS/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:ThirdParty/FreeRTOS/tasks.c ****  * being used. */
 158:ThirdParty/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:ThirdParty/FreeRTOS/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:ThirdParty/FreeRTOS/tasks.c **** 
 161:ThirdParty/FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:ThirdParty/FreeRTOS/tasks.c **** 
 163:ThirdParty/FreeRTOS/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:ThirdParty/FreeRTOS/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:ThirdParty/FreeRTOS/tasks.c ****  * architecture being used. */
 166:ThirdParty/FreeRTOS/tasks.c **** 
 167:ThirdParty/FreeRTOS/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:ThirdParty/FreeRTOS/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:ThirdParty/FreeRTOS/tasks.c **** 
 170:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 171:ThirdParty/FreeRTOS/tasks.c **** 
 172:ThirdParty/FreeRTOS/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:ThirdParty/FreeRTOS/tasks.c ****     {                                                                                           \
 174:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:ThirdParty/FreeRTOS/tasks.c ****                                                                                                 \
 176:ThirdParty/FreeRTOS/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:ThirdParty/FreeRTOS/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:ThirdParty/FreeRTOS/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:ThirdParty/FreeRTOS/tasks.c ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:ThirdParty/FreeRTOS/tasks.c **** 
 182:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 183:ThirdParty/FreeRTOS/tasks.c **** 
 184:ThirdParty/FreeRTOS/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:ThirdParty/FreeRTOS/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:ThirdParty/FreeRTOS/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:ThirdParty/FreeRTOS/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:ThirdParty/FreeRTOS/tasks.c ****     {                                                                                              
 189:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:ThirdParty/FreeRTOS/tasks.c ****         {                                                                                          
 191:ThirdParty/FreeRTOS/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:ThirdParty/FreeRTOS/tasks.c ****         }                                                                                          
 193:ThirdParty/FreeRTOS/tasks.c ****     }
 194:ThirdParty/FreeRTOS/tasks.c **** 
 195:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:ThirdParty/FreeRTOS/tasks.c **** 
 197:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 198:ThirdParty/FreeRTOS/tasks.c **** 
 199:ThirdParty/FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:ThirdParty/FreeRTOS/tasks.c ****  * count overflows. */
 201:ThirdParty/FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:ThirdParty/FreeRTOS/tasks.c ****     {                                                                             \
 203:ThirdParty/FreeRTOS/tasks.c ****         List_t * pxTemp;                                                          \
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 5


 204:ThirdParty/FreeRTOS/tasks.c ****                                                                                   \
 205:ThirdParty/FreeRTOS/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:ThirdParty/FreeRTOS/tasks.c ****                                                                                   \
 208:ThirdParty/FreeRTOS/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:ThirdParty/FreeRTOS/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:ThirdParty/FreeRTOS/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:ThirdParty/FreeRTOS/tasks.c ****         xNumOfOverflows++;                                                        \
 212:ThirdParty/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:ThirdParty/FreeRTOS/tasks.c ****     }
 214:ThirdParty/FreeRTOS/tasks.c **** 
 215:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 216:ThirdParty/FreeRTOS/tasks.c **** 
 217:ThirdParty/FreeRTOS/tasks.c **** /*
 218:ThirdParty/FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:ThirdParty/FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:ThirdParty/FreeRTOS/tasks.c ****  */
 221:ThirdParty/FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:ThirdParty/FreeRTOS/tasks.c ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:ThirdParty/FreeRTOS/tasks.c ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:ThirdParty/FreeRTOS/tasks.c ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:ThirdParty/FreeRTOS/tasks.c ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 227:ThirdParty/FreeRTOS/tasks.c **** 
 228:ThirdParty/FreeRTOS/tasks.c **** /*
 229:ThirdParty/FreeRTOS/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:ThirdParty/FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 231:ThirdParty/FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 232:ThirdParty/FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:ThirdParty/FreeRTOS/tasks.c ****  */
 234:ThirdParty/FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:ThirdParty/FreeRTOS/tasks.c **** 
 236:ThirdParty/FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 237:ThirdParty/FreeRTOS/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:ThirdParty/FreeRTOS/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:ThirdParty/FreeRTOS/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 240:ThirdParty/FreeRTOS/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 241:ThirdParty/FreeRTOS/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 242:ThirdParty/FreeRTOS/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:ThirdParty/FreeRTOS/tasks.c ****  * to its original value when it is released. */
 244:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:ThirdParty/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:ThirdParty/FreeRTOS/tasks.c **** #else
 247:ThirdParty/FreeRTOS/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:ThirdParty/FreeRTOS/tasks.c **** #endif
 249:ThirdParty/FreeRTOS/tasks.c **** 
 250:ThirdParty/FreeRTOS/tasks.c **** /*
 251:ThirdParty/FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:ThirdParty/FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 253:ThirdParty/FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 254:ThirdParty/FreeRTOS/tasks.c ****  */
 255:ThirdParty/FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:ThirdParty/FreeRTOS/tasks.c **** {
 257:ThirdParty/FreeRTOS/tasks.c ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:ThirdParty/FreeRTOS/tasks.c **** 
 259:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:ThirdParty/FreeRTOS/tasks.c ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 6


 261:ThirdParty/FreeRTOS/tasks.c ****     #endif
 262:ThirdParty/FreeRTOS/tasks.c **** 
 263:ThirdParty/FreeRTOS/tasks.c ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:ThirdParty/FreeRTOS/tasks.c ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:ThirdParty/FreeRTOS/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:ThirdParty/FreeRTOS/tasks.c **** 
 269:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:ThirdParty/FreeRTOS/tasks.c ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:ThirdParty/FreeRTOS/tasks.c ****     #endif
 272:ThirdParty/FreeRTOS/tasks.c **** 
 273:ThirdParty/FreeRTOS/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:ThirdParty/FreeRTOS/tasks.c ****     #endif
 276:ThirdParty/FreeRTOS/tasks.c **** 
 277:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:ThirdParty/FreeRTOS/tasks.c ****     #endif
 281:ThirdParty/FreeRTOS/tasks.c **** 
 282:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 283:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxMutexesHeld;
 285:ThirdParty/FreeRTOS/tasks.c ****     #endif
 286:ThirdParty/FreeRTOS/tasks.c **** 
 287:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t pxTaskTag;
 289:ThirdParty/FreeRTOS/tasks.c ****     #endif
 290:ThirdParty/FreeRTOS/tasks.c **** 
 291:ThirdParty/FreeRTOS/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:ThirdParty/FreeRTOS/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:ThirdParty/FreeRTOS/tasks.c ****     #endif
 294:ThirdParty/FreeRTOS/tasks.c **** 
 295:ThirdParty/FreeRTOS/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:ThirdParty/FreeRTOS/tasks.c ****     #endif
 298:ThirdParty/FreeRTOS/tasks.c **** 
 299:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 300:ThirdParty/FreeRTOS/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /*< Memory block used as Thread Local Storage (TLS) Block f
 301:ThirdParty/FreeRTOS/tasks.c ****     #endif
 302:ThirdParty/FreeRTOS/tasks.c **** 
 303:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 304:ThirdParty/FreeRTOS/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 305:ThirdParty/FreeRTOS/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 306:ThirdParty/FreeRTOS/tasks.c ****     #endif
 307:ThirdParty/FreeRTOS/tasks.c **** 
 308:ThirdParty/FreeRTOS/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 309:ThirdParty/FreeRTOS/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 310:ThirdParty/FreeRTOS/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 311:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 312:ThirdParty/FreeRTOS/tasks.c ****     #endif
 313:ThirdParty/FreeRTOS/tasks.c **** 
 314:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 315:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucDelayAborted;
 316:ThirdParty/FreeRTOS/tasks.c ****     #endif
 317:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 7


 318:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 319:ThirdParty/FreeRTOS/tasks.c ****         int iTaskErrno;
 320:ThirdParty/FreeRTOS/tasks.c ****     #endif
 321:ThirdParty/FreeRTOS/tasks.c **** } tskTCB;
 322:ThirdParty/FreeRTOS/tasks.c **** 
 323:ThirdParty/FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 324:ThirdParty/FreeRTOS/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 325:ThirdParty/FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 326:ThirdParty/FreeRTOS/tasks.c **** 
 327:ThirdParty/FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 328:ThirdParty/FreeRTOS/tasks.c ****  * which static variables must be declared volatile. */
 329:ThirdParty/FreeRTOS/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 330:ThirdParty/FreeRTOS/tasks.c **** 
 331:ThirdParty/FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 332:ThirdParty/FreeRTOS/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 333:ThirdParty/FreeRTOS/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 334:ThirdParty/FreeRTOS/tasks.c ****  * the static qualifier. */
 335:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 336:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 337:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 338:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 339:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 340:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 341:ThirdParty/FreeRTOS/tasks.c **** 
 342:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 343:ThirdParty/FreeRTOS/tasks.c **** 
 344:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 345:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 346:ThirdParty/FreeRTOS/tasks.c **** 
 347:ThirdParty/FreeRTOS/tasks.c **** #endif
 348:ThirdParty/FreeRTOS/tasks.c **** 
 349:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 350:ThirdParty/FreeRTOS/tasks.c **** 
 351:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 352:ThirdParty/FreeRTOS/tasks.c **** 
 353:ThirdParty/FreeRTOS/tasks.c **** #endif
 354:ThirdParty/FreeRTOS/tasks.c **** 
 355:ThirdParty/FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 356:ThirdParty/FreeRTOS/tasks.c ****  * the errno of the currently running task. */
 357:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 358:ThirdParty/FreeRTOS/tasks.c ****     int FreeRTOS_errno = 0;
 359:ThirdParty/FreeRTOS/tasks.c **** #endif
 360:ThirdParty/FreeRTOS/tasks.c **** 
 361:ThirdParty/FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 362:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 363:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 364:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 365:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 366:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 367:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 368:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 369:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 370:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 371:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 372:ThirdParty/FreeRTOS/tasks.c **** 
 373:ThirdParty/FreeRTOS/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 374:ThirdParty/FreeRTOS/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 8


 375:ThirdParty/FreeRTOS/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 376:ThirdParty/FreeRTOS/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 377:ThirdParty/FreeRTOS/tasks.c **** 
 378:ThirdParty/FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:ThirdParty/FreeRTOS/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:ThirdParty/FreeRTOS/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:ThirdParty/FreeRTOS/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:ThirdParty/FreeRTOS/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 383:ThirdParty/FreeRTOS/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 384:ThirdParty/FreeRTOS/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 385:ThirdParty/FreeRTOS/tasks.c ****  * accessed from a critical section. */
 386:ThirdParty/FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 387:ThirdParty/FreeRTOS/tasks.c **** 
 388:ThirdParty/FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:ThirdParty/FreeRTOS/tasks.c **** 
 390:ThirdParty/FreeRTOS/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 391:ThirdParty/FreeRTOS/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 392:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 393:ThirdParty/FreeRTOS/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 394:ThirdParty/FreeRTOS/tasks.c **** 
 395:ThirdParty/FreeRTOS/tasks.c **** #endif
 396:ThirdParty/FreeRTOS/tasks.c **** 
 397:ThirdParty/FreeRTOS/tasks.c **** /*lint -restore */
 398:ThirdParty/FreeRTOS/tasks.c **** 
 399:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 400:ThirdParty/FreeRTOS/tasks.c **** 
 401:ThirdParty/FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 402:ThirdParty/FreeRTOS/tasks.c **** 
 403:ThirdParty/FreeRTOS/tasks.c **** /**
 404:ThirdParty/FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 405:ThirdParty/FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 406:ThirdParty/FreeRTOS/tasks.c ****  * is in any other state.
 407:ThirdParty/FreeRTOS/tasks.c ****  */
 408:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 409:ThirdParty/FreeRTOS/tasks.c **** 
 410:ThirdParty/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 411:ThirdParty/FreeRTOS/tasks.c **** 
 412:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 413:ThirdParty/FreeRTOS/tasks.c **** 
 414:ThirdParty/FreeRTOS/tasks.c **** /*
 415:ThirdParty/FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 416:ThirdParty/FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 417:ThirdParty/FreeRTOS/tasks.c ****  */
 418:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 419:ThirdParty/FreeRTOS/tasks.c **** 
 420:ThirdParty/FreeRTOS/tasks.c **** /*
 421:ThirdParty/FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 422:ThirdParty/FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 423:ThirdParty/FreeRTOS/tasks.c ****  * creation of the first user task.
 424:ThirdParty/FreeRTOS/tasks.c ****  *
 425:ThirdParty/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 426:ThirdParty/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 427:ThirdParty/FreeRTOS/tasks.c ****  *
 428:ThirdParty/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 429:ThirdParty/FreeRTOS/tasks.c ****  *
 430:ThirdParty/FreeRTOS/tasks.c ****  */
 431:ThirdParty/FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 9


 432:ThirdParty/FreeRTOS/tasks.c **** 
 433:ThirdParty/FreeRTOS/tasks.c **** /*
 434:ThirdParty/FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 435:ThirdParty/FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 436:ThirdParty/FreeRTOS/tasks.c ****  *
 437:ThirdParty/FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 438:ThirdParty/FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 439:ThirdParty/FreeRTOS/tasks.c ****  */
 440:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 441:ThirdParty/FreeRTOS/tasks.c **** 
 442:ThirdParty/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 443:ThirdParty/FreeRTOS/tasks.c **** 
 444:ThirdParty/FreeRTOS/tasks.c **** #endif
 445:ThirdParty/FreeRTOS/tasks.c **** 
 446:ThirdParty/FreeRTOS/tasks.c **** /*
 447:ThirdParty/FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 448:ThirdParty/FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 449:ThirdParty/FreeRTOS/tasks.c ****  * and its TCB deleted.
 450:ThirdParty/FreeRTOS/tasks.c ****  */
 451:ThirdParty/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 452:ThirdParty/FreeRTOS/tasks.c **** 
 453:ThirdParty/FreeRTOS/tasks.c **** /*
 454:ThirdParty/FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 455:ThirdParty/FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 456:ThirdParty/FreeRTOS/tasks.c ****  */
 457:ThirdParty/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 458:ThirdParty/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 459:ThirdParty/FreeRTOS/tasks.c **** 
 460:ThirdParty/FreeRTOS/tasks.c **** /*
 461:ThirdParty/FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 462:ThirdParty/FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 463:ThirdParty/FreeRTOS/tasks.c ****  * a suspended list, etc.).
 464:ThirdParty/FreeRTOS/tasks.c ****  *
 465:ThirdParty/FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 466:ThirdParty/FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 467:ThirdParty/FreeRTOS/tasks.c ****  */
 468:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 469:ThirdParty/FreeRTOS/tasks.c **** 
 470:ThirdParty/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 471:ThirdParty/FreeRTOS/tasks.c ****                                                      List_t * pxList,
 472:ThirdParty/FreeRTOS/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 473:ThirdParty/FreeRTOS/tasks.c **** 
 474:ThirdParty/FreeRTOS/tasks.c **** #endif
 475:ThirdParty/FreeRTOS/tasks.c **** 
 476:ThirdParty/FreeRTOS/tasks.c **** /*
 477:ThirdParty/FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 478:ThirdParty/FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 479:ThirdParty/FreeRTOS/tasks.c ****  */
 480:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 481:ThirdParty/FreeRTOS/tasks.c **** 
 482:ThirdParty/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 483:ThirdParty/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 484:ThirdParty/FreeRTOS/tasks.c **** 
 485:ThirdParty/FreeRTOS/tasks.c **** #endif
 486:ThirdParty/FreeRTOS/tasks.c **** 
 487:ThirdParty/FreeRTOS/tasks.c **** /*
 488:ThirdParty/FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 10


 489:ThirdParty/FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 490:ThirdParty/FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 491:ThirdParty/FreeRTOS/tasks.c ****  */
 492:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 493:ThirdParty/FreeRTOS/tasks.c **** 
 494:ThirdParty/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 495:ThirdParty/FreeRTOS/tasks.c **** 
 496:ThirdParty/FreeRTOS/tasks.c **** #endif
 497:ThirdParty/FreeRTOS/tasks.c **** 
 498:ThirdParty/FreeRTOS/tasks.c **** /*
 499:ThirdParty/FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 500:ThirdParty/FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 501:ThirdParty/FreeRTOS/tasks.c ****  *
 502:ThirdParty/FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 503:ThirdParty/FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 504:ThirdParty/FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 505:ThirdParty/FreeRTOS/tasks.c ****  * set to a value other than 1.
 506:ThirdParty/FreeRTOS/tasks.c ****  */
 507:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 508:ThirdParty/FreeRTOS/tasks.c **** 
 509:ThirdParty/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 510:ThirdParty/FreeRTOS/tasks.c **** 
 511:ThirdParty/FreeRTOS/tasks.c **** #endif
 512:ThirdParty/FreeRTOS/tasks.c **** 
 513:ThirdParty/FreeRTOS/tasks.c **** /*
 514:ThirdParty/FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 515:ThirdParty/FreeRTOS/tasks.c ****  * will exit the Blocked state.
 516:ThirdParty/FreeRTOS/tasks.c ****  */
 517:ThirdParty/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 518:ThirdParty/FreeRTOS/tasks.c **** 
 519:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 520:ThirdParty/FreeRTOS/tasks.c **** 
 521:ThirdParty/FreeRTOS/tasks.c **** /*
 522:ThirdParty/FreeRTOS/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 523:ThirdParty/FreeRTOS/tasks.c ****  * human readable tables of task information.
 524:ThirdParty/FreeRTOS/tasks.c ****  */
 525:ThirdParty/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 526:ThirdParty/FreeRTOS/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 527:ThirdParty/FreeRTOS/tasks.c **** 
 528:ThirdParty/FreeRTOS/tasks.c **** #endif
 529:ThirdParty/FreeRTOS/tasks.c **** 
 530:ThirdParty/FreeRTOS/tasks.c **** /*
 531:ThirdParty/FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 532:ThirdParty/FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 533:ThirdParty/FreeRTOS/tasks.c ****  */
 534:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 535:ThirdParty/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 536:ThirdParty/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 537:ThirdParty/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 538:ThirdParty/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 539:ThirdParty/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 540:ThirdParty/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 541:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 542:ThirdParty/FreeRTOS/tasks.c **** 
 543:ThirdParty/FreeRTOS/tasks.c **** /*
 544:ThirdParty/FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 545:ThirdParty/FreeRTOS/tasks.c ****  * under the control of the scheduler.
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 11


 546:ThirdParty/FreeRTOS/tasks.c ****  */
 547:ThirdParty/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 548:ThirdParty/FreeRTOS/tasks.c **** 
 549:ThirdParty/FreeRTOS/tasks.c **** /*
 550:ThirdParty/FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 551:ThirdParty/FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 552:ThirdParty/FreeRTOS/tasks.c ****  * called by the function.
 553:ThirdParty/FreeRTOS/tasks.c ****  */
 554:ThirdParty/FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 555:ThirdParty/FreeRTOS/tasks.c **** 
 556:ThirdParty/FreeRTOS/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 557:ThirdParty/FreeRTOS/tasks.c **** 
 558:ThirdParty/FreeRTOS/tasks.c **** #endif
 559:ThirdParty/FreeRTOS/tasks.c **** 
 560:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 561:ThirdParty/FreeRTOS/tasks.c **** 
 562:ThirdParty/FreeRTOS/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 563:ThirdParty/FreeRTOS/tasks.c **** 
 564:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 565:ThirdParty/FreeRTOS/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 566:ThirdParty/FreeRTOS/tasks.c ****                                     const uint32_t ulStackDepth,
 567:ThirdParty/FreeRTOS/tasks.c ****                                     void * const pvParameters,
 568:ThirdParty/FreeRTOS/tasks.c ****                                     UBaseType_t uxPriority,
 569:ThirdParty/FreeRTOS/tasks.c ****                                     StackType_t * const puxStackBuffer,
 570:ThirdParty/FreeRTOS/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 571:ThirdParty/FreeRTOS/tasks.c ****     {
 572:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 573:ThirdParty/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 574:ThirdParty/FreeRTOS/tasks.c **** 
 575:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 576:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 577:ThirdParty/FreeRTOS/tasks.c **** 
 578:ThirdParty/FreeRTOS/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 579:ThirdParty/FreeRTOS/tasks.c ****         {
 580:ThirdParty/FreeRTOS/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 581:ThirdParty/FreeRTOS/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 582:ThirdParty/FreeRTOS/tasks.c ****              * structure. */
 583:ThirdParty/FreeRTOS/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 584:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 585:ThirdParty/FreeRTOS/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 586:ThirdParty/FreeRTOS/tasks.c ****         }
 587:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configASSERT_DEFINED */
 588:ThirdParty/FreeRTOS/tasks.c **** 
 589:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 590:ThirdParty/FreeRTOS/tasks.c ****         {
 591:ThirdParty/FreeRTOS/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 592:ThirdParty/FreeRTOS/tasks.c ****              * function - use them. */
 593:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 594:ThirdParty/FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 595:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 596:ThirdParty/FreeRTOS/tasks.c **** 
 597:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 598:ThirdParty/FreeRTOS/tasks.c ****             {
 599:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 600:ThirdParty/FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
 601:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 602:ThirdParty/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 12


 603:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 604:ThirdParty/FreeRTOS/tasks.c **** 
 605:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 606:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 607:ThirdParty/FreeRTOS/tasks.c ****         }
 608:ThirdParty/FreeRTOS/tasks.c ****         else
 609:ThirdParty/FreeRTOS/tasks.c ****         {
 610:ThirdParty/FreeRTOS/tasks.c ****             xReturn = NULL;
 611:ThirdParty/FreeRTOS/tasks.c ****         }
 612:ThirdParty/FreeRTOS/tasks.c **** 
 613:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 614:ThirdParty/FreeRTOS/tasks.c ****     }
 615:ThirdParty/FreeRTOS/tasks.c **** 
 616:ThirdParty/FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 617:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 618:ThirdParty/FreeRTOS/tasks.c **** 
 619:ThirdParty/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 620:ThirdParty/FreeRTOS/tasks.c **** 
 621:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 622:ThirdParty/FreeRTOS/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 623:ThirdParty/FreeRTOS/tasks.c ****     {
 624:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 625:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 626:ThirdParty/FreeRTOS/tasks.c **** 
 627:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 628:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 629:ThirdParty/FreeRTOS/tasks.c **** 
 630:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 631:ThirdParty/FreeRTOS/tasks.c ****         {
 632:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 633:ThirdParty/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 634:ThirdParty/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 635:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 636:ThirdParty/FreeRTOS/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 637:ThirdParty/FreeRTOS/tasks.c **** 
 638:ThirdParty/FreeRTOS/tasks.c ****             /* Store the stack location in the TCB. */
 639:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 640:ThirdParty/FreeRTOS/tasks.c **** 
 641:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 642:ThirdParty/FreeRTOS/tasks.c ****             {
 643:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 644:ThirdParty/FreeRTOS/tasks.c ****                  * task was created statically in case the task is later deleted. */
 645:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 646:ThirdParty/FreeRTOS/tasks.c ****             }
 647:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 648:ThirdParty/FreeRTOS/tasks.c **** 
 649:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 650:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pcName,
 651:ThirdParty/FreeRTOS/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 652:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->pvParameters,
 653:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->uxPriority,
 654:ThirdParty/FreeRTOS/tasks.c ****                                   pxCreatedTask, pxNewTCB,
 655:ThirdParty/FreeRTOS/tasks.c ****                                   pxTaskDefinition->xRegions );
 656:ThirdParty/FreeRTOS/tasks.c **** 
 657:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 658:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 659:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 13


 660:ThirdParty/FreeRTOS/tasks.c **** 
 661:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 662:ThirdParty/FreeRTOS/tasks.c ****     }
 663:ThirdParty/FreeRTOS/tasks.c **** 
 664:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 665:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 666:ThirdParty/FreeRTOS/tasks.c **** 
 667:ThirdParty/FreeRTOS/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 668:ThirdParty/FreeRTOS/tasks.c **** 
 669:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 670:ThirdParty/FreeRTOS/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 671:ThirdParty/FreeRTOS/tasks.c ****     {
 672:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 673:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 674:ThirdParty/FreeRTOS/tasks.c **** 
 675:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 676:ThirdParty/FreeRTOS/tasks.c **** 
 677:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 678:ThirdParty/FreeRTOS/tasks.c ****         {
 679:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 680:ThirdParty/FreeRTOS/tasks.c ****              * on the implementation of the port malloc function and whether or
 681:ThirdParty/FreeRTOS/tasks.c ****              * not static allocation is being used. */
 682:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 683:ThirdParty/FreeRTOS/tasks.c **** 
 684:ThirdParty/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 685:ThirdParty/FreeRTOS/tasks.c ****             {
 686:ThirdParty/FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 687:ThirdParty/FreeRTOS/tasks.c **** 
 688:ThirdParty/FreeRTOS/tasks.c ****                 /* Store the stack location in the TCB. */
 689:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 690:ThirdParty/FreeRTOS/tasks.c **** 
 691:ThirdParty/FreeRTOS/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 692:ThirdParty/FreeRTOS/tasks.c ****                 {
 693:ThirdParty/FreeRTOS/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 694:ThirdParty/FreeRTOS/tasks.c ****                      * this task had a statically allocated stack in case it is
 695:ThirdParty/FreeRTOS/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 696:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 697:ThirdParty/FreeRTOS/tasks.c ****                 }
 698:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 699:ThirdParty/FreeRTOS/tasks.c **** 
 700:ThirdParty/FreeRTOS/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 701:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pcName,
 702:ThirdParty/FreeRTOS/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 703:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->pvParameters,
 704:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->uxPriority,
 705:ThirdParty/FreeRTOS/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 706:ThirdParty/FreeRTOS/tasks.c ****                                       pxTaskDefinition->xRegions );
 707:ThirdParty/FreeRTOS/tasks.c **** 
 708:ThirdParty/FreeRTOS/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 709:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 710:ThirdParty/FreeRTOS/tasks.c ****             }
 711:ThirdParty/FreeRTOS/tasks.c ****         }
 712:ThirdParty/FreeRTOS/tasks.c **** 
 713:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 714:ThirdParty/FreeRTOS/tasks.c ****     }
 715:ThirdParty/FreeRTOS/tasks.c **** 
 716:ThirdParty/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 14


 717:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 718:ThirdParty/FreeRTOS/tasks.c **** 
 719:ThirdParty/FreeRTOS/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 720:ThirdParty/FreeRTOS/tasks.c **** 
 721:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 722:ThirdParty/FreeRTOS/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 723:ThirdParty/FreeRTOS/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 724:ThirdParty/FreeRTOS/tasks.c ****                             void * const pvParameters,
 725:ThirdParty/FreeRTOS/tasks.c ****                             UBaseType_t uxPriority,
 726:ThirdParty/FreeRTOS/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 727:ThirdParty/FreeRTOS/tasks.c ****     {
 728:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 729:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 730:ThirdParty/FreeRTOS/tasks.c **** 
 731:ThirdParty/FreeRTOS/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 732:ThirdParty/FreeRTOS/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 733:ThirdParty/FreeRTOS/tasks.c ****          * the TCB then the stack. */
 734:ThirdParty/FreeRTOS/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 735:ThirdParty/FreeRTOS/tasks.c ****         {
 736:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 737:ThirdParty/FreeRTOS/tasks.c ****              * the implementation of the port malloc function and whether or not static
 738:ThirdParty/FreeRTOS/tasks.c ****              * allocation is being used. */
 739:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 740:ThirdParty/FreeRTOS/tasks.c **** 
 741:ThirdParty/FreeRTOS/tasks.c ****             if( pxNewTCB != NULL )
 742:ThirdParty/FreeRTOS/tasks.c ****             {
 743:ThirdParty/FreeRTOS/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 744:ThirdParty/FreeRTOS/tasks.c **** 
 745:ThirdParty/FreeRTOS/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 746:ThirdParty/FreeRTOS/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 747:ThirdParty/FreeRTOS/tasks.c ****                  * be deleted later if required. */
 748:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 749:ThirdParty/FreeRTOS/tasks.c **** 
 750:ThirdParty/FreeRTOS/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 751:ThirdParty/FreeRTOS/tasks.c ****                 {
 752:ThirdParty/FreeRTOS/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 753:ThirdParty/FreeRTOS/tasks.c ****                     vPortFree( pxNewTCB );
 754:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB = NULL;
 755:ThirdParty/FreeRTOS/tasks.c ****                 }
 756:ThirdParty/FreeRTOS/tasks.c ****             }
 757:ThirdParty/FreeRTOS/tasks.c ****         }
 758:ThirdParty/FreeRTOS/tasks.c ****         #else /* portSTACK_GROWTH */
 759:ThirdParty/FreeRTOS/tasks.c ****         {
 760:ThirdParty/FreeRTOS/tasks.c ****             StackType_t * pxStack;
 761:ThirdParty/FreeRTOS/tasks.c **** 
 762:ThirdParty/FreeRTOS/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 763:ThirdParty/FreeRTOS/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 764:ThirdParty/FreeRTOS/tasks.c **** 
 765:ThirdParty/FreeRTOS/tasks.c ****             if( pxStack != NULL )
 766:ThirdParty/FreeRTOS/tasks.c ****             {
 767:ThirdParty/FreeRTOS/tasks.c ****                 /* Allocate space for the TCB. */
 768:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
 769:ThirdParty/FreeRTOS/tasks.c **** 
 770:ThirdParty/FreeRTOS/tasks.c ****                 if( pxNewTCB != NULL )
 771:ThirdParty/FreeRTOS/tasks.c ****                 {
 772:ThirdParty/FreeRTOS/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 773:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 15


 774:ThirdParty/FreeRTOS/tasks.c ****                     /* Store the stack location in the TCB. */
 775:ThirdParty/FreeRTOS/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 776:ThirdParty/FreeRTOS/tasks.c ****                 }
 777:ThirdParty/FreeRTOS/tasks.c ****                 else
 778:ThirdParty/FreeRTOS/tasks.c ****                 {
 779:ThirdParty/FreeRTOS/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 780:ThirdParty/FreeRTOS/tasks.c ****                      * it again. */
 781:ThirdParty/FreeRTOS/tasks.c ****                     vPortFreeStack( pxStack );
 782:ThirdParty/FreeRTOS/tasks.c ****                 }
 783:ThirdParty/FreeRTOS/tasks.c ****             }
 784:ThirdParty/FreeRTOS/tasks.c ****             else
 785:ThirdParty/FreeRTOS/tasks.c ****             {
 786:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB = NULL;
 787:ThirdParty/FreeRTOS/tasks.c ****             }
 788:ThirdParty/FreeRTOS/tasks.c ****         }
 789:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portSTACK_GROWTH */
 790:ThirdParty/FreeRTOS/tasks.c **** 
 791:ThirdParty/FreeRTOS/tasks.c ****         if( pxNewTCB != NULL )
 792:ThirdParty/FreeRTOS/tasks.c ****         {
 793:ThirdParty/FreeRTOS/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 794:ThirdParty/FreeRTOS/tasks.c ****             {
 795:ThirdParty/FreeRTOS/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 796:ThirdParty/FreeRTOS/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 797:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 798:ThirdParty/FreeRTOS/tasks.c ****             }
 799:ThirdParty/FreeRTOS/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 800:ThirdParty/FreeRTOS/tasks.c **** 
 801:ThirdParty/FreeRTOS/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 802:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 803:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 804:ThirdParty/FreeRTOS/tasks.c ****         }
 805:ThirdParty/FreeRTOS/tasks.c ****         else
 806:ThirdParty/FreeRTOS/tasks.c ****         {
 807:ThirdParty/FreeRTOS/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 808:ThirdParty/FreeRTOS/tasks.c ****         }
 809:ThirdParty/FreeRTOS/tasks.c **** 
 810:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 811:ThirdParty/FreeRTOS/tasks.c ****     }
 812:ThirdParty/FreeRTOS/tasks.c **** 
 813:ThirdParty/FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 814:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 815:ThirdParty/FreeRTOS/tasks.c **** 
 816:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 817:ThirdParty/FreeRTOS/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 818:ThirdParty/FreeRTOS/tasks.c ****                                   const uint32_t ulStackDepth,
 819:ThirdParty/FreeRTOS/tasks.c ****                                   void * const pvParameters,
 820:ThirdParty/FreeRTOS/tasks.c ****                                   UBaseType_t uxPriority,
 821:ThirdParty/FreeRTOS/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 822:ThirdParty/FreeRTOS/tasks.c ****                                   TCB_t * pxNewTCB,
 823:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 824:ThirdParty/FreeRTOS/tasks.c **** {
 825:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 826:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t x;
 827:ThirdParty/FreeRTOS/tasks.c **** 
 828:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 829:ThirdParty/FreeRTOS/tasks.c ****         /* Should the task be created in privileged mode? */
 830:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xRunPrivileged;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 16


 831:ThirdParty/FreeRTOS/tasks.c **** 
 832:ThirdParty/FreeRTOS/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:ThirdParty/FreeRTOS/tasks.c ****         {
 834:ThirdParty/FreeRTOS/tasks.c ****             xRunPrivileged = pdTRUE;
 835:ThirdParty/FreeRTOS/tasks.c ****         }
 836:ThirdParty/FreeRTOS/tasks.c ****         else
 837:ThirdParty/FreeRTOS/tasks.c ****         {
 838:ThirdParty/FreeRTOS/tasks.c ****             xRunPrivileged = pdFALSE;
 839:ThirdParty/FreeRTOS/tasks.c ****         }
 840:ThirdParty/FreeRTOS/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 841:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 842:ThirdParty/FreeRTOS/tasks.c **** 
 843:ThirdParty/FreeRTOS/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 844:ThirdParty/FreeRTOS/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:ThirdParty/FreeRTOS/tasks.c ****     {
 846:ThirdParty/FreeRTOS/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 847:ThirdParty/FreeRTOS/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 848:ThirdParty/FreeRTOS/tasks.c ****     }
 849:ThirdParty/FreeRTOS/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:ThirdParty/FreeRTOS/tasks.c **** 
 851:ThirdParty/FreeRTOS/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 852:ThirdParty/FreeRTOS/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 853:ThirdParty/FreeRTOS/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 854:ThirdParty/FreeRTOS/tasks.c ****      * by the port. */
 855:ThirdParty/FreeRTOS/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 856:ThirdParty/FreeRTOS/tasks.c ****     {
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 858:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 859:ThirdParty/FreeRTOS/tasks.c **** 
 860:ThirdParty/FreeRTOS/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 861:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 862:ThirdParty/FreeRTOS/tasks.c **** 
 863:ThirdParty/FreeRTOS/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:ThirdParty/FreeRTOS/tasks.c ****         {
 865:ThirdParty/FreeRTOS/tasks.c ****             /* Also record the stack's high address, which may assist
 866:ThirdParty/FreeRTOS/tasks.c ****              * debugging. */
 867:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:ThirdParty/FreeRTOS/tasks.c ****         }
 869:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:ThirdParty/FreeRTOS/tasks.c ****     }
 871:ThirdParty/FreeRTOS/tasks.c ****     #else /* portSTACK_GROWTH */
 872:ThirdParty/FreeRTOS/tasks.c ****     {
 873:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 874:ThirdParty/FreeRTOS/tasks.c **** 
 875:ThirdParty/FreeRTOS/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 876:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 877:ThirdParty/FreeRTOS/tasks.c **** 
 878:ThirdParty/FreeRTOS/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 879:ThirdParty/FreeRTOS/tasks.c ****          * performed. */
 880:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:ThirdParty/FreeRTOS/tasks.c ****     }
 882:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portSTACK_GROWTH */
 883:ThirdParty/FreeRTOS/tasks.c **** 
 884:ThirdParty/FreeRTOS/tasks.c ****     /* Store the task name in the TCB. */
 885:ThirdParty/FreeRTOS/tasks.c ****     if( pcName != NULL )
 886:ThirdParty/FreeRTOS/tasks.c ****     {
 887:ThirdParty/FreeRTOS/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 17


 888:ThirdParty/FreeRTOS/tasks.c ****         {
 889:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 890:ThirdParty/FreeRTOS/tasks.c **** 
 891:ThirdParty/FreeRTOS/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 892:ThirdParty/FreeRTOS/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 893:ThirdParty/FreeRTOS/tasks.c ****              * string is not accessible (extremely unlikely). */
 894:ThirdParty/FreeRTOS/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 895:ThirdParty/FreeRTOS/tasks.c ****             {
 896:ThirdParty/FreeRTOS/tasks.c ****                 break;
 897:ThirdParty/FreeRTOS/tasks.c ****             }
 898:ThirdParty/FreeRTOS/tasks.c ****             else
 899:ThirdParty/FreeRTOS/tasks.c ****             {
 900:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 901:ThirdParty/FreeRTOS/tasks.c ****             }
 902:ThirdParty/FreeRTOS/tasks.c ****         }
 903:ThirdParty/FreeRTOS/tasks.c **** 
 904:ThirdParty/FreeRTOS/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 905:ThirdParty/FreeRTOS/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 906:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 907:ThirdParty/FreeRTOS/tasks.c ****     }
 908:ThirdParty/FreeRTOS/tasks.c ****     else
 909:ThirdParty/FreeRTOS/tasks.c ****     {
 910:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 911:ThirdParty/FreeRTOS/tasks.c ****     }
 912:ThirdParty/FreeRTOS/tasks.c **** 
 913:ThirdParty/FreeRTOS/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 914:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 915:ThirdParty/FreeRTOS/tasks.c **** 
 916:ThirdParty/FreeRTOS/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 917:ThirdParty/FreeRTOS/tasks.c ****     {
 918:ThirdParty/FreeRTOS/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 919:ThirdParty/FreeRTOS/tasks.c ****     }
 920:ThirdParty/FreeRTOS/tasks.c ****     else
 921:ThirdParty/FreeRTOS/tasks.c ****     {
 922:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 923:ThirdParty/FreeRTOS/tasks.c ****     }
 924:ThirdParty/FreeRTOS/tasks.c **** 
 925:ThirdParty/FreeRTOS/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 926:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 927:ThirdParty/FreeRTOS/tasks.c ****     {
 928:ThirdParty/FreeRTOS/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 929:ThirdParty/FreeRTOS/tasks.c ****     }
 930:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configUSE_MUTEXES */
 931:ThirdParty/FreeRTOS/tasks.c **** 
 932:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 933:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 934:ThirdParty/FreeRTOS/tasks.c **** 
 935:ThirdParty/FreeRTOS/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 936:ThirdParty/FreeRTOS/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 937:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 938:ThirdParty/FreeRTOS/tasks.c **** 
 939:ThirdParty/FreeRTOS/tasks.c ****     /* Event lists are always in priority order. */
 940:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 941:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 942:ThirdParty/FreeRTOS/tasks.c **** 
 943:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 944:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 18


 945:ThirdParty/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 946:ThirdParty/FreeRTOS/tasks.c ****     }
 947:ThirdParty/FreeRTOS/tasks.c ****     #else
 948:ThirdParty/FreeRTOS/tasks.c ****     {
 949:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 950:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xRegions;
 951:ThirdParty/FreeRTOS/tasks.c ****     }
 952:ThirdParty/FreeRTOS/tasks.c ****     #endif
 953:ThirdParty/FreeRTOS/tasks.c **** 
 954:ThirdParty/FreeRTOS/tasks.c ****     #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
 955:ThirdParty/FreeRTOS/tasks.c ****     {
 956:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 957:ThirdParty/FreeRTOS/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 958:ThirdParty/FreeRTOS/tasks.c ****     }
 959:ThirdParty/FreeRTOS/tasks.c ****     #endif
 960:ThirdParty/FreeRTOS/tasks.c **** 
 961:ThirdParty/FreeRTOS/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 962:ThirdParty/FreeRTOS/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 963:ThirdParty/FreeRTOS/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 964:ThirdParty/FreeRTOS/tasks.c ****      * the top of stack variable is updated. */
 965:ThirdParty/FreeRTOS/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 966:ThirdParty/FreeRTOS/tasks.c ****     {
 967:ThirdParty/FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 968:ThirdParty/FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 969:ThirdParty/FreeRTOS/tasks.c ****          * function as well. */
 970:ThirdParty/FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 971:ThirdParty/FreeRTOS/tasks.c ****         {
 972:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 973:ThirdParty/FreeRTOS/tasks.c ****             {
 974:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 975:ThirdParty/FreeRTOS/tasks.c ****             }
 976:ThirdParty/FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
 977:ThirdParty/FreeRTOS/tasks.c ****             {
 978:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 979:ThirdParty/FreeRTOS/tasks.c ****             }
 980:ThirdParty/FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
 981:ThirdParty/FreeRTOS/tasks.c ****         }
 982:ThirdParty/FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 983:ThirdParty/FreeRTOS/tasks.c ****         {
 984:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 985:ThirdParty/FreeRTOS/tasks.c ****         }
 986:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 987:ThirdParty/FreeRTOS/tasks.c ****     }
 988:ThirdParty/FreeRTOS/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 989:ThirdParty/FreeRTOS/tasks.c ****     {
 990:ThirdParty/FreeRTOS/tasks.c ****         /* If the port has capability to detect stack overflow,
 991:ThirdParty/FreeRTOS/tasks.c ****          * pass the stack end address to the stack initialization
 992:ThirdParty/FreeRTOS/tasks.c ****          * function as well. */
 993:ThirdParty/FreeRTOS/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 994:ThirdParty/FreeRTOS/tasks.c ****         {
 995:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 996:ThirdParty/FreeRTOS/tasks.c ****             {
 997:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 998:ThirdParty/FreeRTOS/tasks.c ****             }
 999:ThirdParty/FreeRTOS/tasks.c ****             #else /* portSTACK_GROWTH */
1000:ThirdParty/FreeRTOS/tasks.c ****             {
1001:ThirdParty/FreeRTOS/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 19


1002:ThirdParty/FreeRTOS/tasks.c ****             }
1003:ThirdParty/FreeRTOS/tasks.c ****             #endif /* portSTACK_GROWTH */
1004:ThirdParty/FreeRTOS/tasks.c ****         }
1005:ThirdParty/FreeRTOS/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1006:ThirdParty/FreeRTOS/tasks.c ****         {
1007:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1008:ThirdParty/FreeRTOS/tasks.c ****         }
1009:ThirdParty/FreeRTOS/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1010:ThirdParty/FreeRTOS/tasks.c ****     }
1011:ThirdParty/FreeRTOS/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1012:ThirdParty/FreeRTOS/tasks.c **** 
1013:ThirdParty/FreeRTOS/tasks.c ****     if( pxCreatedTask != NULL )
1014:ThirdParty/FreeRTOS/tasks.c ****     {
1015:ThirdParty/FreeRTOS/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1016:ThirdParty/FreeRTOS/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1017:ThirdParty/FreeRTOS/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1018:ThirdParty/FreeRTOS/tasks.c ****     }
1019:ThirdParty/FreeRTOS/tasks.c ****     else
1020:ThirdParty/FreeRTOS/tasks.c ****     {
1021:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1022:ThirdParty/FreeRTOS/tasks.c ****     }
1023:ThirdParty/FreeRTOS/tasks.c **** }
1024:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1025:ThirdParty/FreeRTOS/tasks.c **** 
1026:ThirdParty/FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1027:ThirdParty/FreeRTOS/tasks.c **** {
1028:ThirdParty/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1029:ThirdParty/FreeRTOS/tasks.c ****      * updated. */
1030:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
1031:ThirdParty/FreeRTOS/tasks.c ****     {
1032:ThirdParty/FreeRTOS/tasks.c ****         uxCurrentNumberOfTasks++;
1033:ThirdParty/FreeRTOS/tasks.c **** 
1034:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB == NULL )
1035:ThirdParty/FreeRTOS/tasks.c ****         {
1036:ThirdParty/FreeRTOS/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1037:ThirdParty/FreeRTOS/tasks.c ****              * the suspended state - make this the current task. */
1038:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB = pxNewTCB;
1039:ThirdParty/FreeRTOS/tasks.c **** 
1040:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:ThirdParty/FreeRTOS/tasks.c ****             {
1042:ThirdParty/FreeRTOS/tasks.c ****                 /* This is the first task to be created so do the preliminary
1043:ThirdParty/FreeRTOS/tasks.c ****                  * initialisation required.  We will not recover if this call
1044:ThirdParty/FreeRTOS/tasks.c ****                  * fails, but we will report the failure. */
1045:ThirdParty/FreeRTOS/tasks.c ****                 prvInitialiseTaskLists();
1046:ThirdParty/FreeRTOS/tasks.c ****             }
1047:ThirdParty/FreeRTOS/tasks.c ****             else
1048:ThirdParty/FreeRTOS/tasks.c ****             {
1049:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1050:ThirdParty/FreeRTOS/tasks.c ****             }
1051:ThirdParty/FreeRTOS/tasks.c ****         }
1052:ThirdParty/FreeRTOS/tasks.c ****         else
1053:ThirdParty/FreeRTOS/tasks.c ****         {
1054:ThirdParty/FreeRTOS/tasks.c ****             /* If the scheduler is not already running, make this task the
1055:ThirdParty/FreeRTOS/tasks.c ****              * current task if it is the highest priority task to be created
1056:ThirdParty/FreeRTOS/tasks.c ****              * so far. */
1057:ThirdParty/FreeRTOS/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1058:ThirdParty/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 20


1059:ThirdParty/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:ThirdParty/FreeRTOS/tasks.c ****                 {
1061:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1062:ThirdParty/FreeRTOS/tasks.c ****                 }
1063:ThirdParty/FreeRTOS/tasks.c ****                 else
1064:ThirdParty/FreeRTOS/tasks.c ****                 {
1065:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1066:ThirdParty/FreeRTOS/tasks.c ****                 }
1067:ThirdParty/FreeRTOS/tasks.c ****             }
1068:ThirdParty/FreeRTOS/tasks.c ****             else
1069:ThirdParty/FreeRTOS/tasks.c ****             {
1070:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1071:ThirdParty/FreeRTOS/tasks.c ****             }
1072:ThirdParty/FreeRTOS/tasks.c ****         }
1073:ThirdParty/FreeRTOS/tasks.c **** 
1074:ThirdParty/FreeRTOS/tasks.c ****         uxTaskNumber++;
1075:ThirdParty/FreeRTOS/tasks.c **** 
1076:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1077:ThirdParty/FreeRTOS/tasks.c ****         {
1078:ThirdParty/FreeRTOS/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1079:ThirdParty/FreeRTOS/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:ThirdParty/FreeRTOS/tasks.c ****         }
1081:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1082:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1083:ThirdParty/FreeRTOS/tasks.c **** 
1084:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1085:ThirdParty/FreeRTOS/tasks.c **** 
1086:ThirdParty/FreeRTOS/tasks.c ****         portSETUP_TCB( pxNewTCB );
1087:ThirdParty/FreeRTOS/tasks.c ****     }
1088:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
1089:ThirdParty/FreeRTOS/tasks.c **** 
1090:ThirdParty/FreeRTOS/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1091:ThirdParty/FreeRTOS/tasks.c ****     {
1092:ThirdParty/FreeRTOS/tasks.c ****         /* If the created task is of a higher priority than the current task
1093:ThirdParty/FreeRTOS/tasks.c ****          * then it should run now. */
1094:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:ThirdParty/FreeRTOS/tasks.c ****         {
1096:ThirdParty/FreeRTOS/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1097:ThirdParty/FreeRTOS/tasks.c ****         }
1098:ThirdParty/FreeRTOS/tasks.c ****         else
1099:ThirdParty/FreeRTOS/tasks.c ****         {
1100:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1101:ThirdParty/FreeRTOS/tasks.c ****         }
1102:ThirdParty/FreeRTOS/tasks.c ****     }
1103:ThirdParty/FreeRTOS/tasks.c ****     else
1104:ThirdParty/FreeRTOS/tasks.c ****     {
1105:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1106:ThirdParty/FreeRTOS/tasks.c ****     }
1107:ThirdParty/FreeRTOS/tasks.c **** }
1108:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1109:ThirdParty/FreeRTOS/tasks.c **** 
1110:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:ThirdParty/FreeRTOS/tasks.c **** 
1112:ThirdParty/FreeRTOS/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:ThirdParty/FreeRTOS/tasks.c ****     {
1114:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1115:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 21


1116:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1117:ThirdParty/FreeRTOS/tasks.c ****         {
1118:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the calling task that is
1119:ThirdParty/FreeRTOS/tasks.c ****              * being deleted. */
1120:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:ThirdParty/FreeRTOS/tasks.c **** 
1122:ThirdParty/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list. */
1123:ThirdParty/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:ThirdParty/FreeRTOS/tasks.c ****             {
1125:ThirdParty/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:ThirdParty/FreeRTOS/tasks.c ****             }
1127:ThirdParty/FreeRTOS/tasks.c ****             else
1128:ThirdParty/FreeRTOS/tasks.c ****             {
1129:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1130:ThirdParty/FreeRTOS/tasks.c ****             }
1131:ThirdParty/FreeRTOS/tasks.c **** 
1132:ThirdParty/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1133:ThirdParty/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:ThirdParty/FreeRTOS/tasks.c ****             {
1135:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:ThirdParty/FreeRTOS/tasks.c ****             }
1137:ThirdParty/FreeRTOS/tasks.c ****             else
1138:ThirdParty/FreeRTOS/tasks.c ****             {
1139:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1140:ThirdParty/FreeRTOS/tasks.c ****             }
1141:ThirdParty/FreeRTOS/tasks.c **** 
1142:ThirdParty/FreeRTOS/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1143:ThirdParty/FreeRTOS/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1144:ThirdParty/FreeRTOS/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:ThirdParty/FreeRTOS/tasks.c ****              * not return. */
1146:ThirdParty/FreeRTOS/tasks.c ****             uxTaskNumber++;
1147:ThirdParty/FreeRTOS/tasks.c **** 
1148:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1149:ThirdParty/FreeRTOS/tasks.c ****             {
1150:ThirdParty/FreeRTOS/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1151:ThirdParty/FreeRTOS/tasks.c ****                  * task itself, as a context switch to another task is required.
1152:ThirdParty/FreeRTOS/tasks.c ****                  * Place the task in the termination list.  The idle task will
1153:ThirdParty/FreeRTOS/tasks.c ****                  * check the termination list and free up any memory allocated by
1154:ThirdParty/FreeRTOS/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1155:ThirdParty/FreeRTOS/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:ThirdParty/FreeRTOS/tasks.c **** 
1157:ThirdParty/FreeRTOS/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1158:ThirdParty/FreeRTOS/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1159:ThirdParty/FreeRTOS/tasks.c ****                  * check the xTasksWaitingTermination list. */
1160:ThirdParty/FreeRTOS/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1161:ThirdParty/FreeRTOS/tasks.c **** 
1162:ThirdParty/FreeRTOS/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1163:ThirdParty/FreeRTOS/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1164:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1165:ThirdParty/FreeRTOS/tasks.c **** 
1166:ThirdParty/FreeRTOS/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1167:ThirdParty/FreeRTOS/tasks.c ****                  * in which Windows specific clean up operations are performed,
1168:ThirdParty/FreeRTOS/tasks.c ****                  * after which it is not possible to yield away from this task -
1169:ThirdParty/FreeRTOS/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1170:ThirdParty/FreeRTOS/tasks.c ****                  * required. */
1171:ThirdParty/FreeRTOS/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1172:ThirdParty/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 22


1173:ThirdParty/FreeRTOS/tasks.c ****             else
1174:ThirdParty/FreeRTOS/tasks.c ****             {
1175:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
1176:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
1177:ThirdParty/FreeRTOS/tasks.c **** 
1178:ThirdParty/FreeRTOS/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1179:ThirdParty/FreeRTOS/tasks.c ****                  * the task that has just been deleted. */
1180:ThirdParty/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1181:ThirdParty/FreeRTOS/tasks.c ****             }
1182:ThirdParty/FreeRTOS/tasks.c ****         }
1183:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1184:ThirdParty/FreeRTOS/tasks.c **** 
1185:ThirdParty/FreeRTOS/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1186:ThirdParty/FreeRTOS/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1187:ThirdParty/FreeRTOS/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1188:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB != pxCurrentTCB )
1189:ThirdParty/FreeRTOS/tasks.c ****         {
1190:ThirdParty/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
1191:ThirdParty/FreeRTOS/tasks.c ****         }
1192:ThirdParty/FreeRTOS/tasks.c **** 
1193:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1194:ThirdParty/FreeRTOS/tasks.c ****          * been deleted. */
1195:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1196:ThirdParty/FreeRTOS/tasks.c ****         {
1197:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
1198:ThirdParty/FreeRTOS/tasks.c ****             {
1199:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1200:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1201:ThirdParty/FreeRTOS/tasks.c ****             }
1202:ThirdParty/FreeRTOS/tasks.c ****             else
1203:ThirdParty/FreeRTOS/tasks.c ****             {
1204:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1205:ThirdParty/FreeRTOS/tasks.c ****             }
1206:ThirdParty/FreeRTOS/tasks.c ****         }
1207:ThirdParty/FreeRTOS/tasks.c ****     }
1208:ThirdParty/FreeRTOS/tasks.c **** 
1209:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1210:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1211:ThirdParty/FreeRTOS/tasks.c **** 
1212:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1213:ThirdParty/FreeRTOS/tasks.c **** 
1214:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1215:ThirdParty/FreeRTOS/tasks.c ****                                 const TickType_t xTimeIncrement )
1216:ThirdParty/FreeRTOS/tasks.c ****     {
1217:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
1218:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1219:ThirdParty/FreeRTOS/tasks.c **** 
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxPreviousWakeTime );
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1222:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
1223:ThirdParty/FreeRTOS/tasks.c **** 
1224:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
1225:ThirdParty/FreeRTOS/tasks.c ****         {
1226:ThirdParty/FreeRTOS/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1227:ThirdParty/FreeRTOS/tasks.c ****              * block. */
1228:ThirdParty/FreeRTOS/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1229:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 23


1230:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1231:ThirdParty/FreeRTOS/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1232:ThirdParty/FreeRTOS/tasks.c **** 
1233:ThirdParty/FreeRTOS/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1234:ThirdParty/FreeRTOS/tasks.c ****             {
1235:ThirdParty/FreeRTOS/tasks.c ****                 /* The tick count has overflowed since this function was
1236:ThirdParty/FreeRTOS/tasks.c ****                  * lasted called.  In this case the only time we should ever
1237:ThirdParty/FreeRTOS/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1238:ThirdParty/FreeRTOS/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1239:ThirdParty/FreeRTOS/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1240:ThirdParty/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1241:ThirdParty/FreeRTOS/tasks.c ****                 {
1242:ThirdParty/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1243:ThirdParty/FreeRTOS/tasks.c ****                 }
1244:ThirdParty/FreeRTOS/tasks.c ****                 else
1245:ThirdParty/FreeRTOS/tasks.c ****                 {
1246:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1247:ThirdParty/FreeRTOS/tasks.c ****                 }
1248:ThirdParty/FreeRTOS/tasks.c ****             }
1249:ThirdParty/FreeRTOS/tasks.c ****             else
1250:ThirdParty/FreeRTOS/tasks.c ****             {
1251:ThirdParty/FreeRTOS/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1252:ThirdParty/FreeRTOS/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1253:ThirdParty/FreeRTOS/tasks.c ****                  * tick time is less than the wake time. */
1254:ThirdParty/FreeRTOS/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1255:ThirdParty/FreeRTOS/tasks.c ****                 {
1256:ThirdParty/FreeRTOS/tasks.c ****                     xShouldDelay = pdTRUE;
1257:ThirdParty/FreeRTOS/tasks.c ****                 }
1258:ThirdParty/FreeRTOS/tasks.c ****                 else
1259:ThirdParty/FreeRTOS/tasks.c ****                 {
1260:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1261:ThirdParty/FreeRTOS/tasks.c ****                 }
1262:ThirdParty/FreeRTOS/tasks.c ****             }
1263:ThirdParty/FreeRTOS/tasks.c **** 
1264:ThirdParty/FreeRTOS/tasks.c ****             /* Update the wake time ready for the next call. */
1265:ThirdParty/FreeRTOS/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1266:ThirdParty/FreeRTOS/tasks.c **** 
1267:ThirdParty/FreeRTOS/tasks.c ****             if( xShouldDelay != pdFALSE )
1268:ThirdParty/FreeRTOS/tasks.c ****             {
1269:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1270:ThirdParty/FreeRTOS/tasks.c **** 
1271:ThirdParty/FreeRTOS/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1272:ThirdParty/FreeRTOS/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1273:ThirdParty/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1274:ThirdParty/FreeRTOS/tasks.c ****             }
1275:ThirdParty/FreeRTOS/tasks.c ****             else
1276:ThirdParty/FreeRTOS/tasks.c ****             {
1277:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1278:ThirdParty/FreeRTOS/tasks.c ****             }
1279:ThirdParty/FreeRTOS/tasks.c ****         }
1280:ThirdParty/FreeRTOS/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1281:ThirdParty/FreeRTOS/tasks.c **** 
1282:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1283:ThirdParty/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1284:ThirdParty/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1285:ThirdParty/FreeRTOS/tasks.c ****         {
1286:ThirdParty/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 24


1287:ThirdParty/FreeRTOS/tasks.c ****         }
1288:ThirdParty/FreeRTOS/tasks.c ****         else
1289:ThirdParty/FreeRTOS/tasks.c ****         {
1290:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1291:ThirdParty/FreeRTOS/tasks.c ****         }
1292:ThirdParty/FreeRTOS/tasks.c **** 
1293:ThirdParty/FreeRTOS/tasks.c ****         return xShouldDelay;
1294:ThirdParty/FreeRTOS/tasks.c ****     }
1295:ThirdParty/FreeRTOS/tasks.c **** 
1296:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1297:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1298:ThirdParty/FreeRTOS/tasks.c **** 
1299:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1300:ThirdParty/FreeRTOS/tasks.c **** 
1301:ThirdParty/FreeRTOS/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1302:ThirdParty/FreeRTOS/tasks.c ****     {
1303:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1304:ThirdParty/FreeRTOS/tasks.c **** 
1305:ThirdParty/FreeRTOS/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1306:ThirdParty/FreeRTOS/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1307:ThirdParty/FreeRTOS/tasks.c ****         {
1308:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended == 0 );
1309:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
1310:ThirdParty/FreeRTOS/tasks.c ****             {
1311:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELAY();
1312:ThirdParty/FreeRTOS/tasks.c **** 
1313:ThirdParty/FreeRTOS/tasks.c ****                 /* A task that is removed from the event list while the
1314:ThirdParty/FreeRTOS/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1315:ThirdParty/FreeRTOS/tasks.c ****                  * list or removed from the blocked list until the scheduler
1316:ThirdParty/FreeRTOS/tasks.c ****                  * is resumed.
1317:ThirdParty/FreeRTOS/tasks.c ****                  *
1318:ThirdParty/FreeRTOS/tasks.c ****                  * This task cannot be in an event list as it is the currently
1319:ThirdParty/FreeRTOS/tasks.c ****                  * executing task. */
1320:ThirdParty/FreeRTOS/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1321:ThirdParty/FreeRTOS/tasks.c ****             }
1322:ThirdParty/FreeRTOS/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1323:ThirdParty/FreeRTOS/tasks.c ****         }
1324:ThirdParty/FreeRTOS/tasks.c ****         else
1325:ThirdParty/FreeRTOS/tasks.c ****         {
1326:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1327:ThirdParty/FreeRTOS/tasks.c ****         }
1328:ThirdParty/FreeRTOS/tasks.c **** 
1329:ThirdParty/FreeRTOS/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1330:ThirdParty/FreeRTOS/tasks.c ****          * have put ourselves to sleep. */
1331:ThirdParty/FreeRTOS/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1332:ThirdParty/FreeRTOS/tasks.c ****         {
1333:ThirdParty/FreeRTOS/tasks.c ****             portYIELD_WITHIN_API();
1334:ThirdParty/FreeRTOS/tasks.c ****         }
1335:ThirdParty/FreeRTOS/tasks.c ****         else
1336:ThirdParty/FreeRTOS/tasks.c ****         {
1337:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1338:ThirdParty/FreeRTOS/tasks.c ****         }
1339:ThirdParty/FreeRTOS/tasks.c ****     }
1340:ThirdParty/FreeRTOS/tasks.c **** 
1341:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1342:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1343:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 25


1344:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1345:ThirdParty/FreeRTOS/tasks.c **** 
1346:ThirdParty/FreeRTOS/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1347:ThirdParty/FreeRTOS/tasks.c ****     {
1348:ThirdParty/FreeRTOS/tasks.c ****         eTaskState eReturn;
1349:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxStateList;
1350:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxDelayedList;
1351:ThirdParty/FreeRTOS/tasks.c ****         List_t const * pxOverflowedDelayedList;
1352:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
1353:ThirdParty/FreeRTOS/tasks.c **** 
1354:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
1355:ThirdParty/FreeRTOS/tasks.c **** 
1356:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1357:ThirdParty/FreeRTOS/tasks.c ****         {
1358:ThirdParty/FreeRTOS/tasks.c ****             /* The task calling this function is querying its own state. */
1359:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eRunning;
1360:ThirdParty/FreeRTOS/tasks.c ****         }
1361:ThirdParty/FreeRTOS/tasks.c ****         else
1362:ThirdParty/FreeRTOS/tasks.c ****         {
1363:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1364:ThirdParty/FreeRTOS/tasks.c ****             {
1365:ThirdParty/FreeRTOS/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1366:ThirdParty/FreeRTOS/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1367:ThirdParty/FreeRTOS/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1368:ThirdParty/FreeRTOS/tasks.c ****             }
1369:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1370:ThirdParty/FreeRTOS/tasks.c **** 
1371:ThirdParty/FreeRTOS/tasks.c ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1372:ThirdParty/FreeRTOS/tasks.c ****             {
1373:ThirdParty/FreeRTOS/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1374:ThirdParty/FreeRTOS/tasks.c ****                  * lists. */
1375:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eBlocked;
1376:ThirdParty/FreeRTOS/tasks.c ****             }
1377:ThirdParty/FreeRTOS/tasks.c **** 
1378:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1379:ThirdParty/FreeRTOS/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1380:ThirdParty/FreeRTOS/tasks.c ****                 {
1381:ThirdParty/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the suspended
1382:ThirdParty/FreeRTOS/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1383:ThirdParty/FreeRTOS/tasks.c ****                      * indefinitely? */
1384:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1385:ThirdParty/FreeRTOS/tasks.c ****                     {
1386:ThirdParty/FreeRTOS/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1387:ThirdParty/FreeRTOS/tasks.c ****                         {
1388:ThirdParty/FreeRTOS/tasks.c ****                             BaseType_t x;
1389:ThirdParty/FreeRTOS/tasks.c **** 
1390:ThirdParty/FreeRTOS/tasks.c ****                             /* The task does not appear on the event list item of
1391:ThirdParty/FreeRTOS/tasks.c ****                              * and of the RTOS objects, but could still be in the
1392:ThirdParty/FreeRTOS/tasks.c ****                              * blocked state if it is waiting on its notification
1393:ThirdParty/FreeRTOS/tasks.c ****                              * rather than waiting on an object.  If not, is
1394:ThirdParty/FreeRTOS/tasks.c ****                              * suspended. */
1395:ThirdParty/FreeRTOS/tasks.c ****                             eReturn = eSuspended;
1396:ThirdParty/FreeRTOS/tasks.c **** 
1397:ThirdParty/FreeRTOS/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1398:ThirdParty/FreeRTOS/tasks.c ****                             {
1399:ThirdParty/FreeRTOS/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1400:ThirdParty/FreeRTOS/tasks.c ****                                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 26


1401:ThirdParty/FreeRTOS/tasks.c ****                                     eReturn = eBlocked;
1402:ThirdParty/FreeRTOS/tasks.c ****                                     break;
1403:ThirdParty/FreeRTOS/tasks.c ****                                 }
1404:ThirdParty/FreeRTOS/tasks.c ****                             }
1405:ThirdParty/FreeRTOS/tasks.c ****                         }
1406:ThirdParty/FreeRTOS/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1407:ThirdParty/FreeRTOS/tasks.c ****                         {
1408:ThirdParty/FreeRTOS/tasks.c ****                             eReturn = eSuspended;
1409:ThirdParty/FreeRTOS/tasks.c ****                         }
1410:ThirdParty/FreeRTOS/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1411:ThirdParty/FreeRTOS/tasks.c ****                     }
1412:ThirdParty/FreeRTOS/tasks.c ****                     else
1413:ThirdParty/FreeRTOS/tasks.c ****                     {
1414:ThirdParty/FreeRTOS/tasks.c ****                         eReturn = eBlocked;
1415:ThirdParty/FreeRTOS/tasks.c ****                     }
1416:ThirdParty/FreeRTOS/tasks.c ****                 }
1417:ThirdParty/FreeRTOS/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1418:ThirdParty/FreeRTOS/tasks.c **** 
1419:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1420:ThirdParty/FreeRTOS/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1421:ThirdParty/FreeRTOS/tasks.c ****                 {
1422:ThirdParty/FreeRTOS/tasks.c ****                     /* The task being queried is referenced from the deleted
1423:ThirdParty/FreeRTOS/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1424:ThirdParty/FreeRTOS/tasks.c ****                      * all. */
1425:ThirdParty/FreeRTOS/tasks.c ****                     eReturn = eDeleted;
1426:ThirdParty/FreeRTOS/tasks.c ****                 }
1427:ThirdParty/FreeRTOS/tasks.c ****             #endif
1428:ThirdParty/FreeRTOS/tasks.c **** 
1429:ThirdParty/FreeRTOS/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1430:ThirdParty/FreeRTOS/tasks.c ****             {
1431:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task is not in any other state, it must be in the
1432:ThirdParty/FreeRTOS/tasks.c ****                  * Ready (including pending ready) state. */
1433:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eReady;
1434:ThirdParty/FreeRTOS/tasks.c ****             }
1435:ThirdParty/FreeRTOS/tasks.c ****         }
1436:ThirdParty/FreeRTOS/tasks.c **** 
1437:ThirdParty/FreeRTOS/tasks.c ****         return eReturn;
1438:ThirdParty/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1439:ThirdParty/FreeRTOS/tasks.c **** 
1440:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1441:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1442:ThirdParty/FreeRTOS/tasks.c **** 
1443:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1444:ThirdParty/FreeRTOS/tasks.c **** 
1445:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1446:ThirdParty/FreeRTOS/tasks.c ****     {
1447:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1448:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
1449:ThirdParty/FreeRTOS/tasks.c **** 
1450:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1451:ThirdParty/FreeRTOS/tasks.c ****         {
1452:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the task
1453:ThirdParty/FreeRTOS/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1454:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1455:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1456:ThirdParty/FreeRTOS/tasks.c ****         }
1457:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 27


1458:ThirdParty/FreeRTOS/tasks.c **** 
1459:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
1460:ThirdParty/FreeRTOS/tasks.c ****     }
1461:ThirdParty/FreeRTOS/tasks.c **** 
1462:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1463:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1464:ThirdParty/FreeRTOS/tasks.c **** 
1465:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1466:ThirdParty/FreeRTOS/tasks.c **** 
1467:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1468:ThirdParty/FreeRTOS/tasks.c ****     {
1469:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
1470:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
1471:ThirdParty/FreeRTOS/tasks.c **** 
1472:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1473:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1474:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1475:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1476:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1477:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1478:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1479:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1480:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
1481:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1482:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1483:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1484:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1485:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1486:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
1487:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1488:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1489:ThirdParty/FreeRTOS/tasks.c **** 
1490:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1491:ThirdParty/FreeRTOS/tasks.c ****         {
1492:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1493:ThirdParty/FreeRTOS/tasks.c ****              * task that is being queried. */
1494:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1495:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
1496:ThirdParty/FreeRTOS/tasks.c ****         }
1497:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1498:ThirdParty/FreeRTOS/tasks.c **** 
1499:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
1500:ThirdParty/FreeRTOS/tasks.c ****     }
1501:ThirdParty/FreeRTOS/tasks.c **** 
1502:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1503:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1504:ThirdParty/FreeRTOS/tasks.c **** 
1505:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1506:ThirdParty/FreeRTOS/tasks.c **** 
1507:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1508:ThirdParty/FreeRTOS/tasks.c ****                            UBaseType_t uxNewPriority )
1509:ThirdParty/FreeRTOS/tasks.c ****     {
1510:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1511:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1512:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1513:ThirdParty/FreeRTOS/tasks.c **** 
1514:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 28


1515:ThirdParty/FreeRTOS/tasks.c **** 
1516:ThirdParty/FreeRTOS/tasks.c ****         /* Ensure the new priority is valid. */
1517:ThirdParty/FreeRTOS/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1518:ThirdParty/FreeRTOS/tasks.c ****         {
1519:ThirdParty/FreeRTOS/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1520:ThirdParty/FreeRTOS/tasks.c ****         }
1521:ThirdParty/FreeRTOS/tasks.c ****         else
1522:ThirdParty/FreeRTOS/tasks.c ****         {
1523:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1524:ThirdParty/FreeRTOS/tasks.c ****         }
1525:ThirdParty/FreeRTOS/tasks.c **** 
1526:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1527:ThirdParty/FreeRTOS/tasks.c ****         {
1528:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1529:ThirdParty/FreeRTOS/tasks.c ****              * task that is being changed. */
1530:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1531:ThirdParty/FreeRTOS/tasks.c **** 
1532:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1533:ThirdParty/FreeRTOS/tasks.c **** 
1534:ThirdParty/FreeRTOS/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1535:ThirdParty/FreeRTOS/tasks.c ****             {
1536:ThirdParty/FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1537:ThirdParty/FreeRTOS/tasks.c ****             }
1538:ThirdParty/FreeRTOS/tasks.c ****             #else
1539:ThirdParty/FreeRTOS/tasks.c ****             {
1540:ThirdParty/FreeRTOS/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1541:ThirdParty/FreeRTOS/tasks.c ****             }
1542:ThirdParty/FreeRTOS/tasks.c ****             #endif
1543:ThirdParty/FreeRTOS/tasks.c **** 
1544:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1545:ThirdParty/FreeRTOS/tasks.c ****             {
1546:ThirdParty/FreeRTOS/tasks.c ****                 /* The priority change may have readied a task of higher
1547:ThirdParty/FreeRTOS/tasks.c ****                  * priority than the calling task. */
1548:ThirdParty/FreeRTOS/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1549:ThirdParty/FreeRTOS/tasks.c ****                 {
1550:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1551:ThirdParty/FreeRTOS/tasks.c ****                     {
1552:ThirdParty/FreeRTOS/tasks.c ****                         /* The priority of a task other than the currently
1553:ThirdParty/FreeRTOS/tasks.c ****                          * running task is being raised.  Is the priority being
1554:ThirdParty/FreeRTOS/tasks.c ****                          * raised above that of the running task? */
1555:ThirdParty/FreeRTOS/tasks.c ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1556:ThirdParty/FreeRTOS/tasks.c ****                         {
1557:ThirdParty/FreeRTOS/tasks.c ****                             xYieldRequired = pdTRUE;
1558:ThirdParty/FreeRTOS/tasks.c ****                         }
1559:ThirdParty/FreeRTOS/tasks.c ****                         else
1560:ThirdParty/FreeRTOS/tasks.c ****                         {
1561:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1562:ThirdParty/FreeRTOS/tasks.c ****                         }
1563:ThirdParty/FreeRTOS/tasks.c ****                     }
1564:ThirdParty/FreeRTOS/tasks.c ****                     else
1565:ThirdParty/FreeRTOS/tasks.c ****                     {
1566:ThirdParty/FreeRTOS/tasks.c ****                         /* The priority of the running task is being raised,
1567:ThirdParty/FreeRTOS/tasks.c ****                          * but the running task must already be the highest
1568:ThirdParty/FreeRTOS/tasks.c ****                          * priority task able to run so no yield is required. */
1569:ThirdParty/FreeRTOS/tasks.c ****                     }
1570:ThirdParty/FreeRTOS/tasks.c ****                 }
1571:ThirdParty/FreeRTOS/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 29


1572:ThirdParty/FreeRTOS/tasks.c ****                 {
1573:ThirdParty/FreeRTOS/tasks.c ****                     /* Setting the priority of the running task down means
1574:ThirdParty/FreeRTOS/tasks.c ****                      * there may now be another task of higher priority that
1575:ThirdParty/FreeRTOS/tasks.c ****                      * is ready to execute. */
1576:ThirdParty/FreeRTOS/tasks.c ****                     xYieldRequired = pdTRUE;
1577:ThirdParty/FreeRTOS/tasks.c ****                 }
1578:ThirdParty/FreeRTOS/tasks.c ****                 else
1579:ThirdParty/FreeRTOS/tasks.c ****                 {
1580:ThirdParty/FreeRTOS/tasks.c ****                     /* Setting the priority of any other task down does not
1581:ThirdParty/FreeRTOS/tasks.c ****                      * require a yield as the running task must be above the
1582:ThirdParty/FreeRTOS/tasks.c ****                      * new priority of the task being modified. */
1583:ThirdParty/FreeRTOS/tasks.c ****                 }
1584:ThirdParty/FreeRTOS/tasks.c **** 
1585:ThirdParty/FreeRTOS/tasks.c ****                 /* Remember the ready list the task might be referenced from
1586:ThirdParty/FreeRTOS/tasks.c ****                  * before its uxPriority member is changed so the
1587:ThirdParty/FreeRTOS/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1588:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1589:ThirdParty/FreeRTOS/tasks.c **** 
1590:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1591:ThirdParty/FreeRTOS/tasks.c ****                 {
1592:ThirdParty/FreeRTOS/tasks.c ****                     /* Only change the priority being used if the task is not
1593:ThirdParty/FreeRTOS/tasks.c ****                      * currently using an inherited priority. */
1594:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1595:ThirdParty/FreeRTOS/tasks.c ****                     {
1596:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1597:ThirdParty/FreeRTOS/tasks.c ****                     }
1598:ThirdParty/FreeRTOS/tasks.c ****                     else
1599:ThirdParty/FreeRTOS/tasks.c ****                     {
1600:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1601:ThirdParty/FreeRTOS/tasks.c ****                     }
1602:ThirdParty/FreeRTOS/tasks.c **** 
1603:ThirdParty/FreeRTOS/tasks.c ****                     /* The base priority gets set whatever. */
1604:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1605:ThirdParty/FreeRTOS/tasks.c ****                 }
1606:ThirdParty/FreeRTOS/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1607:ThirdParty/FreeRTOS/tasks.c ****                 {
1608:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1609:ThirdParty/FreeRTOS/tasks.c ****                 }
1610:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1611:ThirdParty/FreeRTOS/tasks.c **** 
1612:ThirdParty/FreeRTOS/tasks.c ****                 /* Only reset the event list item value if the value is not
1613:ThirdParty/FreeRTOS/tasks.c ****                  * being used for anything else. */
1614:ThirdParty/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1615:ThirdParty/FreeRTOS/tasks.c ****                 {
1616:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1617:ThirdParty/FreeRTOS/tasks.c ****                 }
1618:ThirdParty/FreeRTOS/tasks.c ****                 else
1619:ThirdParty/FreeRTOS/tasks.c ****                 {
1620:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1621:ThirdParty/FreeRTOS/tasks.c ****                 }
1622:ThirdParty/FreeRTOS/tasks.c **** 
1623:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1624:ThirdParty/FreeRTOS/tasks.c ****                  * nothing more than change its priority variable. However, if
1625:ThirdParty/FreeRTOS/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1626:ThirdParty/FreeRTOS/tasks.c ****                  * in the list appropriate to its new priority. */
1627:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1628:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 30


1629:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is currently in its ready list - remove before
1630:ThirdParty/FreeRTOS/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1631:ThirdParty/FreeRTOS/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1632:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1633:ThirdParty/FreeRTOS/tasks.c ****                     {
1634:ThirdParty/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
1635:ThirdParty/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
1636:ThirdParty/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
1637:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1638:ThirdParty/FreeRTOS/tasks.c ****                     }
1639:ThirdParty/FreeRTOS/tasks.c ****                     else
1640:ThirdParty/FreeRTOS/tasks.c ****                     {
1641:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1642:ThirdParty/FreeRTOS/tasks.c ****                     }
1643:ThirdParty/FreeRTOS/tasks.c **** 
1644:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1645:ThirdParty/FreeRTOS/tasks.c ****                 }
1646:ThirdParty/FreeRTOS/tasks.c ****                 else
1647:ThirdParty/FreeRTOS/tasks.c ****                 {
1648:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1649:ThirdParty/FreeRTOS/tasks.c ****                 }
1650:ThirdParty/FreeRTOS/tasks.c **** 
1651:ThirdParty/FreeRTOS/tasks.c ****                 if( xYieldRequired != pdFALSE )
1652:ThirdParty/FreeRTOS/tasks.c ****                 {
1653:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1654:ThirdParty/FreeRTOS/tasks.c ****                 }
1655:ThirdParty/FreeRTOS/tasks.c ****                 else
1656:ThirdParty/FreeRTOS/tasks.c ****                 {
1657:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1658:ThirdParty/FreeRTOS/tasks.c ****                 }
1659:ThirdParty/FreeRTOS/tasks.c **** 
1660:ThirdParty/FreeRTOS/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1661:ThirdParty/FreeRTOS/tasks.c ****                  * optimised task selection is not being used. */
1662:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1663:ThirdParty/FreeRTOS/tasks.c ****             }
1664:ThirdParty/FreeRTOS/tasks.c ****         }
1665:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1666:ThirdParty/FreeRTOS/tasks.c ****     }
1667:ThirdParty/FreeRTOS/tasks.c **** 
1668:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1669:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1670:ThirdParty/FreeRTOS/tasks.c **** 
1671:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1672:ThirdParty/FreeRTOS/tasks.c **** 
1673:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1674:ThirdParty/FreeRTOS/tasks.c ****     {
1675:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
1676:ThirdParty/FreeRTOS/tasks.c **** 
1677:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
1678:ThirdParty/FreeRTOS/tasks.c ****         {
1679:ThirdParty/FreeRTOS/tasks.c ****             /* If null is passed in here then it is the running task that is
1680:ThirdParty/FreeRTOS/tasks.c ****              * being suspended. */
1681:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1682:ThirdParty/FreeRTOS/tasks.c **** 
1683:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1684:ThirdParty/FreeRTOS/tasks.c **** 
1685:ThirdParty/FreeRTOS/tasks.c ****             /* Remove task from the ready/delayed list and place in the
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 31


1686:ThirdParty/FreeRTOS/tasks.c ****              * suspended list. */
1687:ThirdParty/FreeRTOS/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1688:ThirdParty/FreeRTOS/tasks.c ****             {
1689:ThirdParty/FreeRTOS/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1690:ThirdParty/FreeRTOS/tasks.c ****             }
1691:ThirdParty/FreeRTOS/tasks.c ****             else
1692:ThirdParty/FreeRTOS/tasks.c ****             {
1693:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1694:ThirdParty/FreeRTOS/tasks.c ****             }
1695:ThirdParty/FreeRTOS/tasks.c **** 
1696:ThirdParty/FreeRTOS/tasks.c ****             /* Is the task waiting on an event also? */
1697:ThirdParty/FreeRTOS/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1698:ThirdParty/FreeRTOS/tasks.c ****             {
1699:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1700:ThirdParty/FreeRTOS/tasks.c ****             }
1701:ThirdParty/FreeRTOS/tasks.c ****             else
1702:ThirdParty/FreeRTOS/tasks.c ****             {
1703:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1704:ThirdParty/FreeRTOS/tasks.c ****             }
1705:ThirdParty/FreeRTOS/tasks.c **** 
1706:ThirdParty/FreeRTOS/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1707:ThirdParty/FreeRTOS/tasks.c **** 
1708:ThirdParty/FreeRTOS/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1709:ThirdParty/FreeRTOS/tasks.c ****             {
1710:ThirdParty/FreeRTOS/tasks.c ****                 BaseType_t x;
1711:ThirdParty/FreeRTOS/tasks.c **** 
1712:ThirdParty/FreeRTOS/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1713:ThirdParty/FreeRTOS/tasks.c ****                 {
1714:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1715:ThirdParty/FreeRTOS/tasks.c ****                     {
1716:ThirdParty/FreeRTOS/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1717:ThirdParty/FreeRTOS/tasks.c ****                          * now suspended, so no notification was received. */
1718:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1719:ThirdParty/FreeRTOS/tasks.c ****                     }
1720:ThirdParty/FreeRTOS/tasks.c ****                 }
1721:ThirdParty/FreeRTOS/tasks.c ****             }
1722:ThirdParty/FreeRTOS/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1723:ThirdParty/FreeRTOS/tasks.c ****         }
1724:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
1725:ThirdParty/FreeRTOS/tasks.c **** 
1726:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1727:ThirdParty/FreeRTOS/tasks.c ****         {
1728:ThirdParty/FreeRTOS/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1729:ThirdParty/FreeRTOS/tasks.c ****              * task that is now in the Suspended state. */
1730:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1731:ThirdParty/FreeRTOS/tasks.c ****             {
1732:ThirdParty/FreeRTOS/tasks.c ****                 prvResetNextTaskUnblockTime();
1733:ThirdParty/FreeRTOS/tasks.c ****             }
1734:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1735:ThirdParty/FreeRTOS/tasks.c ****         }
1736:ThirdParty/FreeRTOS/tasks.c ****         else
1737:ThirdParty/FreeRTOS/tasks.c ****         {
1738:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1739:ThirdParty/FreeRTOS/tasks.c ****         }
1740:ThirdParty/FreeRTOS/tasks.c **** 
1741:ThirdParty/FreeRTOS/tasks.c ****         if( pxTCB == pxCurrentTCB )
1742:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 32


1743:ThirdParty/FreeRTOS/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1744:ThirdParty/FreeRTOS/tasks.c ****             {
1745:ThirdParty/FreeRTOS/tasks.c ****                 /* The current task has just been suspended. */
1746:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( uxSchedulerSuspended == 0 );
1747:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
1748:ThirdParty/FreeRTOS/tasks.c ****             }
1749:ThirdParty/FreeRTOS/tasks.c ****             else
1750:ThirdParty/FreeRTOS/tasks.c ****             {
1751:ThirdParty/FreeRTOS/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1752:ThirdParty/FreeRTOS/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1753:ThirdParty/FreeRTOS/tasks.c ****                  * must be adjusted to point to a different task. */
1754:ThirdParty/FreeRTOS/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1755:ThirdParty/FreeRTOS/tasks.c ****                 {
1756:ThirdParty/FreeRTOS/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1757:ThirdParty/FreeRTOS/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1758:ThirdParty/FreeRTOS/tasks.c ****                      * be set to point to it no matter what its relative priority
1759:ThirdParty/FreeRTOS/tasks.c ****                      * is. */
1760:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB = NULL;
1761:ThirdParty/FreeRTOS/tasks.c ****                 }
1762:ThirdParty/FreeRTOS/tasks.c ****                 else
1763:ThirdParty/FreeRTOS/tasks.c ****                 {
1764:ThirdParty/FreeRTOS/tasks.c ****                     vTaskSwitchContext();
1765:ThirdParty/FreeRTOS/tasks.c ****                 }
1766:ThirdParty/FreeRTOS/tasks.c ****             }
1767:ThirdParty/FreeRTOS/tasks.c ****         }
1768:ThirdParty/FreeRTOS/tasks.c ****         else
1769:ThirdParty/FreeRTOS/tasks.c ****         {
1770:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1771:ThirdParty/FreeRTOS/tasks.c ****         }
1772:ThirdParty/FreeRTOS/tasks.c ****     }
1773:ThirdParty/FreeRTOS/tasks.c **** 
1774:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1775:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1776:ThirdParty/FreeRTOS/tasks.c **** 
1777:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1778:ThirdParty/FreeRTOS/tasks.c **** 
1779:ThirdParty/FreeRTOS/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1780:ThirdParty/FreeRTOS/tasks.c ****     {
  27              		.loc 1 1780 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1781:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1781 9 view .LVU1
1782:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  33              		.loc 1 1782 9 view .LVU2
1783:ThirdParty/FreeRTOS/tasks.c **** 
1784:ThirdParty/FreeRTOS/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1785:ThirdParty/FreeRTOS/tasks.c ****          * section. */
1786:ThirdParty/FreeRTOS/tasks.c **** 
1787:ThirdParty/FreeRTOS/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1788:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTask );
  34              		.loc 1 1788 9 view .LVU3
  35 0000 28B1     		cbz	r0, .L8
  36              		.loc 1 1788 30 discriminator 2 view .LVU4
1789:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 33


1790:ThirdParty/FreeRTOS/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1791:ThirdParty/FreeRTOS/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  37              		.loc 1 1791 9 view .LVU5
  38              		.loc 1 1791 13 is_stmt 0 view .LVU6
  39 0002 4169     		ldr	r1, [r0, #20]
  40              		.loc 1 1791 11 view .LVU7
  41 0004 0C4A     		ldr	r2, .L10
  42 0006 9142     		cmp	r1, r2
  43 0008 0AD0     		beq	.L9
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  44              		.loc 1 1781 20 view .LVU8
  45 000a 0020     		movs	r0, #0
  46              	.LVL1:
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1781 20 view .LVU9
  48 000c 7047     		bx	lr
  49              	.LVL2:
  50              	.L8:
1788:ThirdParty/FreeRTOS/tasks.c **** 
  51              		.loc 1 1788 9 is_stmt 1 discriminator 1 view .LVU10
  52              	.LBB139:
  53              	.LBI139:
  54              		.file 2 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.5.1
   3:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
   7:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  14:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  17:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  24:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  27:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  28:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  29:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  30:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  33:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef __cplusplus
  34:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern "C" {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 34


  35:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  36:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  38:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  39:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  40:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  42:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  43:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  44:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  45:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  46:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  47:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  48:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCHAR          char
  49:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portFLOAT         float
  50:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  51:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portLONG          long
  52:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSHORT         short
  53:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  55:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  56:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  58:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  60:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  62:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #else
  64:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  65:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  69:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
  71:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  72:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  73:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  74:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  79:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  80:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  81:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  82:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {                                                   \
  83:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****                                                         \
  86:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
  91:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 35


  92:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  97:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  98:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  99:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 100:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 101:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 108:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 113:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 116:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 118:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 122:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 123:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 124:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 125:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 128:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 129:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 131:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Generic helper function. */
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 135:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             return ucReturn;
 139:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 140:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 141:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Check the configuration. */
 142:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #endif
 145:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 36


 149:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 150:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 152:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 154:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 156:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 157:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifdef configASSERT
 159:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 162:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 163:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 164:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portNOP()
 165:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 166:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 167:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 168:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 169:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     #endif
 171:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 172:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 173:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 174:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 176:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 178:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 179:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 182:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 184:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 185:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 186:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         else
 187:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 188:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 189:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 190:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 191:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return xReturn;
 192:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 193:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 194:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 195:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  55              		.loc 2 196 34 view .LVU11
  56              	.LBB140:
 197:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
  57              		.loc 2 198 9 view .LVU12
 199:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
  58              		.loc 2 200 9 view .LVU13
  59              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 37


  60              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
  61 000e 4FF05003 			mov r3, #80												
  62 0012 83F31188 		msr basepri, r3											
  63 0016 BFF36F8F 		isb														
  64 001a BFF34F8F 		dsb														
  65              	
  66              	@ 0 "" 2
  67              		.thumb
  68              		.syntax unified
  69              	.L3:
  70              	.LBE140:
  71              	.LBE139:
1788:ThirdParty/FreeRTOS/tasks.c **** 
  72              		.loc 1 1788 9 discriminator 3 view .LVU14
1788:ThirdParty/FreeRTOS/tasks.c **** 
  73              		.loc 1 1788 9 discriminator 3 view .LVU15
  74 001e FEE7     		b	.L3
  75              	.L9:
1792:ThirdParty/FreeRTOS/tasks.c ****         {
1793:ThirdParty/FreeRTOS/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1794:ThirdParty/FreeRTOS/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  76              		.loc 1 1794 13 view .LVU16
  77              		.loc 1 1794 17 is_stmt 0 view .LVU17
  78 0020 836A     		ldr	r3, [r0, #40]
  79              		.loc 1 1794 15 view .LVU18
  80 0022 064A     		ldr	r2, .L10+4
  81 0024 9342     		cmp	r3, r2
  82 0026 02D0     		beq	.L6
1795:ThirdParty/FreeRTOS/tasks.c ****             {
1796:ThirdParty/FreeRTOS/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1797:ThirdParty/FreeRTOS/tasks.c ****                  * state, or because is is blocked with no timeout? */
1798:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  83              		.loc 1 1798 17 is_stmt 1 view .LVU19
  84              		.loc 1 1798 19 is_stmt 0 view .LVU20
  85 0028 1BB1     		cbz	r3, .L7
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  86              		.loc 1 1781 20 view .LVU21
  87 002a 0020     		movs	r0, #0
  88              	.LVL3:
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  89              		.loc 1 1781 20 view .LVU22
  90 002c 7047     		bx	lr
  91              	.LVL4:
  92              	.L6:
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  93              		.loc 1 1781 20 view .LVU23
  94 002e 0020     		movs	r0, #0
  95              	.LVL5:
1781:ThirdParty/FreeRTOS/tasks.c ****         const TCB_t * const pxTCB = xTask;
  96              		.loc 1 1781 20 view .LVU24
  97 0030 7047     		bx	lr
  98              	.LVL6:
  99              	.L7:
1799:ThirdParty/FreeRTOS/tasks.c ****                 {
1800:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
 100              		.loc 1 1800 29 view .LVU25
 101 0032 0120     		movs	r0, #1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 38


 102              	.LVL7:
1801:ThirdParty/FreeRTOS/tasks.c ****                 }
1802:ThirdParty/FreeRTOS/tasks.c ****                 else
1803:ThirdParty/FreeRTOS/tasks.c ****                 {
1804:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1805:ThirdParty/FreeRTOS/tasks.c ****                 }
1806:ThirdParty/FreeRTOS/tasks.c ****             }
1807:ThirdParty/FreeRTOS/tasks.c ****             else
1808:ThirdParty/FreeRTOS/tasks.c ****             {
1809:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1810:ThirdParty/FreeRTOS/tasks.c ****             }
1811:ThirdParty/FreeRTOS/tasks.c ****         }
1812:ThirdParty/FreeRTOS/tasks.c ****         else
1813:ThirdParty/FreeRTOS/tasks.c ****         {
1814:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
 103              		.loc 1 1814 37 is_stmt 1 view .LVU26
1815:ThirdParty/FreeRTOS/tasks.c ****         }
1816:ThirdParty/FreeRTOS/tasks.c **** 
1817:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
 104              		.loc 1 1817 9 view .LVU27
1818:ThirdParty/FreeRTOS/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 105              		.loc 1 1818 5 is_stmt 0 view .LVU28
 106 0034 7047     		bx	lr
 107              	.L11:
 108 0036 00BF     		.align	2
 109              	.L10:
 110 0038 00000000 		.word	xSuspendedTaskList
 111 003c 00000000 		.word	xPendingReadyList
 112              		.cfi_endproc
 113              	.LFE15:
 115              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 116              		.align	1
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 121              	prvResetNextTaskUnblockTime:
 122              	.LFB41:
1819:ThirdParty/FreeRTOS/tasks.c **** 
1820:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1821:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1822:ThirdParty/FreeRTOS/tasks.c **** 
1823:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1824:ThirdParty/FreeRTOS/tasks.c **** 
1825:ThirdParty/FreeRTOS/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1826:ThirdParty/FreeRTOS/tasks.c ****     {
1827:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1828:ThirdParty/FreeRTOS/tasks.c **** 
1829:ThirdParty/FreeRTOS/tasks.c ****         /* It does not make sense to resume the calling task. */
1830:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1831:ThirdParty/FreeRTOS/tasks.c **** 
1832:ThirdParty/FreeRTOS/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1833:ThirdParty/FreeRTOS/tasks.c ****          * currently executing task. */
1834:ThirdParty/FreeRTOS/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1835:ThirdParty/FreeRTOS/tasks.c ****         {
1836:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
1837:ThirdParty/FreeRTOS/tasks.c ****             {
1838:ThirdParty/FreeRTOS/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 39


1839:ThirdParty/FreeRTOS/tasks.c ****                 {
1840:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_RESUME( pxTCB );
1841:ThirdParty/FreeRTOS/tasks.c **** 
1842:ThirdParty/FreeRTOS/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1843:ThirdParty/FreeRTOS/tasks.c ****                      * suspended because this is inside a critical section. */
1844:ThirdParty/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1845:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1846:ThirdParty/FreeRTOS/tasks.c **** 
1847:ThirdParty/FreeRTOS/tasks.c ****                     /* A higher priority task may have just been resumed. */
1848:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1849:ThirdParty/FreeRTOS/tasks.c ****                     {
1850:ThirdParty/FreeRTOS/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1851:ThirdParty/FreeRTOS/tasks.c ****                          * but will leave the lists in the correct state for the
1852:ThirdParty/FreeRTOS/tasks.c ****                          * next yield. */
1853:ThirdParty/FreeRTOS/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1854:ThirdParty/FreeRTOS/tasks.c ****                     }
1855:ThirdParty/FreeRTOS/tasks.c ****                     else
1856:ThirdParty/FreeRTOS/tasks.c ****                     {
1857:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1858:ThirdParty/FreeRTOS/tasks.c ****                     }
1859:ThirdParty/FreeRTOS/tasks.c ****                 }
1860:ThirdParty/FreeRTOS/tasks.c ****                 else
1861:ThirdParty/FreeRTOS/tasks.c ****                 {
1862:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1863:ThirdParty/FreeRTOS/tasks.c ****                 }
1864:ThirdParty/FreeRTOS/tasks.c ****             }
1865:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
1866:ThirdParty/FreeRTOS/tasks.c ****         }
1867:ThirdParty/FreeRTOS/tasks.c ****         else
1868:ThirdParty/FreeRTOS/tasks.c ****         {
1869:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1870:ThirdParty/FreeRTOS/tasks.c ****         }
1871:ThirdParty/FreeRTOS/tasks.c ****     }
1872:ThirdParty/FreeRTOS/tasks.c **** 
1873:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1874:ThirdParty/FreeRTOS/tasks.c **** 
1875:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1876:ThirdParty/FreeRTOS/tasks.c **** 
1877:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1878:ThirdParty/FreeRTOS/tasks.c **** 
1879:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1880:ThirdParty/FreeRTOS/tasks.c ****     {
1881:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1882:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1883:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1884:ThirdParty/FreeRTOS/tasks.c **** 
1885:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToResume );
1886:ThirdParty/FreeRTOS/tasks.c **** 
1887:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1888:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1889:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1890:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1891:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1892:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
1893:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1894:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1895:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 40


1896:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1897:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1898:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1899:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1900:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1901:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
1902:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1903:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1904:ThirdParty/FreeRTOS/tasks.c **** 
1905:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1906:ThirdParty/FreeRTOS/tasks.c ****         {
1907:ThirdParty/FreeRTOS/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1908:ThirdParty/FreeRTOS/tasks.c ****             {
1909:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1910:ThirdParty/FreeRTOS/tasks.c **** 
1911:ThirdParty/FreeRTOS/tasks.c ****                 /* Check the ready lists can be accessed. */
1912:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1913:ThirdParty/FreeRTOS/tasks.c ****                 {
1914:ThirdParty/FreeRTOS/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1915:ThirdParty/FreeRTOS/tasks.c ****                      * suspended list to the ready list directly. */
1916:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1917:ThirdParty/FreeRTOS/tasks.c ****                     {
1918:ThirdParty/FreeRTOS/tasks.c ****                         xYieldRequired = pdTRUE;
1919:ThirdParty/FreeRTOS/tasks.c **** 
1920:ThirdParty/FreeRTOS/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1921:ThirdParty/FreeRTOS/tasks.c ****                          * using the return value to initiate a context switch
1922:ThirdParty/FreeRTOS/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1923:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
1924:ThirdParty/FreeRTOS/tasks.c ****                     }
1925:ThirdParty/FreeRTOS/tasks.c ****                     else
1926:ThirdParty/FreeRTOS/tasks.c ****                     {
1927:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1928:ThirdParty/FreeRTOS/tasks.c ****                     }
1929:ThirdParty/FreeRTOS/tasks.c **** 
1930:ThirdParty/FreeRTOS/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1931:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1932:ThirdParty/FreeRTOS/tasks.c ****                 }
1933:ThirdParty/FreeRTOS/tasks.c ****                 else
1934:ThirdParty/FreeRTOS/tasks.c ****                 {
1935:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1936:ThirdParty/FreeRTOS/tasks.c ****                      * is held in the pending ready list until the scheduler is
1937:ThirdParty/FreeRTOS/tasks.c ****                      * unsuspended. */
1938:ThirdParty/FreeRTOS/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1939:ThirdParty/FreeRTOS/tasks.c ****                 }
1940:ThirdParty/FreeRTOS/tasks.c ****             }
1941:ThirdParty/FreeRTOS/tasks.c ****             else
1942:ThirdParty/FreeRTOS/tasks.c ****             {
1943:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1944:ThirdParty/FreeRTOS/tasks.c ****             }
1945:ThirdParty/FreeRTOS/tasks.c ****         }
1946:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1947:ThirdParty/FreeRTOS/tasks.c **** 
1948:ThirdParty/FreeRTOS/tasks.c ****         return xYieldRequired;
1949:ThirdParty/FreeRTOS/tasks.c ****     }
1950:ThirdParty/FreeRTOS/tasks.c **** 
1951:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1952:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 41


1953:ThirdParty/FreeRTOS/tasks.c **** 
1954:ThirdParty/FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1955:ThirdParty/FreeRTOS/tasks.c **** {
1956:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
1957:ThirdParty/FreeRTOS/tasks.c **** 
1958:ThirdParty/FreeRTOS/tasks.c ****     /* Add the idle task at the lowest priority. */
1959:ThirdParty/FreeRTOS/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1960:ThirdParty/FreeRTOS/tasks.c ****     {
1961:ThirdParty/FreeRTOS/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1962:ThirdParty/FreeRTOS/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1963:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulIdleTaskStackSize;
1964:ThirdParty/FreeRTOS/tasks.c **** 
1965:ThirdParty/FreeRTOS/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1966:ThirdParty/FreeRTOS/tasks.c ****          * address of the RAM then create the idle task. */
1967:ThirdParty/FreeRTOS/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1968:ThirdParty/FreeRTOS/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1969:ThirdParty/FreeRTOS/tasks.c ****                                              configIDLE_TASK_NAME,
1970:ThirdParty/FreeRTOS/tasks.c ****                                              ulIdleTaskStackSize,
1971:ThirdParty/FreeRTOS/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1972:ThirdParty/FreeRTOS/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1973:ThirdParty/FreeRTOS/tasks.c ****                                              pxIdleTaskStackBuffer,
1974:ThirdParty/FreeRTOS/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1975:ThirdParty/FreeRTOS/tasks.c **** 
1976:ThirdParty/FreeRTOS/tasks.c ****         if( xIdleTaskHandle != NULL )
1977:ThirdParty/FreeRTOS/tasks.c ****         {
1978:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
1979:ThirdParty/FreeRTOS/tasks.c ****         }
1980:ThirdParty/FreeRTOS/tasks.c ****         else
1981:ThirdParty/FreeRTOS/tasks.c ****         {
1982:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
1983:ThirdParty/FreeRTOS/tasks.c ****         }
1984:ThirdParty/FreeRTOS/tasks.c ****     }
1985:ThirdParty/FreeRTOS/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
1986:ThirdParty/FreeRTOS/tasks.c ****     {
1987:ThirdParty/FreeRTOS/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
1988:ThirdParty/FreeRTOS/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
1989:ThirdParty/FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
1990:ThirdParty/FreeRTOS/tasks.c ****                                configMINIMAL_STACK_SIZE,
1991:ThirdParty/FreeRTOS/tasks.c ****                                ( void * ) NULL,
1992:ThirdParty/FreeRTOS/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
1993:ThirdParty/FreeRTOS/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
1994:ThirdParty/FreeRTOS/tasks.c ****     }
1995:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
1996:ThirdParty/FreeRTOS/tasks.c **** 
1997:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TIMERS == 1 )
1998:ThirdParty/FreeRTOS/tasks.c ****     {
1999:ThirdParty/FreeRTOS/tasks.c ****         if( xReturn == pdPASS )
2000:ThirdParty/FreeRTOS/tasks.c ****         {
2001:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xTimerCreateTimerTask();
2002:ThirdParty/FreeRTOS/tasks.c ****         }
2003:ThirdParty/FreeRTOS/tasks.c ****         else
2004:ThirdParty/FreeRTOS/tasks.c ****         {
2005:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2006:ThirdParty/FreeRTOS/tasks.c ****         }
2007:ThirdParty/FreeRTOS/tasks.c ****     }
2008:ThirdParty/FreeRTOS/tasks.c ****     #endif /* configUSE_TIMERS */
2009:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 42


2010:ThirdParty/FreeRTOS/tasks.c ****     if( xReturn == pdPASS )
2011:ThirdParty/FreeRTOS/tasks.c ****     {
2012:ThirdParty/FreeRTOS/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2013:ThirdParty/FreeRTOS/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2014:ThirdParty/FreeRTOS/tasks.c ****          * the only macro called by the function. */
2015:ThirdParty/FreeRTOS/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2016:ThirdParty/FreeRTOS/tasks.c ****         {
2017:ThirdParty/FreeRTOS/tasks.c ****             freertos_tasks_c_additions_init();
2018:ThirdParty/FreeRTOS/tasks.c ****         }
2019:ThirdParty/FreeRTOS/tasks.c ****         #endif
2020:ThirdParty/FreeRTOS/tasks.c **** 
2021:ThirdParty/FreeRTOS/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2022:ThirdParty/FreeRTOS/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2023:ThirdParty/FreeRTOS/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2024:ThirdParty/FreeRTOS/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2025:ThirdParty/FreeRTOS/tasks.c ****          * starts to run. */
2026:ThirdParty/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
2027:ThirdParty/FreeRTOS/tasks.c **** 
2028:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
2029:ThirdParty/FreeRTOS/tasks.c ****         {
2030:ThirdParty/FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2031:ThirdParty/FreeRTOS/tasks.c ****              * block specific to the task that will run first. */
2032:ThirdParty/FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2033:ThirdParty/FreeRTOS/tasks.c ****         }
2034:ThirdParty/FreeRTOS/tasks.c ****         #endif
2035:ThirdParty/FreeRTOS/tasks.c **** 
2036:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2037:ThirdParty/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
2038:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2039:ThirdParty/FreeRTOS/tasks.c **** 
2040:ThirdParty/FreeRTOS/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2041:ThirdParty/FreeRTOS/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2042:ThirdParty/FreeRTOS/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2043:ThirdParty/FreeRTOS/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2044:ThirdParty/FreeRTOS/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2045:ThirdParty/FreeRTOS/tasks.c ****          * FreeRTOSConfig.h file. */
2046:ThirdParty/FreeRTOS/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2047:ThirdParty/FreeRTOS/tasks.c **** 
2048:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
2049:ThirdParty/FreeRTOS/tasks.c **** 
2050:ThirdParty/FreeRTOS/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2051:ThirdParty/FreeRTOS/tasks.c ****          * portable interface. */
2052:ThirdParty/FreeRTOS/tasks.c ****         xPortStartScheduler();
2053:ThirdParty/FreeRTOS/tasks.c **** 
2054:ThirdParty/FreeRTOS/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2055:ThirdParty/FreeRTOS/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2056:ThirdParty/FreeRTOS/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2057:ThirdParty/FreeRTOS/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2058:ThirdParty/FreeRTOS/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2059:ThirdParty/FreeRTOS/tasks.c ****          * nothing to return to. */
2060:ThirdParty/FreeRTOS/tasks.c ****     }
2061:ThirdParty/FreeRTOS/tasks.c ****     else
2062:ThirdParty/FreeRTOS/tasks.c ****     {
2063:ThirdParty/FreeRTOS/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2064:ThirdParty/FreeRTOS/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2065:ThirdParty/FreeRTOS/tasks.c ****          * or the timer task. */
2066:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 43


2067:ThirdParty/FreeRTOS/tasks.c ****     }
2068:ThirdParty/FreeRTOS/tasks.c **** 
2069:ThirdParty/FreeRTOS/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2070:ThirdParty/FreeRTOS/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2071:ThirdParty/FreeRTOS/tasks.c ****     ( void ) xIdleTaskHandle;
2072:ThirdParty/FreeRTOS/tasks.c **** 
2073:ThirdParty/FreeRTOS/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2074:ThirdParty/FreeRTOS/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2075:ThirdParty/FreeRTOS/tasks.c ****     ( void ) uxTopUsedPriority;
2076:ThirdParty/FreeRTOS/tasks.c **** }
2077:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2078:ThirdParty/FreeRTOS/tasks.c **** 
2079:ThirdParty/FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2080:ThirdParty/FreeRTOS/tasks.c **** {
2081:ThirdParty/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2082:ThirdParty/FreeRTOS/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2083:ThirdParty/FreeRTOS/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2084:ThirdParty/FreeRTOS/tasks.c ****     portDISABLE_INTERRUPTS();
2085:ThirdParty/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
2086:ThirdParty/FreeRTOS/tasks.c ****     vPortEndScheduler();
2087:ThirdParty/FreeRTOS/tasks.c **** }
2088:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2089:ThirdParty/FreeRTOS/tasks.c **** 
2090:ThirdParty/FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2091:ThirdParty/FreeRTOS/tasks.c **** {
2092:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
2093:ThirdParty/FreeRTOS/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2094:ThirdParty/FreeRTOS/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2095:ThirdParty/FreeRTOS/tasks.c ****      * https://goo.gl/wu4acr */
2096:ThirdParty/FreeRTOS/tasks.c **** 
2097:ThirdParty/FreeRTOS/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2098:ThirdParty/FreeRTOS/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2099:ThirdParty/FreeRTOS/tasks.c ****     portSOFTWARE_BARRIER();
2100:ThirdParty/FreeRTOS/tasks.c **** 
2101:ThirdParty/FreeRTOS/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2102:ThirdParty/FreeRTOS/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2103:ThirdParty/FreeRTOS/tasks.c ****     ++uxSchedulerSuspended;
2104:ThirdParty/FreeRTOS/tasks.c **** 
2105:ThirdParty/FreeRTOS/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2106:ThirdParty/FreeRTOS/tasks.c ****      * the above increment elsewhere. */
2107:ThirdParty/FreeRTOS/tasks.c ****     portMEMORY_BARRIER();
2108:ThirdParty/FreeRTOS/tasks.c **** }
2109:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2110:ThirdParty/FreeRTOS/tasks.c **** 
2111:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:ThirdParty/FreeRTOS/tasks.c **** 
2113:ThirdParty/FreeRTOS/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2114:ThirdParty/FreeRTOS/tasks.c ****     {
2115:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xReturn;
2116:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:ThirdParty/FreeRTOS/tasks.c **** 
2118:ThirdParty/FreeRTOS/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2119:ThirdParty/FreeRTOS/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:ThirdParty/FreeRTOS/tasks.c ****          * task that are in the Ready state, even though the idle task is
2121:ThirdParty/FreeRTOS/tasks.c ****          * running. */
2122:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 44


2124:ThirdParty/FreeRTOS/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:ThirdParty/FreeRTOS/tasks.c ****             {
2126:ThirdParty/FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2127:ThirdParty/FreeRTOS/tasks.c ****             }
2128:ThirdParty/FreeRTOS/tasks.c ****         }
2129:ThirdParty/FreeRTOS/tasks.c ****         #else
2130:ThirdParty/FreeRTOS/tasks.c ****         {
2131:ThirdParty/FreeRTOS/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:ThirdParty/FreeRTOS/tasks.c **** 
2133:ThirdParty/FreeRTOS/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2134:ThirdParty/FreeRTOS/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2135:ThirdParty/FreeRTOS/tasks.c ****              * significant bit are set then there are tasks that have a priority
2136:ThirdParty/FreeRTOS/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2137:ThirdParty/FreeRTOS/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2138:ThirdParty/FreeRTOS/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2139:ThirdParty/FreeRTOS/tasks.c ****             {
2140:ThirdParty/FreeRTOS/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:ThirdParty/FreeRTOS/tasks.c ****             }
2142:ThirdParty/FreeRTOS/tasks.c ****         }
2143:ThirdParty/FreeRTOS/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2144:ThirdParty/FreeRTOS/tasks.c **** 
2145:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:ThirdParty/FreeRTOS/tasks.c ****         {
2147:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2148:ThirdParty/FreeRTOS/tasks.c ****         }
2149:ThirdParty/FreeRTOS/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:ThirdParty/FreeRTOS/tasks.c ****         {
2151:ThirdParty/FreeRTOS/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2152:ThirdParty/FreeRTOS/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2153:ThirdParty/FreeRTOS/tasks.c ****              * processed. */
2154:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2155:ThirdParty/FreeRTOS/tasks.c ****         }
2156:ThirdParty/FreeRTOS/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:ThirdParty/FreeRTOS/tasks.c ****         {
2158:ThirdParty/FreeRTOS/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2159:ThirdParty/FreeRTOS/tasks.c ****              * idle priority.  This path can only be reached if
2160:ThirdParty/FreeRTOS/tasks.c ****              * configUSE_PREEMPTION is 0. */
2161:ThirdParty/FreeRTOS/tasks.c ****             xReturn = 0;
2162:ThirdParty/FreeRTOS/tasks.c ****         }
2163:ThirdParty/FreeRTOS/tasks.c ****         else
2164:ThirdParty/FreeRTOS/tasks.c ****         {
2165:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2166:ThirdParty/FreeRTOS/tasks.c ****         }
2167:ThirdParty/FreeRTOS/tasks.c **** 
2168:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2169:ThirdParty/FreeRTOS/tasks.c ****     }
2170:ThirdParty/FreeRTOS/tasks.c **** 
2171:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2173:ThirdParty/FreeRTOS/tasks.c **** 
2174:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:ThirdParty/FreeRTOS/tasks.c **** {
2176:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
2177:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2178:ThirdParty/FreeRTOS/tasks.c **** 
2179:ThirdParty/FreeRTOS/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2180:ThirdParty/FreeRTOS/tasks.c ****      * previous call to vTaskSuspendAll(). */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 45


2181:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended );
2182:ThirdParty/FreeRTOS/tasks.c **** 
2183:ThirdParty/FreeRTOS/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2184:ThirdParty/FreeRTOS/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2185:ThirdParty/FreeRTOS/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
2186:ThirdParty/FreeRTOS/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2187:ThirdParty/FreeRTOS/tasks.c ****      * tasks from this list into their appropriate ready list. */
2188:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2189:ThirdParty/FreeRTOS/tasks.c ****     {
2190:ThirdParty/FreeRTOS/tasks.c ****         --uxSchedulerSuspended;
2191:ThirdParty/FreeRTOS/tasks.c **** 
2192:ThirdParty/FreeRTOS/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:ThirdParty/FreeRTOS/tasks.c ****         {
2194:ThirdParty/FreeRTOS/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:ThirdParty/FreeRTOS/tasks.c ****             {
2196:ThirdParty/FreeRTOS/tasks.c ****                 /* Move any readied tasks from the pending list into the
2197:ThirdParty/FreeRTOS/tasks.c ****                  * appropriate ready list. */
2198:ThirdParty/FreeRTOS/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:ThirdParty/FreeRTOS/tasks.c ****                 {
2200:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2201:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2202:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
2203:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2204:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2205:ThirdParty/FreeRTOS/tasks.c **** 
2206:ThirdParty/FreeRTOS/tasks.c ****                     /* If the moved task has a priority higher than or equal to
2207:ThirdParty/FreeRTOS/tasks.c ****                      * the current task then a yield must be performed. */
2208:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2209:ThirdParty/FreeRTOS/tasks.c ****                     {
2210:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2211:ThirdParty/FreeRTOS/tasks.c ****                     }
2212:ThirdParty/FreeRTOS/tasks.c ****                     else
2213:ThirdParty/FreeRTOS/tasks.c ****                     {
2214:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2215:ThirdParty/FreeRTOS/tasks.c ****                     }
2216:ThirdParty/FreeRTOS/tasks.c ****                 }
2217:ThirdParty/FreeRTOS/tasks.c **** 
2218:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2219:ThirdParty/FreeRTOS/tasks.c ****                 {
2220:ThirdParty/FreeRTOS/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2221:ThirdParty/FreeRTOS/tasks.c ****                      * which may have prevented the next unblock time from being
2222:ThirdParty/FreeRTOS/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2223:ThirdParty/FreeRTOS/tasks.c ****                      * important for low power tickless implementations, where
2224:ThirdParty/FreeRTOS/tasks.c ****                      * this can prevent an unnecessary exit from low power
2225:ThirdParty/FreeRTOS/tasks.c ****                      * state. */
2226:ThirdParty/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
2227:ThirdParty/FreeRTOS/tasks.c ****                 }
2228:ThirdParty/FreeRTOS/tasks.c **** 
2229:ThirdParty/FreeRTOS/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2230:ThirdParty/FreeRTOS/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2231:ThirdParty/FreeRTOS/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2232:ThirdParty/FreeRTOS/tasks.c ****                  * time. */
2233:ThirdParty/FreeRTOS/tasks.c ****                 {
2234:ThirdParty/FreeRTOS/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2235:ThirdParty/FreeRTOS/tasks.c **** 
2236:ThirdParty/FreeRTOS/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2237:ThirdParty/FreeRTOS/tasks.c ****                     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 46


2238:ThirdParty/FreeRTOS/tasks.c ****                         do
2239:ThirdParty/FreeRTOS/tasks.c ****                         {
2240:ThirdParty/FreeRTOS/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2241:ThirdParty/FreeRTOS/tasks.c ****                             {
2242:ThirdParty/FreeRTOS/tasks.c ****                                 xYieldPending = pdTRUE;
2243:ThirdParty/FreeRTOS/tasks.c ****                             }
2244:ThirdParty/FreeRTOS/tasks.c ****                             else
2245:ThirdParty/FreeRTOS/tasks.c ****                             {
2246:ThirdParty/FreeRTOS/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2247:ThirdParty/FreeRTOS/tasks.c ****                             }
2248:ThirdParty/FreeRTOS/tasks.c **** 
2249:ThirdParty/FreeRTOS/tasks.c ****                             --xPendedCounts;
2250:ThirdParty/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2251:ThirdParty/FreeRTOS/tasks.c **** 
2252:ThirdParty/FreeRTOS/tasks.c ****                         xPendedTicks = 0;
2253:ThirdParty/FreeRTOS/tasks.c ****                     }
2254:ThirdParty/FreeRTOS/tasks.c ****                     else
2255:ThirdParty/FreeRTOS/tasks.c ****                     {
2256:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2257:ThirdParty/FreeRTOS/tasks.c ****                     }
2258:ThirdParty/FreeRTOS/tasks.c ****                 }
2259:ThirdParty/FreeRTOS/tasks.c **** 
2260:ThirdParty/FreeRTOS/tasks.c ****                 if( xYieldPending != pdFALSE )
2261:ThirdParty/FreeRTOS/tasks.c ****                 {
2262:ThirdParty/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2263:ThirdParty/FreeRTOS/tasks.c ****                     {
2264:ThirdParty/FreeRTOS/tasks.c ****                         xAlreadyYielded = pdTRUE;
2265:ThirdParty/FreeRTOS/tasks.c ****                     }
2266:ThirdParty/FreeRTOS/tasks.c ****                     #endif
2267:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2268:ThirdParty/FreeRTOS/tasks.c ****                 }
2269:ThirdParty/FreeRTOS/tasks.c ****                 else
2270:ThirdParty/FreeRTOS/tasks.c ****                 {
2271:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2272:ThirdParty/FreeRTOS/tasks.c ****                 }
2273:ThirdParty/FreeRTOS/tasks.c ****             }
2274:ThirdParty/FreeRTOS/tasks.c ****         }
2275:ThirdParty/FreeRTOS/tasks.c ****         else
2276:ThirdParty/FreeRTOS/tasks.c ****         {
2277:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2278:ThirdParty/FreeRTOS/tasks.c ****         }
2279:ThirdParty/FreeRTOS/tasks.c ****     }
2280:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2281:ThirdParty/FreeRTOS/tasks.c **** 
2282:ThirdParty/FreeRTOS/tasks.c ****     return xAlreadyYielded;
2283:ThirdParty/FreeRTOS/tasks.c **** }
2284:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2285:ThirdParty/FreeRTOS/tasks.c **** 
2286:ThirdParty/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2287:ThirdParty/FreeRTOS/tasks.c **** {
2288:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xTicks;
2289:ThirdParty/FreeRTOS/tasks.c **** 
2290:ThirdParty/FreeRTOS/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2291:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2292:ThirdParty/FreeRTOS/tasks.c ****     {
2293:ThirdParty/FreeRTOS/tasks.c ****         xTicks = xTickCount;
2294:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 47


2295:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2296:ThirdParty/FreeRTOS/tasks.c **** 
2297:ThirdParty/FreeRTOS/tasks.c ****     return xTicks;
2298:ThirdParty/FreeRTOS/tasks.c **** }
2299:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2300:ThirdParty/FreeRTOS/tasks.c **** 
2301:ThirdParty/FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2302:ThirdParty/FreeRTOS/tasks.c **** {
2303:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xReturn;
2304:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2305:ThirdParty/FreeRTOS/tasks.c **** 
2306:ThirdParty/FreeRTOS/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2307:ThirdParty/FreeRTOS/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2308:ThirdParty/FreeRTOS/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2309:ThirdParty/FreeRTOS/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2310:ThirdParty/FreeRTOS/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2311:ThirdParty/FreeRTOS/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2312:ThirdParty/FreeRTOS/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2313:ThirdParty/FreeRTOS/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2314:ThirdParty/FreeRTOS/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2315:ThirdParty/FreeRTOS/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2316:ThirdParty/FreeRTOS/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2317:ThirdParty/FreeRTOS/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2318:ThirdParty/FreeRTOS/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2319:ThirdParty/FreeRTOS/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2320:ThirdParty/FreeRTOS/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2321:ThirdParty/FreeRTOS/tasks.c **** 
2322:ThirdParty/FreeRTOS/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2323:ThirdParty/FreeRTOS/tasks.c ****     {
2324:ThirdParty/FreeRTOS/tasks.c ****         xReturn = xTickCount;
2325:ThirdParty/FreeRTOS/tasks.c ****     }
2326:ThirdParty/FreeRTOS/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2327:ThirdParty/FreeRTOS/tasks.c **** 
2328:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
2329:ThirdParty/FreeRTOS/tasks.c **** }
2330:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2331:ThirdParty/FreeRTOS/tasks.c **** 
2332:ThirdParty/FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2333:ThirdParty/FreeRTOS/tasks.c **** {
2334:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
2335:ThirdParty/FreeRTOS/tasks.c ****      * BaseType_t. */
2336:ThirdParty/FreeRTOS/tasks.c ****     return uxCurrentNumberOfTasks;
2337:ThirdParty/FreeRTOS/tasks.c **** }
2338:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2339:ThirdParty/FreeRTOS/tasks.c **** 
2340:ThirdParty/FreeRTOS/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2341:ThirdParty/FreeRTOS/tasks.c **** {
2342:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2343:ThirdParty/FreeRTOS/tasks.c **** 
2344:ThirdParty/FreeRTOS/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2345:ThirdParty/FreeRTOS/tasks.c ****      * queried. */
2346:ThirdParty/FreeRTOS/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2347:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
2348:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2349:ThirdParty/FreeRTOS/tasks.c **** }
2350:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2351:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 48


2352:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2353:ThirdParty/FreeRTOS/tasks.c **** 
2354:ThirdParty/FreeRTOS/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2355:ThirdParty/FreeRTOS/tasks.c ****                                                      const char pcNameToQuery[] )
2356:ThirdParty/FreeRTOS/tasks.c ****     {
2357:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNextTCB;
2358:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxFirstTCB;
2359:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxReturn = NULL;
2360:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t x;
2361:ThirdParty/FreeRTOS/tasks.c ****         char cNextChar;
2362:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xBreakLoop;
2363:ThirdParty/FreeRTOS/tasks.c **** 
2364:ThirdParty/FreeRTOS/tasks.c ****         /* This function is called with the scheduler suspended. */
2365:ThirdParty/FreeRTOS/tasks.c **** 
2366:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2367:ThirdParty/FreeRTOS/tasks.c ****         {
2368:ThirdParty/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2369:ThirdParty/FreeRTOS/tasks.c **** 
2370:ThirdParty/FreeRTOS/tasks.c ****             do
2371:ThirdParty/FreeRTOS/tasks.c ****             {
2372:ThirdParty/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2373:ThirdParty/FreeRTOS/tasks.c **** 
2374:ThirdParty/FreeRTOS/tasks.c ****                 /* Check each character in the name looking for a match or
2375:ThirdParty/FreeRTOS/tasks.c ****                  * mismatch. */
2376:ThirdParty/FreeRTOS/tasks.c ****                 xBreakLoop = pdFALSE;
2377:ThirdParty/FreeRTOS/tasks.c **** 
2378:ThirdParty/FreeRTOS/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2379:ThirdParty/FreeRTOS/tasks.c ****                 {
2380:ThirdParty/FreeRTOS/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2381:ThirdParty/FreeRTOS/tasks.c **** 
2382:ThirdParty/FreeRTOS/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2383:ThirdParty/FreeRTOS/tasks.c ****                     {
2384:ThirdParty/FreeRTOS/tasks.c ****                         /* Characters didn't match. */
2385:ThirdParty/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2386:ThirdParty/FreeRTOS/tasks.c ****                     }
2387:ThirdParty/FreeRTOS/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2388:ThirdParty/FreeRTOS/tasks.c ****                     {
2389:ThirdParty/FreeRTOS/tasks.c ****                         /* Both strings terminated, a match must have been
2390:ThirdParty/FreeRTOS/tasks.c ****                          * found. */
2391:ThirdParty/FreeRTOS/tasks.c ****                         pxReturn = pxNextTCB;
2392:ThirdParty/FreeRTOS/tasks.c ****                         xBreakLoop = pdTRUE;
2393:ThirdParty/FreeRTOS/tasks.c ****                     }
2394:ThirdParty/FreeRTOS/tasks.c ****                     else
2395:ThirdParty/FreeRTOS/tasks.c ****                     {
2396:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2397:ThirdParty/FreeRTOS/tasks.c ****                     }
2398:ThirdParty/FreeRTOS/tasks.c **** 
2399:ThirdParty/FreeRTOS/tasks.c ****                     if( xBreakLoop != pdFALSE )
2400:ThirdParty/FreeRTOS/tasks.c ****                     {
2401:ThirdParty/FreeRTOS/tasks.c ****                         break;
2402:ThirdParty/FreeRTOS/tasks.c ****                     }
2403:ThirdParty/FreeRTOS/tasks.c ****                 }
2404:ThirdParty/FreeRTOS/tasks.c **** 
2405:ThirdParty/FreeRTOS/tasks.c ****                 if( pxReturn != NULL )
2406:ThirdParty/FreeRTOS/tasks.c ****                 {
2407:ThirdParty/FreeRTOS/tasks.c ****                     /* The handle has been found. */
2408:ThirdParty/FreeRTOS/tasks.c ****                     break;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 49


2409:ThirdParty/FreeRTOS/tasks.c ****                 }
2410:ThirdParty/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2411:ThirdParty/FreeRTOS/tasks.c ****         }
2412:ThirdParty/FreeRTOS/tasks.c ****         else
2413:ThirdParty/FreeRTOS/tasks.c ****         {
2414:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2415:ThirdParty/FreeRTOS/tasks.c ****         }
2416:ThirdParty/FreeRTOS/tasks.c **** 
2417:ThirdParty/FreeRTOS/tasks.c ****         return pxReturn;
2418:ThirdParty/FreeRTOS/tasks.c ****     }
2419:ThirdParty/FreeRTOS/tasks.c **** 
2420:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2421:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2422:ThirdParty/FreeRTOS/tasks.c **** 
2423:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2424:ThirdParty/FreeRTOS/tasks.c **** 
2425:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2426:ThirdParty/FreeRTOS/tasks.c ****     {
2427:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2428:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2429:ThirdParty/FreeRTOS/tasks.c **** 
2430:ThirdParty/FreeRTOS/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2431:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2432:ThirdParty/FreeRTOS/tasks.c **** 
2433:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2434:ThirdParty/FreeRTOS/tasks.c ****         {
2435:ThirdParty/FreeRTOS/tasks.c ****             /* Search the ready lists. */
2436:ThirdParty/FreeRTOS/tasks.c ****             do
2437:ThirdParty/FreeRTOS/tasks.c ****             {
2438:ThirdParty/FreeRTOS/tasks.c ****                 uxQueue--;
2439:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2440:ThirdParty/FreeRTOS/tasks.c **** 
2441:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB != NULL )
2442:ThirdParty/FreeRTOS/tasks.c ****                 {
2443:ThirdParty/FreeRTOS/tasks.c ****                     /* Found the handle. */
2444:ThirdParty/FreeRTOS/tasks.c ****                     break;
2445:ThirdParty/FreeRTOS/tasks.c ****                 }
2446:ThirdParty/FreeRTOS/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2447:ThirdParty/FreeRTOS/tasks.c **** 
2448:ThirdParty/FreeRTOS/tasks.c ****             /* Search the delayed lists. */
2449:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2450:ThirdParty/FreeRTOS/tasks.c ****             {
2451:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2452:ThirdParty/FreeRTOS/tasks.c ****             }
2453:ThirdParty/FreeRTOS/tasks.c **** 
2454:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == NULL )
2455:ThirdParty/FreeRTOS/tasks.c ****             {
2456:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2457:ThirdParty/FreeRTOS/tasks.c ****             }
2458:ThirdParty/FreeRTOS/tasks.c **** 
2459:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2460:ThirdParty/FreeRTOS/tasks.c ****             {
2461:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2462:ThirdParty/FreeRTOS/tasks.c ****                 {
2463:ThirdParty/FreeRTOS/tasks.c ****                     /* Search the suspended list. */
2464:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2465:ThirdParty/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 50


2466:ThirdParty/FreeRTOS/tasks.c ****             }
2467:ThirdParty/FreeRTOS/tasks.c ****             #endif
2468:ThirdParty/FreeRTOS/tasks.c **** 
2469:ThirdParty/FreeRTOS/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2470:ThirdParty/FreeRTOS/tasks.c ****             {
2471:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB == NULL )
2472:ThirdParty/FreeRTOS/tasks.c ****                 {
2473:ThirdParty/FreeRTOS/tasks.c ****                     /* Search the deleted list. */
2474:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2475:ThirdParty/FreeRTOS/tasks.c ****                 }
2476:ThirdParty/FreeRTOS/tasks.c ****             }
2477:ThirdParty/FreeRTOS/tasks.c ****             #endif
2478:ThirdParty/FreeRTOS/tasks.c ****         }
2479:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2480:ThirdParty/FreeRTOS/tasks.c **** 
2481:ThirdParty/FreeRTOS/tasks.c ****         return pxTCB;
2482:ThirdParty/FreeRTOS/tasks.c ****     }
2483:ThirdParty/FreeRTOS/tasks.c **** 
2484:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2485:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2486:ThirdParty/FreeRTOS/tasks.c **** 
2487:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2488:ThirdParty/FreeRTOS/tasks.c **** 
2489:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2490:ThirdParty/FreeRTOS/tasks.c ****                                       const UBaseType_t uxArraySize,
2491:ThirdParty/FreeRTOS/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2492:ThirdParty/FreeRTOS/tasks.c ****     {
2493:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2494:ThirdParty/FreeRTOS/tasks.c **** 
2495:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2496:ThirdParty/FreeRTOS/tasks.c ****         {
2497:ThirdParty/FreeRTOS/tasks.c ****             /* Is there a space in the array for each task in the system? */
2498:ThirdParty/FreeRTOS/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2499:ThirdParty/FreeRTOS/tasks.c ****             {
2500:ThirdParty/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2501:ThirdParty/FreeRTOS/tasks.c ****                  * task in the Ready state. */
2502:ThirdParty/FreeRTOS/tasks.c ****                 do
2503:ThirdParty/FreeRTOS/tasks.c ****                 {
2504:ThirdParty/FreeRTOS/tasks.c ****                     uxQueue--;
2505:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2506:ThirdParty/FreeRTOS/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2507:ThirdParty/FreeRTOS/tasks.c **** 
2508:ThirdParty/FreeRTOS/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2509:ThirdParty/FreeRTOS/tasks.c ****                  * task in the Blocked state. */
2510:ThirdParty/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2511:ThirdParty/FreeRTOS/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2512:ThirdParty/FreeRTOS/tasks.c **** 
2513:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2514:ThirdParty/FreeRTOS/tasks.c ****                 {
2515:ThirdParty/FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2516:ThirdParty/FreeRTOS/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2517:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2518:ThirdParty/FreeRTOS/tasks.c ****                 }
2519:ThirdParty/FreeRTOS/tasks.c ****                 #endif
2520:ThirdParty/FreeRTOS/tasks.c **** 
2521:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2522:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 51


2523:ThirdParty/FreeRTOS/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2524:ThirdParty/FreeRTOS/tasks.c ****                      * each task in the Suspended state. */
2525:ThirdParty/FreeRTOS/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2526:ThirdParty/FreeRTOS/tasks.c ****                 }
2527:ThirdParty/FreeRTOS/tasks.c ****                 #endif
2528:ThirdParty/FreeRTOS/tasks.c **** 
2529:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2530:ThirdParty/FreeRTOS/tasks.c ****                 {
2531:ThirdParty/FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
2532:ThirdParty/FreeRTOS/tasks.c ****                     {
2533:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2534:ThirdParty/FreeRTOS/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2535:ThirdParty/FreeRTOS/tasks.c ****                         #else
2536:ThirdParty/FreeRTOS/tasks.c ****                             *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2537:ThirdParty/FreeRTOS/tasks.c ****                         #endif
2538:ThirdParty/FreeRTOS/tasks.c ****                     }
2539:ThirdParty/FreeRTOS/tasks.c ****                 }
2540:ThirdParty/FreeRTOS/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2541:ThirdParty/FreeRTOS/tasks.c ****                 {
2542:ThirdParty/FreeRTOS/tasks.c ****                     if( pulTotalRunTime != NULL )
2543:ThirdParty/FreeRTOS/tasks.c ****                     {
2544:ThirdParty/FreeRTOS/tasks.c ****                         *pulTotalRunTime = 0;
2545:ThirdParty/FreeRTOS/tasks.c ****                     }
2546:ThirdParty/FreeRTOS/tasks.c ****                 }
2547:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2548:ThirdParty/FreeRTOS/tasks.c ****             }
2549:ThirdParty/FreeRTOS/tasks.c ****             else
2550:ThirdParty/FreeRTOS/tasks.c ****             {
2551:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2552:ThirdParty/FreeRTOS/tasks.c ****             }
2553:ThirdParty/FreeRTOS/tasks.c ****         }
2554:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2555:ThirdParty/FreeRTOS/tasks.c **** 
2556:ThirdParty/FreeRTOS/tasks.c ****         return uxTask;
2557:ThirdParty/FreeRTOS/tasks.c ****     }
2558:ThirdParty/FreeRTOS/tasks.c **** 
2559:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2560:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2561:ThirdParty/FreeRTOS/tasks.c **** 
2562:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2563:ThirdParty/FreeRTOS/tasks.c **** 
2564:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2565:ThirdParty/FreeRTOS/tasks.c ****     {
2566:ThirdParty/FreeRTOS/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2567:ThirdParty/FreeRTOS/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2568:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2569:ThirdParty/FreeRTOS/tasks.c ****         return xIdleTaskHandle;
2570:ThirdParty/FreeRTOS/tasks.c ****     }
2571:ThirdParty/FreeRTOS/tasks.c **** 
2572:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2573:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2574:ThirdParty/FreeRTOS/tasks.c **** 
2575:ThirdParty/FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2576:ThirdParty/FreeRTOS/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2577:ThirdParty/FreeRTOS/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2578:ThirdParty/FreeRTOS/tasks.c ****  * 1. */
2579:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 52


2580:ThirdParty/FreeRTOS/tasks.c **** 
2581:ThirdParty/FreeRTOS/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2582:ThirdParty/FreeRTOS/tasks.c ****     {
2583:ThirdParty/FreeRTOS/tasks.c ****         /* Correct the tick count value after a period during which the tick
2584:ThirdParty/FreeRTOS/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2585:ThirdParty/FreeRTOS/tasks.c ****          * each stepped tick. */
2586:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2587:ThirdParty/FreeRTOS/tasks.c **** 
2588:ThirdParty/FreeRTOS/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2589:ThirdParty/FreeRTOS/tasks.c ****         {
2590:ThirdParty/FreeRTOS/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2591:ThirdParty/FreeRTOS/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2592:ThirdParty/FreeRTOS/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2593:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( uxSchedulerSuspended );
2594:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
2595:ThirdParty/FreeRTOS/tasks.c **** 
2596:ThirdParty/FreeRTOS/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2597:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
2598:ThirdParty/FreeRTOS/tasks.c ****             {
2599:ThirdParty/FreeRTOS/tasks.c ****                 xPendedTicks++;
2600:ThirdParty/FreeRTOS/tasks.c ****             }
2601:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
2602:ThirdParty/FreeRTOS/tasks.c ****             xTicksToJump--;
2603:ThirdParty/FreeRTOS/tasks.c ****         }
2604:ThirdParty/FreeRTOS/tasks.c ****         else
2605:ThirdParty/FreeRTOS/tasks.c ****         {
2606:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2607:ThirdParty/FreeRTOS/tasks.c ****         }
2608:ThirdParty/FreeRTOS/tasks.c **** 
2609:ThirdParty/FreeRTOS/tasks.c ****         xTickCount += xTicksToJump;
2610:ThirdParty/FreeRTOS/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2611:ThirdParty/FreeRTOS/tasks.c ****     }
2612:ThirdParty/FreeRTOS/tasks.c **** 
2613:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2614:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2615:ThirdParty/FreeRTOS/tasks.c **** 
2616:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2617:ThirdParty/FreeRTOS/tasks.c **** {
2618:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
2619:ThirdParty/FreeRTOS/tasks.c **** 
2620:ThirdParty/FreeRTOS/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2621:ThirdParty/FreeRTOS/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2622:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended == 0 );
2623:ThirdParty/FreeRTOS/tasks.c **** 
2624:ThirdParty/FreeRTOS/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2625:ThirdParty/FreeRTOS/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2626:ThirdParty/FreeRTOS/tasks.c ****     vTaskSuspendAll();
2627:ThirdParty/FreeRTOS/tasks.c **** 
2628:ThirdParty/FreeRTOS/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2629:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
2630:ThirdParty/FreeRTOS/tasks.c ****     {
2631:ThirdParty/FreeRTOS/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2632:ThirdParty/FreeRTOS/tasks.c ****     }
2633:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
2634:ThirdParty/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2635:ThirdParty/FreeRTOS/tasks.c **** 
2636:ThirdParty/FreeRTOS/tasks.c ****     return xYieldOccurred;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 53


2637:ThirdParty/FreeRTOS/tasks.c **** }
2638:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2639:ThirdParty/FreeRTOS/tasks.c **** 
2640:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2641:ThirdParty/FreeRTOS/tasks.c **** 
2642:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2643:ThirdParty/FreeRTOS/tasks.c ****     {
2644:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB = xTask;
2645:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2646:ThirdParty/FreeRTOS/tasks.c **** 
2647:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxTCB );
2648:ThirdParty/FreeRTOS/tasks.c **** 
2649:ThirdParty/FreeRTOS/tasks.c ****         vTaskSuspendAll();
2650:ThirdParty/FreeRTOS/tasks.c ****         {
2651:ThirdParty/FreeRTOS/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
2652:ThirdParty/FreeRTOS/tasks.c ****              * it is actually in the Blocked state. */
2653:ThirdParty/FreeRTOS/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2654:ThirdParty/FreeRTOS/tasks.c ****             {
2655:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
2656:ThirdParty/FreeRTOS/tasks.c **** 
2657:ThirdParty/FreeRTOS/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2658:ThirdParty/FreeRTOS/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2659:ThirdParty/FreeRTOS/tasks.c ****                  * scheduler is suspended. */
2660:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2661:ThirdParty/FreeRTOS/tasks.c **** 
2662:ThirdParty/FreeRTOS/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2663:ThirdParty/FreeRTOS/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2664:ThirdParty/FreeRTOS/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2665:ThirdParty/FreeRTOS/tasks.c ****                  * is used. */
2666:ThirdParty/FreeRTOS/tasks.c ****                 taskENTER_CRITICAL();
2667:ThirdParty/FreeRTOS/tasks.c ****                 {
2668:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2669:ThirdParty/FreeRTOS/tasks.c ****                     {
2670:ThirdParty/FreeRTOS/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2671:ThirdParty/FreeRTOS/tasks.c **** 
2672:ThirdParty/FreeRTOS/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2673:ThirdParty/FreeRTOS/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2674:ThirdParty/FreeRTOS/tasks.c ****                          * then block again. */
2675:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2676:ThirdParty/FreeRTOS/tasks.c ****                     }
2677:ThirdParty/FreeRTOS/tasks.c ****                     else
2678:ThirdParty/FreeRTOS/tasks.c ****                     {
2679:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2680:ThirdParty/FreeRTOS/tasks.c ****                     }
2681:ThirdParty/FreeRTOS/tasks.c ****                 }
2682:ThirdParty/FreeRTOS/tasks.c ****                 taskEXIT_CRITICAL();
2683:ThirdParty/FreeRTOS/tasks.c **** 
2684:ThirdParty/FreeRTOS/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2685:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2686:ThirdParty/FreeRTOS/tasks.c **** 
2687:ThirdParty/FreeRTOS/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2688:ThirdParty/FreeRTOS/tasks.c ****                  * switch if preemption is turned off. */
2689:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2690:ThirdParty/FreeRTOS/tasks.c ****                 {
2691:ThirdParty/FreeRTOS/tasks.c ****                     /* Preemption is on, but a context switch should only be
2692:ThirdParty/FreeRTOS/tasks.c ****                      * performed if the unblocked task has a priority that is
2693:ThirdParty/FreeRTOS/tasks.c ****                      * higher than the currently executing task. */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 54


2694:ThirdParty/FreeRTOS/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2695:ThirdParty/FreeRTOS/tasks.c ****                     {
2696:ThirdParty/FreeRTOS/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2697:ThirdParty/FreeRTOS/tasks.c ****                          * is unsuspended. */
2698:ThirdParty/FreeRTOS/tasks.c ****                         xYieldPending = pdTRUE;
2699:ThirdParty/FreeRTOS/tasks.c ****                     }
2700:ThirdParty/FreeRTOS/tasks.c ****                     else
2701:ThirdParty/FreeRTOS/tasks.c ****                     {
2702:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2703:ThirdParty/FreeRTOS/tasks.c ****                     }
2704:ThirdParty/FreeRTOS/tasks.c ****                 }
2705:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2706:ThirdParty/FreeRTOS/tasks.c ****             }
2707:ThirdParty/FreeRTOS/tasks.c ****             else
2708:ThirdParty/FreeRTOS/tasks.c ****             {
2709:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
2710:ThirdParty/FreeRTOS/tasks.c ****             }
2711:ThirdParty/FreeRTOS/tasks.c ****         }
2712:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xTaskResumeAll();
2713:ThirdParty/FreeRTOS/tasks.c **** 
2714:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2715:ThirdParty/FreeRTOS/tasks.c ****     }
2716:ThirdParty/FreeRTOS/tasks.c **** 
2717:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2718:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2719:ThirdParty/FreeRTOS/tasks.c **** 
2720:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2721:ThirdParty/FreeRTOS/tasks.c **** {
2722:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
2723:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xItemValue;
2724:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2725:ThirdParty/FreeRTOS/tasks.c **** 
2726:ThirdParty/FreeRTOS/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2727:ThirdParty/FreeRTOS/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2728:ThirdParty/FreeRTOS/tasks.c ****      * tasks to be unblocked. */
2729:ThirdParty/FreeRTOS/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2730:ThirdParty/FreeRTOS/tasks.c **** 
2731:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2732:ThirdParty/FreeRTOS/tasks.c ****     {
2733:ThirdParty/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2734:ThirdParty/FreeRTOS/tasks.c ****          * block. */
2735:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2736:ThirdParty/FreeRTOS/tasks.c **** 
2737:ThirdParty/FreeRTOS/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2738:ThirdParty/FreeRTOS/tasks.c ****          * delayed lists if it wraps to 0. */
2739:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = xConstTickCount;
2740:ThirdParty/FreeRTOS/tasks.c **** 
2741:ThirdParty/FreeRTOS/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2742:ThirdParty/FreeRTOS/tasks.c ****         {
2743:ThirdParty/FreeRTOS/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2744:ThirdParty/FreeRTOS/tasks.c ****         }
2745:ThirdParty/FreeRTOS/tasks.c ****         else
2746:ThirdParty/FreeRTOS/tasks.c ****         {
2747:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2748:ThirdParty/FreeRTOS/tasks.c ****         }
2749:ThirdParty/FreeRTOS/tasks.c **** 
2750:ThirdParty/FreeRTOS/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 55


2751:ThirdParty/FreeRTOS/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2752:ThirdParty/FreeRTOS/tasks.c ****          * has been found whose block time has not expired there is no need to
2753:ThirdParty/FreeRTOS/tasks.c ****          * look any further down the list. */
2754:ThirdParty/FreeRTOS/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2755:ThirdParty/FreeRTOS/tasks.c ****         {
2756:ThirdParty/FreeRTOS/tasks.c ****             for( ; ; )
2757:ThirdParty/FreeRTOS/tasks.c ****             {
2758:ThirdParty/FreeRTOS/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2759:ThirdParty/FreeRTOS/tasks.c ****                 {
2760:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2761:ThirdParty/FreeRTOS/tasks.c ****                      * to the maximum possible value so it is extremely
2762:ThirdParty/FreeRTOS/tasks.c ****                      * unlikely that the
2763:ThirdParty/FreeRTOS/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2764:ThirdParty/FreeRTOS/tasks.c ****                      * next time through. */
2765:ThirdParty/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2766:ThirdParty/FreeRTOS/tasks.c ****                     break;
2767:ThirdParty/FreeRTOS/tasks.c ****                 }
2768:ThirdParty/FreeRTOS/tasks.c ****                 else
2769:ThirdParty/FreeRTOS/tasks.c ****                 {
2770:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed list is not empty, get the value of the
2771:ThirdParty/FreeRTOS/tasks.c ****                      * item at the head of the delayed list.  This is the time
2772:ThirdParty/FreeRTOS/tasks.c ****                      * at which the task at the head of the delayed list must
2773:ThirdParty/FreeRTOS/tasks.c ****                      * be removed from the Blocked state. */
2774:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2775:ThirdParty/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2776:ThirdParty/FreeRTOS/tasks.c **** 
2777:ThirdParty/FreeRTOS/tasks.c ****                     if( xConstTickCount < xItemValue )
2778:ThirdParty/FreeRTOS/tasks.c ****                     {
2779:ThirdParty/FreeRTOS/tasks.c ****                         /* It is not time to unblock this item yet, but the
2780:ThirdParty/FreeRTOS/tasks.c ****                          * item value is the time at which the task at the head
2781:ThirdParty/FreeRTOS/tasks.c ****                          * of the blocked list must be removed from the Blocked
2782:ThirdParty/FreeRTOS/tasks.c ****                          * state -  so record the item value in
2783:ThirdParty/FreeRTOS/tasks.c ****                          * xNextTaskUnblockTime. */
2784:ThirdParty/FreeRTOS/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2785:ThirdParty/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2786:ThirdParty/FreeRTOS/tasks.c ****                     }
2787:ThirdParty/FreeRTOS/tasks.c ****                     else
2788:ThirdParty/FreeRTOS/tasks.c ****                     {
2789:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2790:ThirdParty/FreeRTOS/tasks.c ****                     }
2791:ThirdParty/FreeRTOS/tasks.c **** 
2792:ThirdParty/FreeRTOS/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2793:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2794:ThirdParty/FreeRTOS/tasks.c **** 
2795:ThirdParty/FreeRTOS/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2796:ThirdParty/FreeRTOS/tasks.c ****                      * it from the event list. */
2797:ThirdParty/FreeRTOS/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2798:ThirdParty/FreeRTOS/tasks.c ****                     {
2799:ThirdParty/FreeRTOS/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2800:ThirdParty/FreeRTOS/tasks.c ****                     }
2801:ThirdParty/FreeRTOS/tasks.c ****                     else
2802:ThirdParty/FreeRTOS/tasks.c ****                     {
2803:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2804:ThirdParty/FreeRTOS/tasks.c ****                     }
2805:ThirdParty/FreeRTOS/tasks.c **** 
2806:ThirdParty/FreeRTOS/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2807:ThirdParty/FreeRTOS/tasks.c ****                      * list. */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 56


2808:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2809:ThirdParty/FreeRTOS/tasks.c **** 
2810:ThirdParty/FreeRTOS/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2811:ThirdParty/FreeRTOS/tasks.c ****                      * context switch if preemption is turned off. */
2812:ThirdParty/FreeRTOS/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2813:ThirdParty/FreeRTOS/tasks.c ****                     {
2814:ThirdParty/FreeRTOS/tasks.c ****                         /* Preemption is on, but a context switch should
2815:ThirdParty/FreeRTOS/tasks.c ****                          * only be performed if the unblocked task's
2816:ThirdParty/FreeRTOS/tasks.c ****                          * priority is higher than the currently executing
2817:ThirdParty/FreeRTOS/tasks.c ****                          * task.
2818:ThirdParty/FreeRTOS/tasks.c ****                          * The case of equal priority tasks sharing
2819:ThirdParty/FreeRTOS/tasks.c ****                          * processing time (which happens when both
2820:ThirdParty/FreeRTOS/tasks.c ****                          * preemption and time slicing are on) is
2821:ThirdParty/FreeRTOS/tasks.c ****                          * handled below.*/
2822:ThirdParty/FreeRTOS/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2823:ThirdParty/FreeRTOS/tasks.c ****                         {
2824:ThirdParty/FreeRTOS/tasks.c ****                             xSwitchRequired = pdTRUE;
2825:ThirdParty/FreeRTOS/tasks.c ****                         }
2826:ThirdParty/FreeRTOS/tasks.c ****                         else
2827:ThirdParty/FreeRTOS/tasks.c ****                         {
2828:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2829:ThirdParty/FreeRTOS/tasks.c ****                         }
2830:ThirdParty/FreeRTOS/tasks.c ****                     }
2831:ThirdParty/FreeRTOS/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2832:ThirdParty/FreeRTOS/tasks.c ****                 }
2833:ThirdParty/FreeRTOS/tasks.c ****             }
2834:ThirdParty/FreeRTOS/tasks.c ****         }
2835:ThirdParty/FreeRTOS/tasks.c **** 
2836:ThirdParty/FreeRTOS/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2837:ThirdParty/FreeRTOS/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2838:ThirdParty/FreeRTOS/tasks.c ****          * writer has not explicitly turned time slicing off. */
2839:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2840:ThirdParty/FreeRTOS/tasks.c ****         {
2841:ThirdParty/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2842:ThirdParty/FreeRTOS/tasks.c ****             {
2843:ThirdParty/FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2844:ThirdParty/FreeRTOS/tasks.c ****             }
2845:ThirdParty/FreeRTOS/tasks.c ****             else
2846:ThirdParty/FreeRTOS/tasks.c ****             {
2847:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2848:ThirdParty/FreeRTOS/tasks.c ****             }
2849:ThirdParty/FreeRTOS/tasks.c ****         }
2850:ThirdParty/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2851:ThirdParty/FreeRTOS/tasks.c **** 
2852:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2853:ThirdParty/FreeRTOS/tasks.c ****         {
2854:ThirdParty/FreeRTOS/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2855:ThirdParty/FreeRTOS/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2856:ThirdParty/FreeRTOS/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2857:ThirdParty/FreeRTOS/tasks.c ****             {
2858:ThirdParty/FreeRTOS/tasks.c ****                 vApplicationTickHook();
2859:ThirdParty/FreeRTOS/tasks.c ****             }
2860:ThirdParty/FreeRTOS/tasks.c ****             else
2861:ThirdParty/FreeRTOS/tasks.c ****             {
2862:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2863:ThirdParty/FreeRTOS/tasks.c ****             }
2864:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 57


2865:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2866:ThirdParty/FreeRTOS/tasks.c **** 
2867:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2868:ThirdParty/FreeRTOS/tasks.c ****         {
2869:ThirdParty/FreeRTOS/tasks.c ****             if( xYieldPending != pdFALSE )
2870:ThirdParty/FreeRTOS/tasks.c ****             {
2871:ThirdParty/FreeRTOS/tasks.c ****                 xSwitchRequired = pdTRUE;
2872:ThirdParty/FreeRTOS/tasks.c ****             }
2873:ThirdParty/FreeRTOS/tasks.c ****             else
2874:ThirdParty/FreeRTOS/tasks.c ****             {
2875:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2876:ThirdParty/FreeRTOS/tasks.c ****             }
2877:ThirdParty/FreeRTOS/tasks.c ****         }
2878:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
2879:ThirdParty/FreeRTOS/tasks.c ****     }
2880:ThirdParty/FreeRTOS/tasks.c ****     else
2881:ThirdParty/FreeRTOS/tasks.c ****     {
2882:ThirdParty/FreeRTOS/tasks.c ****         ++xPendedTicks;
2883:ThirdParty/FreeRTOS/tasks.c **** 
2884:ThirdParty/FreeRTOS/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2885:ThirdParty/FreeRTOS/tasks.c ****          * scheduler is locked. */
2886:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2887:ThirdParty/FreeRTOS/tasks.c ****         {
2888:ThirdParty/FreeRTOS/tasks.c ****             vApplicationTickHook();
2889:ThirdParty/FreeRTOS/tasks.c ****         }
2890:ThirdParty/FreeRTOS/tasks.c ****         #endif
2891:ThirdParty/FreeRTOS/tasks.c ****     }
2892:ThirdParty/FreeRTOS/tasks.c **** 
2893:ThirdParty/FreeRTOS/tasks.c ****     return xSwitchRequired;
2894:ThirdParty/FreeRTOS/tasks.c **** }
2895:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2896:ThirdParty/FreeRTOS/tasks.c **** 
2897:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2898:ThirdParty/FreeRTOS/tasks.c **** 
2899:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2900:ThirdParty/FreeRTOS/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2901:ThirdParty/FreeRTOS/tasks.c ****     {
2902:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2903:ThirdParty/FreeRTOS/tasks.c **** 
2904:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2905:ThirdParty/FreeRTOS/tasks.c ****          * getting set. */
2906:ThirdParty/FreeRTOS/tasks.c ****         if( xTask == NULL )
2907:ThirdParty/FreeRTOS/tasks.c ****         {
2908:ThirdParty/FreeRTOS/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2909:ThirdParty/FreeRTOS/tasks.c ****         }
2910:ThirdParty/FreeRTOS/tasks.c ****         else
2911:ThirdParty/FreeRTOS/tasks.c ****         {
2912:ThirdParty/FreeRTOS/tasks.c ****             xTCB = xTask;
2913:ThirdParty/FreeRTOS/tasks.c ****         }
2914:ThirdParty/FreeRTOS/tasks.c **** 
2915:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2916:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2917:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2918:ThirdParty/FreeRTOS/tasks.c ****         {
2919:ThirdParty/FreeRTOS/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2920:ThirdParty/FreeRTOS/tasks.c ****         }
2921:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 58


2922:ThirdParty/FreeRTOS/tasks.c ****     }
2923:ThirdParty/FreeRTOS/tasks.c **** 
2924:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2925:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2926:ThirdParty/FreeRTOS/tasks.c **** 
2927:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2928:ThirdParty/FreeRTOS/tasks.c **** 
2929:ThirdParty/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2930:ThirdParty/FreeRTOS/tasks.c ****     {
2931:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2932:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2933:ThirdParty/FreeRTOS/tasks.c **** 
2934:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2935:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2936:ThirdParty/FreeRTOS/tasks.c **** 
2937:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2938:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2939:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
2940:ThirdParty/FreeRTOS/tasks.c ****         {
2941:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2942:ThirdParty/FreeRTOS/tasks.c ****         }
2943:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
2944:ThirdParty/FreeRTOS/tasks.c **** 
2945:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2946:ThirdParty/FreeRTOS/tasks.c ****     }
2947:ThirdParty/FreeRTOS/tasks.c **** 
2948:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2949:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:ThirdParty/FreeRTOS/tasks.c **** 
2951:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2952:ThirdParty/FreeRTOS/tasks.c **** 
2953:ThirdParty/FreeRTOS/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2954:ThirdParty/FreeRTOS/tasks.c ****     {
2955:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
2956:ThirdParty/FreeRTOS/tasks.c ****         TaskHookFunction_t xReturn;
2957:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
2958:ThirdParty/FreeRTOS/tasks.c **** 
2959:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2960:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2961:ThirdParty/FreeRTOS/tasks.c **** 
2962:ThirdParty/FreeRTOS/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2963:ThirdParty/FreeRTOS/tasks.c ****          * the value can be accessed from an interrupt. */
2964:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2965:ThirdParty/FreeRTOS/tasks.c ****         {
2966:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pxTCB->pxTaskTag;
2967:ThirdParty/FreeRTOS/tasks.c ****         }
2968:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2969:ThirdParty/FreeRTOS/tasks.c **** 
2970:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
2971:ThirdParty/FreeRTOS/tasks.c ****     }
2972:ThirdParty/FreeRTOS/tasks.c **** 
2973:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2974:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2975:ThirdParty/FreeRTOS/tasks.c **** 
2976:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2977:ThirdParty/FreeRTOS/tasks.c **** 
2978:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 59


2979:ThirdParty/FreeRTOS/tasks.c ****                                              void * pvParameter )
2980:ThirdParty/FreeRTOS/tasks.c ****     {
2981:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * xTCB;
2982:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
2983:ThirdParty/FreeRTOS/tasks.c **** 
2984:ThirdParty/FreeRTOS/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
2985:ThirdParty/FreeRTOS/tasks.c ****         if( xTask == NULL )
2986:ThirdParty/FreeRTOS/tasks.c ****         {
2987:ThirdParty/FreeRTOS/tasks.c ****             xTCB = pxCurrentTCB;
2988:ThirdParty/FreeRTOS/tasks.c ****         }
2989:ThirdParty/FreeRTOS/tasks.c ****         else
2990:ThirdParty/FreeRTOS/tasks.c ****         {
2991:ThirdParty/FreeRTOS/tasks.c ****             xTCB = xTask;
2992:ThirdParty/FreeRTOS/tasks.c ****         }
2993:ThirdParty/FreeRTOS/tasks.c **** 
2994:ThirdParty/FreeRTOS/tasks.c ****         if( xTCB->pxTaskTag != NULL )
2995:ThirdParty/FreeRTOS/tasks.c ****         {
2996:ThirdParty/FreeRTOS/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
2997:ThirdParty/FreeRTOS/tasks.c ****         }
2998:ThirdParty/FreeRTOS/tasks.c ****         else
2999:ThirdParty/FreeRTOS/tasks.c ****         {
3000:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFAIL;
3001:ThirdParty/FreeRTOS/tasks.c ****         }
3002:ThirdParty/FreeRTOS/tasks.c **** 
3003:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
3004:ThirdParty/FreeRTOS/tasks.c ****     }
3005:ThirdParty/FreeRTOS/tasks.c **** 
3006:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3007:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3008:ThirdParty/FreeRTOS/tasks.c **** 
3009:ThirdParty/FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
3010:ThirdParty/FreeRTOS/tasks.c **** {
3011:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3012:ThirdParty/FreeRTOS/tasks.c ****     {
3013:ThirdParty/FreeRTOS/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3014:ThirdParty/FreeRTOS/tasks.c ****          * switch. */
3015:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3016:ThirdParty/FreeRTOS/tasks.c ****     }
3017:ThirdParty/FreeRTOS/tasks.c ****     else
3018:ThirdParty/FreeRTOS/tasks.c ****     {
3019:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdFALSE;
3020:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
3021:ThirdParty/FreeRTOS/tasks.c **** 
3022:ThirdParty/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3023:ThirdParty/FreeRTOS/tasks.c ****         {
3024:ThirdParty/FreeRTOS/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3025:ThirdParty/FreeRTOS/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3026:ThirdParty/FreeRTOS/tasks.c ****             #else
3027:ThirdParty/FreeRTOS/tasks.c ****                 ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3028:ThirdParty/FreeRTOS/tasks.c ****             #endif
3029:ThirdParty/FreeRTOS/tasks.c **** 
3030:ThirdParty/FreeRTOS/tasks.c ****             /* Add the amount of time the task has been running to the
3031:ThirdParty/FreeRTOS/tasks.c ****              * accumulated time so far.  The time the task started running was
3032:ThirdParty/FreeRTOS/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3033:ThirdParty/FreeRTOS/tasks.c ****              * protection here so count values are only valid until the timer
3034:ThirdParty/FreeRTOS/tasks.c ****              * overflows.  The guard against negative values is to protect
3035:ThirdParty/FreeRTOS/tasks.c ****              * against suspect run time stat counter implementations - which
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 60


3036:ThirdParty/FreeRTOS/tasks.c ****              * are provided by the application, not the kernel. */
3037:ThirdParty/FreeRTOS/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3038:ThirdParty/FreeRTOS/tasks.c ****             {
3039:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3040:ThirdParty/FreeRTOS/tasks.c ****             }
3041:ThirdParty/FreeRTOS/tasks.c ****             else
3042:ThirdParty/FreeRTOS/tasks.c ****             {
3043:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3044:ThirdParty/FreeRTOS/tasks.c ****             }
3045:ThirdParty/FreeRTOS/tasks.c **** 
3046:ThirdParty/FreeRTOS/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3047:ThirdParty/FreeRTOS/tasks.c ****         }
3048:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3049:ThirdParty/FreeRTOS/tasks.c **** 
3050:ThirdParty/FreeRTOS/tasks.c ****         /* Check for stack overflow, if configured. */
3051:ThirdParty/FreeRTOS/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3052:ThirdParty/FreeRTOS/tasks.c **** 
3053:ThirdParty/FreeRTOS/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3054:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3055:ThirdParty/FreeRTOS/tasks.c ****         {
3056:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3057:ThirdParty/FreeRTOS/tasks.c ****         }
3058:ThirdParty/FreeRTOS/tasks.c ****         #endif
3059:ThirdParty/FreeRTOS/tasks.c **** 
3060:ThirdParty/FreeRTOS/tasks.c ****         /* Select a new task to run using either the generic C or port
3061:ThirdParty/FreeRTOS/tasks.c ****          * optimised asm code. */
3062:ThirdParty/FreeRTOS/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3063:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
3064:ThirdParty/FreeRTOS/tasks.c **** 
3065:ThirdParty/FreeRTOS/tasks.c ****         /* After the new task is switched in, update the global errno. */
3066:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:ThirdParty/FreeRTOS/tasks.c ****         {
3068:ThirdParty/FreeRTOS/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3069:ThirdParty/FreeRTOS/tasks.c ****         }
3070:ThirdParty/FreeRTOS/tasks.c ****         #endif
3071:ThirdParty/FreeRTOS/tasks.c **** 
3072:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3073:ThirdParty/FreeRTOS/tasks.c ****         {
3074:ThirdParty/FreeRTOS/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3075:ThirdParty/FreeRTOS/tasks.c ****              * Block specific to this task. */
3076:ThirdParty/FreeRTOS/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3077:ThirdParty/FreeRTOS/tasks.c ****         }
3078:ThirdParty/FreeRTOS/tasks.c ****         #endif
3079:ThirdParty/FreeRTOS/tasks.c ****     }
3080:ThirdParty/FreeRTOS/tasks.c **** }
3081:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3082:ThirdParty/FreeRTOS/tasks.c **** 
3083:ThirdParty/FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3084:ThirdParty/FreeRTOS/tasks.c ****                             const TickType_t xTicksToWait )
3085:ThirdParty/FreeRTOS/tasks.c **** {
3086:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3087:ThirdParty/FreeRTOS/tasks.c **** 
3088:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3089:ThirdParty/FreeRTOS/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3090:ThirdParty/FreeRTOS/tasks.c **** 
3091:ThirdParty/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3092:ThirdParty/FreeRTOS/tasks.c ****      * This is placed in the list in priority order so the highest priority task
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 61


3093:ThirdParty/FreeRTOS/tasks.c ****      * is the first to be woken by the event.
3094:ThirdParty/FreeRTOS/tasks.c ****      *
3095:ThirdParty/FreeRTOS/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3096:ThirdParty/FreeRTOS/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3097:ThirdParty/FreeRTOS/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3098:ThirdParty/FreeRTOS/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3099:ThirdParty/FreeRTOS/tasks.c ****      *
3100:ThirdParty/FreeRTOS/tasks.c ****      * The queue that contains the event list is locked, preventing
3101:ThirdParty/FreeRTOS/tasks.c ****      * simultaneous access from interrupts. */
3102:ThirdParty/FreeRTOS/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3103:ThirdParty/FreeRTOS/tasks.c **** 
3104:ThirdParty/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3105:ThirdParty/FreeRTOS/tasks.c **** }
3106:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3107:ThirdParty/FreeRTOS/tasks.c **** 
3108:ThirdParty/FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3109:ThirdParty/FreeRTOS/tasks.c ****                                      const TickType_t xItemValue,
3110:ThirdParty/FreeRTOS/tasks.c ****                                      const TickType_t xTicksToWait )
3111:ThirdParty/FreeRTOS/tasks.c **** {
3112:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
3113:ThirdParty/FreeRTOS/tasks.c **** 
3114:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3115:ThirdParty/FreeRTOS/tasks.c ****      * the event groups implementation. */
3116:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != 0 );
3117:ThirdParty/FreeRTOS/tasks.c **** 
3118:ThirdParty/FreeRTOS/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3119:ThirdParty/FreeRTOS/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3120:ThirdParty/FreeRTOS/tasks.c ****      * task that is not in the Blocked state. */
3121:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3122:ThirdParty/FreeRTOS/tasks.c **** 
3123:ThirdParty/FreeRTOS/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3124:ThirdParty/FreeRTOS/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3125:ThirdParty/FreeRTOS/tasks.c ****      * event group implementation - and interrupts don't access event groups
3126:ThirdParty/FreeRTOS/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3127:ThirdParty/FreeRTOS/tasks.c ****      * the task level). */
3128:ThirdParty/FreeRTOS/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3129:ThirdParty/FreeRTOS/tasks.c **** 
3130:ThirdParty/FreeRTOS/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3131:ThirdParty/FreeRTOS/tasks.c **** }
3132:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3133:ThirdParty/FreeRTOS/tasks.c **** 
3134:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TIMERS == 1 )
3135:ThirdParty/FreeRTOS/tasks.c **** 
3136:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3137:ThirdParty/FreeRTOS/tasks.c ****                                           TickType_t xTicksToWait,
3138:ThirdParty/FreeRTOS/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3139:ThirdParty/FreeRTOS/tasks.c ****     {
3140:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( pxEventList );
3141:ThirdParty/FreeRTOS/tasks.c **** 
3142:ThirdParty/FreeRTOS/tasks.c ****         /* This function should not be called by application code hence the
3143:ThirdParty/FreeRTOS/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3144:ThirdParty/FreeRTOS/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3145:ThirdParty/FreeRTOS/tasks.c ****          * it should be called with the scheduler suspended. */
3146:ThirdParty/FreeRTOS/tasks.c **** 
3147:ThirdParty/FreeRTOS/tasks.c **** 
3148:ThirdParty/FreeRTOS/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3149:ThirdParty/FreeRTOS/tasks.c ****          * In this case it is assume that this is the only task that is going to
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 62


3150:ThirdParty/FreeRTOS/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3151:ThirdParty/FreeRTOS/tasks.c ****          * can be used in place of vListInsert. */
3152:ThirdParty/FreeRTOS/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3153:ThirdParty/FreeRTOS/tasks.c **** 
3154:ThirdParty/FreeRTOS/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3155:ThirdParty/FreeRTOS/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3156:ThirdParty/FreeRTOS/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3157:ThirdParty/FreeRTOS/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3158:ThirdParty/FreeRTOS/tasks.c ****         {
3159:ThirdParty/FreeRTOS/tasks.c ****             xTicksToWait = portMAX_DELAY;
3160:ThirdParty/FreeRTOS/tasks.c ****         }
3161:ThirdParty/FreeRTOS/tasks.c **** 
3162:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3163:ThirdParty/FreeRTOS/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3164:ThirdParty/FreeRTOS/tasks.c ****     }
3165:ThirdParty/FreeRTOS/tasks.c **** 
3166:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3167:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3168:ThirdParty/FreeRTOS/tasks.c **** 
3169:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3170:ThirdParty/FreeRTOS/tasks.c **** {
3171:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3172:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3173:ThirdParty/FreeRTOS/tasks.c **** 
3174:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3175:ThirdParty/FreeRTOS/tasks.c ****      * called from a critical section within an ISR. */
3176:ThirdParty/FreeRTOS/tasks.c **** 
3177:ThirdParty/FreeRTOS/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3178:ThirdParty/FreeRTOS/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3179:ThirdParty/FreeRTOS/tasks.c ****      * the delayed list, and add it to the ready list.
3180:ThirdParty/FreeRTOS/tasks.c ****      *
3181:ThirdParty/FreeRTOS/tasks.c ****      * If an event is for a queue that is locked then this function will never
3182:ThirdParty/FreeRTOS/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3183:ThirdParty/FreeRTOS/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3184:ThirdParty/FreeRTOS/tasks.c ****      *
3185:ThirdParty/FreeRTOS/tasks.c ****      * This function assumes that a check has already been made to ensure that
3186:ThirdParty/FreeRTOS/tasks.c ****      * pxEventList is not empty. */
3187:ThirdParty/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3188:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3189:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3190:ThirdParty/FreeRTOS/tasks.c **** 
3191:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3192:ThirdParty/FreeRTOS/tasks.c ****     {
3193:ThirdParty/FreeRTOS/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3194:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3195:ThirdParty/FreeRTOS/tasks.c **** 
3196:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3197:ThirdParty/FreeRTOS/tasks.c ****         {
3198:ThirdParty/FreeRTOS/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3199:ThirdParty/FreeRTOS/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3200:ThirdParty/FreeRTOS/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3201:ThirdParty/FreeRTOS/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3202:ThirdParty/FreeRTOS/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3203:ThirdParty/FreeRTOS/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3204:ThirdParty/FreeRTOS/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3205:ThirdParty/FreeRTOS/tasks.c ****              * ensure it is updated at the earliest possible time. */
3206:ThirdParty/FreeRTOS/tasks.c ****             prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 63


3207:ThirdParty/FreeRTOS/tasks.c ****         }
3208:ThirdParty/FreeRTOS/tasks.c ****         #endif
3209:ThirdParty/FreeRTOS/tasks.c ****     }
3210:ThirdParty/FreeRTOS/tasks.c ****     else
3211:ThirdParty/FreeRTOS/tasks.c ****     {
3212:ThirdParty/FreeRTOS/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3213:ThirdParty/FreeRTOS/tasks.c ****          * pending until the scheduler is resumed. */
3214:ThirdParty/FreeRTOS/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3215:ThirdParty/FreeRTOS/tasks.c ****     }
3216:ThirdParty/FreeRTOS/tasks.c **** 
3217:ThirdParty/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3218:ThirdParty/FreeRTOS/tasks.c ****     {
3219:ThirdParty/FreeRTOS/tasks.c ****         /* Return true if the task removed from the event list has a higher
3220:ThirdParty/FreeRTOS/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3221:ThirdParty/FreeRTOS/tasks.c ****          * it should force a context switch now. */
3222:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pdTRUE;
3223:ThirdParty/FreeRTOS/tasks.c **** 
3224:ThirdParty/FreeRTOS/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3225:ThirdParty/FreeRTOS/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3226:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3227:ThirdParty/FreeRTOS/tasks.c ****     }
3228:ThirdParty/FreeRTOS/tasks.c ****     else
3229:ThirdParty/FreeRTOS/tasks.c ****     {
3230:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pdFALSE;
3231:ThirdParty/FreeRTOS/tasks.c ****     }
3232:ThirdParty/FreeRTOS/tasks.c **** 
3233:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
3234:ThirdParty/FreeRTOS/tasks.c **** }
3235:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3236:ThirdParty/FreeRTOS/tasks.c **** 
3237:ThirdParty/FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3238:ThirdParty/FreeRTOS/tasks.c ****                                         const TickType_t xItemValue )
3239:ThirdParty/FreeRTOS/tasks.c **** {
3240:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
3241:ThirdParty/FreeRTOS/tasks.c **** 
3242:ThirdParty/FreeRTOS/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3243:ThirdParty/FreeRTOS/tasks.c ****      * the event flags implementation. */
3244:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3245:ThirdParty/FreeRTOS/tasks.c **** 
3246:ThirdParty/FreeRTOS/tasks.c ****     /* Store the new item value in the event list. */
3247:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3248:ThirdParty/FreeRTOS/tasks.c **** 
3249:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3250:ThirdParty/FreeRTOS/tasks.c ****      * event flags. */
3251:ThirdParty/FreeRTOS/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3252:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
3253:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3254:ThirdParty/FreeRTOS/tasks.c **** 
3255:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3256:ThirdParty/FreeRTOS/tasks.c ****     {
3257:ThirdParty/FreeRTOS/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3258:ThirdParty/FreeRTOS/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3259:ThirdParty/FreeRTOS/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3260:ThirdParty/FreeRTOS/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3261:ThirdParty/FreeRTOS/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3262:ThirdParty/FreeRTOS/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3263:ThirdParty/FreeRTOS/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 64


3264:ThirdParty/FreeRTOS/tasks.c ****          * ensure it is updated at the earliest possible time. */
3265:ThirdParty/FreeRTOS/tasks.c ****         prvResetNextTaskUnblockTime();
3266:ThirdParty/FreeRTOS/tasks.c ****     }
3267:ThirdParty/FreeRTOS/tasks.c ****     #endif
3268:ThirdParty/FreeRTOS/tasks.c **** 
3269:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3270:ThirdParty/FreeRTOS/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3271:ThirdParty/FreeRTOS/tasks.c ****      * lists. */
3272:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3273:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3274:ThirdParty/FreeRTOS/tasks.c **** 
3275:ThirdParty/FreeRTOS/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3276:ThirdParty/FreeRTOS/tasks.c ****     {
3277:ThirdParty/FreeRTOS/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3278:ThirdParty/FreeRTOS/tasks.c ****          * a context switch is required.  This function is called with the
3279:ThirdParty/FreeRTOS/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3280:ThirdParty/FreeRTOS/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3281:ThirdParty/FreeRTOS/tasks.c ****         xYieldPending = pdTRUE;
3282:ThirdParty/FreeRTOS/tasks.c ****     }
3283:ThirdParty/FreeRTOS/tasks.c **** }
3284:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3285:ThirdParty/FreeRTOS/tasks.c **** 
3286:ThirdParty/FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3287:ThirdParty/FreeRTOS/tasks.c **** {
3288:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3289:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3290:ThirdParty/FreeRTOS/tasks.c ****     {
3291:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3292:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3293:ThirdParty/FreeRTOS/tasks.c ****     }
3294:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3295:ThirdParty/FreeRTOS/tasks.c **** }
3296:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3297:ThirdParty/FreeRTOS/tasks.c **** 
3298:ThirdParty/FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3299:ThirdParty/FreeRTOS/tasks.c **** {
3300:ThirdParty/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
3301:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3302:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3303:ThirdParty/FreeRTOS/tasks.c **** }
3304:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:ThirdParty/FreeRTOS/tasks.c **** 
3306:ThirdParty/FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3307:ThirdParty/FreeRTOS/tasks.c ****                                  TickType_t * const pxTicksToWait )
3308:ThirdParty/FreeRTOS/tasks.c **** {
3309:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
3310:ThirdParty/FreeRTOS/tasks.c **** 
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
3312:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
3313:ThirdParty/FreeRTOS/tasks.c **** 
3314:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
3315:ThirdParty/FreeRTOS/tasks.c ****     {
3316:ThirdParty/FreeRTOS/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3317:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3318:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3319:ThirdParty/FreeRTOS/tasks.c **** 
3320:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 65


3321:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3322:ThirdParty/FreeRTOS/tasks.c ****             {
3323:ThirdParty/FreeRTOS/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3324:ThirdParty/FreeRTOS/tasks.c ****                  * but has the same result. */
3325:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3326:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
3327:ThirdParty/FreeRTOS/tasks.c ****             }
3328:ThirdParty/FreeRTOS/tasks.c ****             else
3329:ThirdParty/FreeRTOS/tasks.c ****         #endif
3330:ThirdParty/FreeRTOS/tasks.c **** 
3331:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3332:ThirdParty/FreeRTOS/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3333:ThirdParty/FreeRTOS/tasks.c ****             {
3334:ThirdParty/FreeRTOS/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3335:ThirdParty/FreeRTOS/tasks.c ****                  * specified is the maximum block time then the task should block
3336:ThirdParty/FreeRTOS/tasks.c ****                  * indefinitely, and therefore never time out. */
3337:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
3338:ThirdParty/FreeRTOS/tasks.c ****             }
3339:ThirdParty/FreeRTOS/tasks.c ****             else
3340:ThirdParty/FreeRTOS/tasks.c ****         #endif
3341:ThirdParty/FreeRTOS/tasks.c **** 
3342:ThirdParty/FreeRTOS/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3343:ThirdParty/FreeRTOS/tasks.c ****         {
3344:ThirdParty/FreeRTOS/tasks.c ****             /* The tick count is greater than the time at which
3345:ThirdParty/FreeRTOS/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3346:ThirdParty/FreeRTOS/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3347:ThirdParty/FreeRTOS/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3348:ThirdParty/FreeRTOS/tasks.c ****              * was called. */
3349:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3350:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3351:ThirdParty/FreeRTOS/tasks.c ****         }
3352:ThirdParty/FreeRTOS/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3353:ThirdParty/FreeRTOS/tasks.c ****         {
3354:ThirdParty/FreeRTOS/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3355:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3356:ThirdParty/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3357:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
3358:ThirdParty/FreeRTOS/tasks.c ****         }
3359:ThirdParty/FreeRTOS/tasks.c ****         else
3360:ThirdParty/FreeRTOS/tasks.c ****         {
3361:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3362:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
3363:ThirdParty/FreeRTOS/tasks.c ****         }
3364:ThirdParty/FreeRTOS/tasks.c ****     }
3365:ThirdParty/FreeRTOS/tasks.c ****     taskEXIT_CRITICAL();
3366:ThirdParty/FreeRTOS/tasks.c **** 
3367:ThirdParty/FreeRTOS/tasks.c ****     return xReturn;
3368:ThirdParty/FreeRTOS/tasks.c **** }
3369:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3370:ThirdParty/FreeRTOS/tasks.c **** 
3371:ThirdParty/FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3372:ThirdParty/FreeRTOS/tasks.c **** {
3373:ThirdParty/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
3374:ThirdParty/FreeRTOS/tasks.c **** }
3375:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3376:ThirdParty/FreeRTOS/tasks.c **** 
3377:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 66


3378:ThirdParty/FreeRTOS/tasks.c **** 
3379:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3380:ThirdParty/FreeRTOS/tasks.c ****     {
3381:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3382:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
3383:ThirdParty/FreeRTOS/tasks.c **** 
3384:ThirdParty/FreeRTOS/tasks.c ****         if( xTask != NULL )
3385:ThirdParty/FreeRTOS/tasks.c ****         {
3386:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = xTask;
3387:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3388:ThirdParty/FreeRTOS/tasks.c ****         }
3389:ThirdParty/FreeRTOS/tasks.c ****         else
3390:ThirdParty/FreeRTOS/tasks.c ****         {
3391:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = 0U;
3392:ThirdParty/FreeRTOS/tasks.c ****         }
3393:ThirdParty/FreeRTOS/tasks.c **** 
3394:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
3395:ThirdParty/FreeRTOS/tasks.c ****     }
3396:ThirdParty/FreeRTOS/tasks.c **** 
3397:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3398:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3399:ThirdParty/FreeRTOS/tasks.c **** 
3400:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3401:ThirdParty/FreeRTOS/tasks.c **** 
3402:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3403:ThirdParty/FreeRTOS/tasks.c ****                              const UBaseType_t uxHandle )
3404:ThirdParty/FreeRTOS/tasks.c ****     {
3405:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3406:ThirdParty/FreeRTOS/tasks.c **** 
3407:ThirdParty/FreeRTOS/tasks.c ****         if( xTask != NULL )
3408:ThirdParty/FreeRTOS/tasks.c ****         {
3409:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = xTask;
3410:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3411:ThirdParty/FreeRTOS/tasks.c ****         }
3412:ThirdParty/FreeRTOS/tasks.c ****     }
3413:ThirdParty/FreeRTOS/tasks.c **** 
3414:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3415:ThirdParty/FreeRTOS/tasks.c **** 
3416:ThirdParty/FreeRTOS/tasks.c **** /*
3417:ThirdParty/FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3418:ThirdParty/FreeRTOS/tasks.c ****  * The Idle task.
3419:ThirdParty/FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3420:ThirdParty/FreeRTOS/tasks.c ****  *
3421:ThirdParty/FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3422:ThirdParty/FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3423:ThirdParty/FreeRTOS/tasks.c ****  *
3424:ThirdParty/FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3425:ThirdParty/FreeRTOS/tasks.c ****  *
3426:ThirdParty/FreeRTOS/tasks.c ****  */
3427:ThirdParty/FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3428:ThirdParty/FreeRTOS/tasks.c **** {
3429:ThirdParty/FreeRTOS/tasks.c ****     /* Stop warnings. */
3430:ThirdParty/FreeRTOS/tasks.c ****     ( void ) pvParameters;
3431:ThirdParty/FreeRTOS/tasks.c **** 
3432:ThirdParty/FreeRTOS/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3433:ThirdParty/FreeRTOS/tasks.c ****      * SCHEDULER IS STARTED. **/
3434:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 67


3435:ThirdParty/FreeRTOS/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3436:ThirdParty/FreeRTOS/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3437:ThirdParty/FreeRTOS/tasks.c ****      * any. */
3438:ThirdParty/FreeRTOS/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3439:ThirdParty/FreeRTOS/tasks.c **** 
3440:ThirdParty/FreeRTOS/tasks.c ****     for( ; ; )
3441:ThirdParty/FreeRTOS/tasks.c ****     {
3442:ThirdParty/FreeRTOS/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3443:ThirdParty/FreeRTOS/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3444:ThirdParty/FreeRTOS/tasks.c ****         prvCheckTasksWaitingTermination();
3445:ThirdParty/FreeRTOS/tasks.c **** 
3446:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3447:ThirdParty/FreeRTOS/tasks.c ****         {
3448:ThirdParty/FreeRTOS/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
3449:ThirdParty/FreeRTOS/tasks.c ****              * see if any other task has become available.  If we are using
3450:ThirdParty/FreeRTOS/tasks.c ****              * preemption we don't need to do this as any task becoming available
3451:ThirdParty/FreeRTOS/tasks.c ****              * will automatically get the processor anyway. */
3452:ThirdParty/FreeRTOS/tasks.c ****             taskYIELD();
3453:ThirdParty/FreeRTOS/tasks.c ****         }
3454:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_PREEMPTION */
3455:ThirdParty/FreeRTOS/tasks.c **** 
3456:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3457:ThirdParty/FreeRTOS/tasks.c ****         {
3458:ThirdParty/FreeRTOS/tasks.c ****             /* When using preemption tasks of equal priority will be
3459:ThirdParty/FreeRTOS/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3460:ThirdParty/FreeRTOS/tasks.c ****              * to run then the idle task should yield before the end of the
3461:ThirdParty/FreeRTOS/tasks.c ****              * timeslice.
3462:ThirdParty/FreeRTOS/tasks.c ****              *
3463:ThirdParty/FreeRTOS/tasks.c ****              * A critical region is not required here as we are just reading from
3464:ThirdParty/FreeRTOS/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3465:ThirdParty/FreeRTOS/tasks.c ****              * the ready list at the idle priority contains more than one task
3466:ThirdParty/FreeRTOS/tasks.c ****              * then a task other than the idle task is ready to execute. */
3467:ThirdParty/FreeRTOS/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3468:ThirdParty/FreeRTOS/tasks.c ****             {
3469:ThirdParty/FreeRTOS/tasks.c ****                 taskYIELD();
3470:ThirdParty/FreeRTOS/tasks.c ****             }
3471:ThirdParty/FreeRTOS/tasks.c ****             else
3472:ThirdParty/FreeRTOS/tasks.c ****             {
3473:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3474:ThirdParty/FreeRTOS/tasks.c ****             }
3475:ThirdParty/FreeRTOS/tasks.c ****         }
3476:ThirdParty/FreeRTOS/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3477:ThirdParty/FreeRTOS/tasks.c **** 
3478:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3479:ThirdParty/FreeRTOS/tasks.c ****         {
3480:ThirdParty/FreeRTOS/tasks.c ****             extern void vApplicationIdleHook( void );
3481:ThirdParty/FreeRTOS/tasks.c **** 
3482:ThirdParty/FreeRTOS/tasks.c ****             /* Call the user defined function from within the idle task.  This
3483:ThirdParty/FreeRTOS/tasks.c ****              * allows the application designer to add background functionality
3484:ThirdParty/FreeRTOS/tasks.c ****              * without the overhead of a separate task.
3485:ThirdParty/FreeRTOS/tasks.c ****              * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3486:ThirdParty/FreeRTOS/tasks.c ****              * CALL A FUNCTION THAT MIGHT BLOCK. */
3487:ThirdParty/FreeRTOS/tasks.c ****             vApplicationIdleHook();
3488:ThirdParty/FreeRTOS/tasks.c ****         }
3489:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3490:ThirdParty/FreeRTOS/tasks.c **** 
3491:ThirdParty/FreeRTOS/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 68


3492:ThirdParty/FreeRTOS/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3493:ThirdParty/FreeRTOS/tasks.c ****          * user defined low power mode  implementations require
3494:ThirdParty/FreeRTOS/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3495:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3496:ThirdParty/FreeRTOS/tasks.c ****         {
3497:ThirdParty/FreeRTOS/tasks.c ****             TickType_t xExpectedIdleTime;
3498:ThirdParty/FreeRTOS/tasks.c **** 
3499:ThirdParty/FreeRTOS/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3500:ThirdParty/FreeRTOS/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3501:ThirdParty/FreeRTOS/tasks.c ****              * test of the expected idle time is performed without the
3502:ThirdParty/FreeRTOS/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3503:ThirdParty/FreeRTOS/tasks.c ****              * valid. */
3504:ThirdParty/FreeRTOS/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3505:ThirdParty/FreeRTOS/tasks.c **** 
3506:ThirdParty/FreeRTOS/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3507:ThirdParty/FreeRTOS/tasks.c ****             {
3508:ThirdParty/FreeRTOS/tasks.c ****                 vTaskSuspendAll();
3509:ThirdParty/FreeRTOS/tasks.c ****                 {
3510:ThirdParty/FreeRTOS/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3511:ThirdParty/FreeRTOS/tasks.c ****                      * time can be sampled again, and this time its value can
3512:ThirdParty/FreeRTOS/tasks.c ****                      * be used. */
3513:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3514:ThirdParty/FreeRTOS/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3515:ThirdParty/FreeRTOS/tasks.c **** 
3516:ThirdParty/FreeRTOS/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3517:ThirdParty/FreeRTOS/tasks.c ****                      * if the application does not want
3518:ThirdParty/FreeRTOS/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3519:ThirdParty/FreeRTOS/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3520:ThirdParty/FreeRTOS/tasks.c **** 
3521:ThirdParty/FreeRTOS/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3522:ThirdParty/FreeRTOS/tasks.c ****                     {
3523:ThirdParty/FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3524:ThirdParty/FreeRTOS/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3525:ThirdParty/FreeRTOS/tasks.c ****                         traceLOW_POWER_IDLE_END();
3526:ThirdParty/FreeRTOS/tasks.c ****                     }
3527:ThirdParty/FreeRTOS/tasks.c ****                     else
3528:ThirdParty/FreeRTOS/tasks.c ****                     {
3529:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3530:ThirdParty/FreeRTOS/tasks.c ****                     }
3531:ThirdParty/FreeRTOS/tasks.c ****                 }
3532:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) xTaskResumeAll();
3533:ThirdParty/FreeRTOS/tasks.c ****             }
3534:ThirdParty/FreeRTOS/tasks.c ****             else
3535:ThirdParty/FreeRTOS/tasks.c ****             {
3536:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3537:ThirdParty/FreeRTOS/tasks.c ****             }
3538:ThirdParty/FreeRTOS/tasks.c ****         }
3539:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3540:ThirdParty/FreeRTOS/tasks.c ****     }
3541:ThirdParty/FreeRTOS/tasks.c **** }
3542:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3543:ThirdParty/FreeRTOS/tasks.c **** 
3544:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3545:ThirdParty/FreeRTOS/tasks.c **** 
3546:ThirdParty/FreeRTOS/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3547:ThirdParty/FreeRTOS/tasks.c ****     {
3548:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 69


3549:ThirdParty/FreeRTOS/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3550:ThirdParty/FreeRTOS/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3551:ThirdParty/FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3552:ThirdParty/FreeRTOS/tasks.c **** 
3553:ThirdParty/FreeRTOS/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3554:ThirdParty/FreeRTOS/tasks.c **** 
3555:ThirdParty/FreeRTOS/tasks.c ****         /* This function must be called from a critical section. */
3556:ThirdParty/FreeRTOS/tasks.c **** 
3557:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3558:ThirdParty/FreeRTOS/tasks.c ****         {
3559:ThirdParty/FreeRTOS/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3560:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3561:ThirdParty/FreeRTOS/tasks.c ****         }
3562:ThirdParty/FreeRTOS/tasks.c ****         else if( xYieldPending != pdFALSE )
3563:ThirdParty/FreeRTOS/tasks.c ****         {
3564:ThirdParty/FreeRTOS/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3565:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3566:ThirdParty/FreeRTOS/tasks.c ****         }
3567:ThirdParty/FreeRTOS/tasks.c ****         else if( xPendedTicks != 0 )
3568:ThirdParty/FreeRTOS/tasks.c ****         {
3569:ThirdParty/FreeRTOS/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3570:ThirdParty/FreeRTOS/tasks.c ****              * because the scheduler is suspended. */
3571:ThirdParty/FreeRTOS/tasks.c ****             eReturn = eAbortSleep;
3572:ThirdParty/FreeRTOS/tasks.c ****         }
3573:ThirdParty/FreeRTOS/tasks.c **** 
3574:ThirdParty/FreeRTOS/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3575:ThirdParty/FreeRTOS/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3576:ThirdParty/FreeRTOS/tasks.c ****             {
3577:ThirdParty/FreeRTOS/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3578:ThirdParty/FreeRTOS/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3579:ThirdParty/FreeRTOS/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3580:ThirdParty/FreeRTOS/tasks.c ****                  * interrupts. */
3581:ThirdParty/FreeRTOS/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3582:ThirdParty/FreeRTOS/tasks.c ****             }
3583:ThirdParty/FreeRTOS/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3584:ThirdParty/FreeRTOS/tasks.c ****         else
3585:ThirdParty/FreeRTOS/tasks.c ****         {
3586:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3587:ThirdParty/FreeRTOS/tasks.c ****         }
3588:ThirdParty/FreeRTOS/tasks.c **** 
3589:ThirdParty/FreeRTOS/tasks.c ****         return eReturn;
3590:ThirdParty/FreeRTOS/tasks.c ****     }
3591:ThirdParty/FreeRTOS/tasks.c **** 
3592:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3593:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3594:ThirdParty/FreeRTOS/tasks.c **** 
3595:ThirdParty/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3596:ThirdParty/FreeRTOS/tasks.c **** 
3597:ThirdParty/FreeRTOS/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3598:ThirdParty/FreeRTOS/tasks.c ****                                             BaseType_t xIndex,
3599:ThirdParty/FreeRTOS/tasks.c ****                                             void * pvValue )
3600:ThirdParty/FreeRTOS/tasks.c ****     {
3601:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3602:ThirdParty/FreeRTOS/tasks.c **** 
3603:ThirdParty/FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3604:ThirdParty/FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3605:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 70


3606:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3607:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB != NULL );
3608:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3609:ThirdParty/FreeRTOS/tasks.c ****         }
3610:ThirdParty/FreeRTOS/tasks.c ****     }
3611:ThirdParty/FreeRTOS/tasks.c **** 
3612:ThirdParty/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3613:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3614:ThirdParty/FreeRTOS/tasks.c **** 
3615:ThirdParty/FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3616:ThirdParty/FreeRTOS/tasks.c **** 
3617:ThirdParty/FreeRTOS/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3618:ThirdParty/FreeRTOS/tasks.c ****                                                BaseType_t xIndex )
3619:ThirdParty/FreeRTOS/tasks.c ****     {
3620:ThirdParty/FreeRTOS/tasks.c ****         void * pvReturn = NULL;
3621:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3622:ThirdParty/FreeRTOS/tasks.c **** 
3623:ThirdParty/FreeRTOS/tasks.c ****         if( ( xIndex >= 0 ) &&
3624:ThirdParty/FreeRTOS/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3625:ThirdParty/FreeRTOS/tasks.c ****         {
3626:ThirdParty/FreeRTOS/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3627:ThirdParty/FreeRTOS/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3628:ThirdParty/FreeRTOS/tasks.c ****         }
3629:ThirdParty/FreeRTOS/tasks.c ****         else
3630:ThirdParty/FreeRTOS/tasks.c ****         {
3631:ThirdParty/FreeRTOS/tasks.c ****             pvReturn = NULL;
3632:ThirdParty/FreeRTOS/tasks.c ****         }
3633:ThirdParty/FreeRTOS/tasks.c **** 
3634:ThirdParty/FreeRTOS/tasks.c ****         return pvReturn;
3635:ThirdParty/FreeRTOS/tasks.c ****     }
3636:ThirdParty/FreeRTOS/tasks.c **** 
3637:ThirdParty/FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3638:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3639:ThirdParty/FreeRTOS/tasks.c **** 
3640:ThirdParty/FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3641:ThirdParty/FreeRTOS/tasks.c **** 
3642:ThirdParty/FreeRTOS/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3643:ThirdParty/FreeRTOS/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3644:ThirdParty/FreeRTOS/tasks.c ****     {
3645:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3646:ThirdParty/FreeRTOS/tasks.c **** 
3647:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3648:ThirdParty/FreeRTOS/tasks.c ****          * the calling task. */
3649:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3650:ThirdParty/FreeRTOS/tasks.c **** 
3651:ThirdParty/FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3652:ThirdParty/FreeRTOS/tasks.c ****     }
3653:ThirdParty/FreeRTOS/tasks.c **** 
3654:ThirdParty/FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3655:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3656:ThirdParty/FreeRTOS/tasks.c **** 
3657:ThirdParty/FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3658:ThirdParty/FreeRTOS/tasks.c **** {
3659:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
3660:ThirdParty/FreeRTOS/tasks.c **** 
3661:ThirdParty/FreeRTOS/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3662:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 71


3663:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3664:ThirdParty/FreeRTOS/tasks.c ****     }
3665:ThirdParty/FreeRTOS/tasks.c **** 
3666:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3667:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3668:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
3669:ThirdParty/FreeRTOS/tasks.c **** 
3670:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3671:ThirdParty/FreeRTOS/tasks.c ****     {
3672:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3673:ThirdParty/FreeRTOS/tasks.c ****     }
3674:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3675:ThirdParty/FreeRTOS/tasks.c **** 
3676:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3677:ThirdParty/FreeRTOS/tasks.c ****     {
3678:ThirdParty/FreeRTOS/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3679:ThirdParty/FreeRTOS/tasks.c ****     }
3680:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3681:ThirdParty/FreeRTOS/tasks.c **** 
3682:ThirdParty/FreeRTOS/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3683:ThirdParty/FreeRTOS/tasks.c ****      * using list2. */
3684:ThirdParty/FreeRTOS/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3685:ThirdParty/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3686:ThirdParty/FreeRTOS/tasks.c **** }
3687:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3688:ThirdParty/FreeRTOS/tasks.c **** 
3689:ThirdParty/FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3690:ThirdParty/FreeRTOS/tasks.c **** {
3691:ThirdParty/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3692:ThirdParty/FreeRTOS/tasks.c **** 
3693:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3694:ThirdParty/FreeRTOS/tasks.c ****     {
3695:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3696:ThirdParty/FreeRTOS/tasks.c **** 
3697:ThirdParty/FreeRTOS/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3698:ThirdParty/FreeRTOS/tasks.c ****          * being called too often in the idle task. */
3699:ThirdParty/FreeRTOS/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3700:ThirdParty/FreeRTOS/tasks.c ****         {
3701:ThirdParty/FreeRTOS/tasks.c ****             taskENTER_CRITICAL();
3702:ThirdParty/FreeRTOS/tasks.c ****             {
3703:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
3704:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3705:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
3706:ThirdParty/FreeRTOS/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
3707:ThirdParty/FreeRTOS/tasks.c ****             }
3708:ThirdParty/FreeRTOS/tasks.c ****             taskEXIT_CRITICAL();
3709:ThirdParty/FreeRTOS/tasks.c **** 
3710:ThirdParty/FreeRTOS/tasks.c ****             prvDeleteTCB( pxTCB );
3711:ThirdParty/FreeRTOS/tasks.c ****         }
3712:ThirdParty/FreeRTOS/tasks.c ****     }
3713:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3714:ThirdParty/FreeRTOS/tasks.c **** }
3715:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3716:ThirdParty/FreeRTOS/tasks.c **** 
3717:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3718:ThirdParty/FreeRTOS/tasks.c **** 
3719:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 72


3720:ThirdParty/FreeRTOS/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3721:ThirdParty/FreeRTOS/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3722:ThirdParty/FreeRTOS/tasks.c ****                        eTaskState eState )
3723:ThirdParty/FreeRTOS/tasks.c ****     {
3724:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3725:ThirdParty/FreeRTOS/tasks.c **** 
3726:ThirdParty/FreeRTOS/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3727:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3728:ThirdParty/FreeRTOS/tasks.c **** 
3729:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3730:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3731:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3732:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3733:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3734:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3735:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3736:ThirdParty/FreeRTOS/tasks.c ****         #endif
3737:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3738:ThirdParty/FreeRTOS/tasks.c **** 
3739:ThirdParty/FreeRTOS/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
3740:ThirdParty/FreeRTOS/tasks.c ****         {
3741:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3742:ThirdParty/FreeRTOS/tasks.c ****         }
3743:ThirdParty/FreeRTOS/tasks.c ****         #else
3744:ThirdParty/FreeRTOS/tasks.c ****         {
3745:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3746:ThirdParty/FreeRTOS/tasks.c ****         }
3747:ThirdParty/FreeRTOS/tasks.c ****         #endif
3748:ThirdParty/FreeRTOS/tasks.c **** 
3749:ThirdParty/FreeRTOS/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3750:ThirdParty/FreeRTOS/tasks.c ****         {
3751:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3752:ThirdParty/FreeRTOS/tasks.c ****         }
3753:ThirdParty/FreeRTOS/tasks.c ****         #else
3754:ThirdParty/FreeRTOS/tasks.c ****         {
3755:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3756:ThirdParty/FreeRTOS/tasks.c ****         }
3757:ThirdParty/FreeRTOS/tasks.c ****         #endif
3758:ThirdParty/FreeRTOS/tasks.c **** 
3759:ThirdParty/FreeRTOS/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3760:ThirdParty/FreeRTOS/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3761:ThirdParty/FreeRTOS/tasks.c ****          * state is just set to whatever is passed in. */
3762:ThirdParty/FreeRTOS/tasks.c ****         if( eState != eInvalid )
3763:ThirdParty/FreeRTOS/tasks.c ****         {
3764:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB == pxCurrentTCB )
3765:ThirdParty/FreeRTOS/tasks.c ****             {
3766:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3767:ThirdParty/FreeRTOS/tasks.c ****             }
3768:ThirdParty/FreeRTOS/tasks.c ****             else
3769:ThirdParty/FreeRTOS/tasks.c ****             {
3770:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3771:ThirdParty/FreeRTOS/tasks.c **** 
3772:ThirdParty/FreeRTOS/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3773:ThirdParty/FreeRTOS/tasks.c ****                 {
3774:ThirdParty/FreeRTOS/tasks.c ****                     /* If the task is in the suspended list then there is a
3775:ThirdParty/FreeRTOS/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3776:ThirdParty/FreeRTOS/tasks.c ****                      *  it should be reported as being in the Blocked state. */
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 73


3777:ThirdParty/FreeRTOS/tasks.c ****                     if( eState == eSuspended )
3778:ThirdParty/FreeRTOS/tasks.c ****                     {
3779:ThirdParty/FreeRTOS/tasks.c ****                         vTaskSuspendAll();
3780:ThirdParty/FreeRTOS/tasks.c ****                         {
3781:ThirdParty/FreeRTOS/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3782:ThirdParty/FreeRTOS/tasks.c ****                             {
3783:ThirdParty/FreeRTOS/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3784:ThirdParty/FreeRTOS/tasks.c ****                             }
3785:ThirdParty/FreeRTOS/tasks.c ****                         }
3786:ThirdParty/FreeRTOS/tasks.c ****                         ( void ) xTaskResumeAll();
3787:ThirdParty/FreeRTOS/tasks.c ****                     }
3788:ThirdParty/FreeRTOS/tasks.c ****                 }
3789:ThirdParty/FreeRTOS/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3790:ThirdParty/FreeRTOS/tasks.c ****             }
3791:ThirdParty/FreeRTOS/tasks.c ****         }
3792:ThirdParty/FreeRTOS/tasks.c ****         else
3793:ThirdParty/FreeRTOS/tasks.c ****         {
3794:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3795:ThirdParty/FreeRTOS/tasks.c ****         }
3796:ThirdParty/FreeRTOS/tasks.c **** 
3797:ThirdParty/FreeRTOS/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3798:ThirdParty/FreeRTOS/tasks.c ****          * parameter is provided to allow it to be skipped. */
3799:ThirdParty/FreeRTOS/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3800:ThirdParty/FreeRTOS/tasks.c ****         {
3801:ThirdParty/FreeRTOS/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3802:ThirdParty/FreeRTOS/tasks.c ****             {
3803:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3804:ThirdParty/FreeRTOS/tasks.c ****             }
3805:ThirdParty/FreeRTOS/tasks.c ****             #else
3806:ThirdParty/FreeRTOS/tasks.c ****             {
3807:ThirdParty/FreeRTOS/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3808:ThirdParty/FreeRTOS/tasks.c ****             }
3809:ThirdParty/FreeRTOS/tasks.c ****             #endif
3810:ThirdParty/FreeRTOS/tasks.c ****         }
3811:ThirdParty/FreeRTOS/tasks.c ****         else
3812:ThirdParty/FreeRTOS/tasks.c ****         {
3813:ThirdParty/FreeRTOS/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3814:ThirdParty/FreeRTOS/tasks.c ****         }
3815:ThirdParty/FreeRTOS/tasks.c ****     }
3816:ThirdParty/FreeRTOS/tasks.c **** 
3817:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3818:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3819:ThirdParty/FreeRTOS/tasks.c **** 
3820:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3821:ThirdParty/FreeRTOS/tasks.c **** 
3822:ThirdParty/FreeRTOS/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3823:ThirdParty/FreeRTOS/tasks.c ****                                                      List_t * pxList,
3824:ThirdParty/FreeRTOS/tasks.c ****                                                      eTaskState eState )
3825:ThirdParty/FreeRTOS/tasks.c ****     {
3826:ThirdParty/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3827:ThirdParty/FreeRTOS/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3828:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxTask = 0;
3829:ThirdParty/FreeRTOS/tasks.c **** 
3830:ThirdParty/FreeRTOS/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3831:ThirdParty/FreeRTOS/tasks.c ****         {
3832:ThirdParty/FreeRTOS/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3833:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 74


3834:ThirdParty/FreeRTOS/tasks.c ****             /* Populate an TaskStatus_t structure within the
3835:ThirdParty/FreeRTOS/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3836:ThirdParty/FreeRTOS/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3837:ThirdParty/FreeRTOS/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3838:ThirdParty/FreeRTOS/tasks.c ****             do
3839:ThirdParty/FreeRTOS/tasks.c ****             {
3840:ThirdParty/FreeRTOS/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3841:ThirdParty/FreeRTOS/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3842:ThirdParty/FreeRTOS/tasks.c ****                 uxTask++;
3843:ThirdParty/FreeRTOS/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3844:ThirdParty/FreeRTOS/tasks.c ****         }
3845:ThirdParty/FreeRTOS/tasks.c ****         else
3846:ThirdParty/FreeRTOS/tasks.c ****         {
3847:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3848:ThirdParty/FreeRTOS/tasks.c ****         }
3849:ThirdParty/FreeRTOS/tasks.c **** 
3850:ThirdParty/FreeRTOS/tasks.c ****         return uxTask;
3851:ThirdParty/FreeRTOS/tasks.c ****     }
3852:ThirdParty/FreeRTOS/tasks.c **** 
3853:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3854:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3855:ThirdParty/FreeRTOS/tasks.c **** 
3856:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3857:ThirdParty/FreeRTOS/tasks.c **** 
3858:ThirdParty/FreeRTOS/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3859:ThirdParty/FreeRTOS/tasks.c ****     {
3860:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulCount = 0U;
3861:ThirdParty/FreeRTOS/tasks.c **** 
3862:ThirdParty/FreeRTOS/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3863:ThirdParty/FreeRTOS/tasks.c ****         {
3864:ThirdParty/FreeRTOS/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
3865:ThirdParty/FreeRTOS/tasks.c ****             ulCount++;
3866:ThirdParty/FreeRTOS/tasks.c ****         }
3867:ThirdParty/FreeRTOS/tasks.c **** 
3868:ThirdParty/FreeRTOS/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3869:ThirdParty/FreeRTOS/tasks.c **** 
3870:ThirdParty/FreeRTOS/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3871:ThirdParty/FreeRTOS/tasks.c ****     }
3872:ThirdParty/FreeRTOS/tasks.c **** 
3873:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3874:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3875:ThirdParty/FreeRTOS/tasks.c **** 
3876:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3877:ThirdParty/FreeRTOS/tasks.c **** 
3878:ThirdParty/FreeRTOS/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3879:ThirdParty/FreeRTOS/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3880:ThirdParty/FreeRTOS/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3881:ThirdParty/FreeRTOS/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3882:ThirdParty/FreeRTOS/tasks.c ****  * applications that expect an 8-bit return type. */
3883:ThirdParty/FreeRTOS/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3884:ThirdParty/FreeRTOS/tasks.c ****     {
3885:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3886:ThirdParty/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3887:ThirdParty/FreeRTOS/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3888:ThirdParty/FreeRTOS/tasks.c **** 
3889:ThirdParty/FreeRTOS/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3890:ThirdParty/FreeRTOS/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 75


3891:ThirdParty/FreeRTOS/tasks.c ****          * allows the user to determine the return type.  It gets around the
3892:ThirdParty/FreeRTOS/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3893:ThirdParty/FreeRTOS/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3894:ThirdParty/FreeRTOS/tasks.c ****          * type. */
3895:ThirdParty/FreeRTOS/tasks.c **** 
3896:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3897:ThirdParty/FreeRTOS/tasks.c **** 
3898:ThirdParty/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3899:ThirdParty/FreeRTOS/tasks.c ****         {
3900:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3901:ThirdParty/FreeRTOS/tasks.c ****         }
3902:ThirdParty/FreeRTOS/tasks.c ****         #else
3903:ThirdParty/FreeRTOS/tasks.c ****         {
3904:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3905:ThirdParty/FreeRTOS/tasks.c ****         }
3906:ThirdParty/FreeRTOS/tasks.c ****         #endif
3907:ThirdParty/FreeRTOS/tasks.c **** 
3908:ThirdParty/FreeRTOS/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3909:ThirdParty/FreeRTOS/tasks.c **** 
3910:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
3911:ThirdParty/FreeRTOS/tasks.c ****     }
3912:ThirdParty/FreeRTOS/tasks.c **** 
3913:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3914:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3915:ThirdParty/FreeRTOS/tasks.c **** 
3916:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3917:ThirdParty/FreeRTOS/tasks.c **** 
3918:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3919:ThirdParty/FreeRTOS/tasks.c ****     {
3920:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
3921:ThirdParty/FreeRTOS/tasks.c ****         uint8_t * pucEndOfStack;
3922:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
3923:ThirdParty/FreeRTOS/tasks.c **** 
3924:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3925:ThirdParty/FreeRTOS/tasks.c **** 
3926:ThirdParty/FreeRTOS/tasks.c ****         #if portSTACK_GROWTH < 0
3927:ThirdParty/FreeRTOS/tasks.c ****         {
3928:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3929:ThirdParty/FreeRTOS/tasks.c ****         }
3930:ThirdParty/FreeRTOS/tasks.c ****         #else
3931:ThirdParty/FreeRTOS/tasks.c ****         {
3932:ThirdParty/FreeRTOS/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3933:ThirdParty/FreeRTOS/tasks.c ****         }
3934:ThirdParty/FreeRTOS/tasks.c ****         #endif
3935:ThirdParty/FreeRTOS/tasks.c **** 
3936:ThirdParty/FreeRTOS/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3937:ThirdParty/FreeRTOS/tasks.c **** 
3938:ThirdParty/FreeRTOS/tasks.c ****         return uxReturn;
3939:ThirdParty/FreeRTOS/tasks.c ****     }
3940:ThirdParty/FreeRTOS/tasks.c **** 
3941:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3942:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3943:ThirdParty/FreeRTOS/tasks.c **** 
3944:ThirdParty/FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3945:ThirdParty/FreeRTOS/tasks.c **** 
3946:ThirdParty/FreeRTOS/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
3947:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 76


3948:ThirdParty/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
3949:ThirdParty/FreeRTOS/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3950:ThirdParty/FreeRTOS/tasks.c ****          * want to allocate and clean RAM statically. */
3951:ThirdParty/FreeRTOS/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
3952:ThirdParty/FreeRTOS/tasks.c **** 
3953:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
3954:ThirdParty/FreeRTOS/tasks.c ****         {
3955:ThirdParty/FreeRTOS/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
3956:ThirdParty/FreeRTOS/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3957:ThirdParty/FreeRTOS/tasks.c ****         }
3958:ThirdParty/FreeRTOS/tasks.c ****         #endif
3959:ThirdParty/FreeRTOS/tasks.c **** 
3960:ThirdParty/FreeRTOS/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3961:ThirdParty/FreeRTOS/tasks.c ****         {
3962:ThirdParty/FreeRTOS/tasks.c ****             /* The task can only have been allocated dynamically - free both
3963:ThirdParty/FreeRTOS/tasks.c ****              * the stack and TCB. */
3964:ThirdParty/FreeRTOS/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
3965:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTCB );
3966:ThirdParty/FreeRTOS/tasks.c ****         }
3967:ThirdParty/FreeRTOS/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3968:ThirdParty/FreeRTOS/tasks.c ****         {
3969:ThirdParty/FreeRTOS/tasks.c ****             /* The task could have been allocated statically or dynamically, so
3970:ThirdParty/FreeRTOS/tasks.c ****              * check what was statically allocated before trying to free the
3971:ThirdParty/FreeRTOS/tasks.c ****              * memory. */
3972:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3973:ThirdParty/FreeRTOS/tasks.c ****             {
3974:ThirdParty/FreeRTOS/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
3975:ThirdParty/FreeRTOS/tasks.c ****                  * must be freed. */
3976:ThirdParty/FreeRTOS/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
3977:ThirdParty/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3978:ThirdParty/FreeRTOS/tasks.c ****             }
3979:ThirdParty/FreeRTOS/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3980:ThirdParty/FreeRTOS/tasks.c ****             {
3981:ThirdParty/FreeRTOS/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
3982:ThirdParty/FreeRTOS/tasks.c ****                  * only memory that must be freed. */
3983:ThirdParty/FreeRTOS/tasks.c ****                 vPortFree( pxTCB );
3984:ThirdParty/FreeRTOS/tasks.c ****             }
3985:ThirdParty/FreeRTOS/tasks.c ****             else
3986:ThirdParty/FreeRTOS/tasks.c ****             {
3987:ThirdParty/FreeRTOS/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
3988:ThirdParty/FreeRTOS/tasks.c ****                  * nothing needs to be freed. */
3989:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
3990:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3991:ThirdParty/FreeRTOS/tasks.c ****             }
3992:ThirdParty/FreeRTOS/tasks.c ****         }
3993:ThirdParty/FreeRTOS/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3994:ThirdParty/FreeRTOS/tasks.c ****     }
3995:ThirdParty/FreeRTOS/tasks.c **** 
3996:ThirdParty/FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3997:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3998:ThirdParty/FreeRTOS/tasks.c **** 
3999:ThirdParty/FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4000:ThirdParty/FreeRTOS/tasks.c **** {
 123              		.loc 1 4000 1 is_stmt 1 view -0
 124              		.cfi_startproc
 125              		@ args = 0, pretend = 0, frame = 0
 126              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 77


 127              		@ link register save eliminated.
4001:ThirdParty/FreeRTOS/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 128              		.loc 1 4001 5 view .LVU30
 129              		.loc 1 4001 9 is_stmt 0 view .LVU31
 130 0000 074B     		ldr	r3, .L15
 131 0002 1B68     		ldr	r3, [r3]
 132 0004 1B68     		ldr	r3, [r3]
 133              		.loc 1 4001 7 view .LVU32
 134 0006 23B9     		cbnz	r3, .L13
4002:ThirdParty/FreeRTOS/tasks.c ****     {
4003:ThirdParty/FreeRTOS/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4004:ThirdParty/FreeRTOS/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4005:ThirdParty/FreeRTOS/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4006:ThirdParty/FreeRTOS/tasks.c ****          * there is an item in the delayed list. */
4007:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 135              		.loc 1 4007 9 is_stmt 1 view .LVU33
 136              		.loc 1 4007 30 is_stmt 0 view .LVU34
 137 0008 064B     		ldr	r3, .L15+4
 138 000a 4FF0FF32 		mov	r2, #-1
 139 000e 1A60     		str	r2, [r3]
 140 0010 7047     		bx	lr
 141              	.L13:
4008:ThirdParty/FreeRTOS/tasks.c ****     }
4009:ThirdParty/FreeRTOS/tasks.c ****     else
4010:ThirdParty/FreeRTOS/tasks.c ****     {
4011:ThirdParty/FreeRTOS/tasks.c ****         /* The new current delayed list is not empty, get the value of
4012:ThirdParty/FreeRTOS/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4013:ThirdParty/FreeRTOS/tasks.c ****          * which the task at the head of the delayed list should be removed
4014:ThirdParty/FreeRTOS/tasks.c ****          * from the Blocked state. */
4015:ThirdParty/FreeRTOS/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 142              		.loc 1 4015 9 is_stmt 1 view .LVU35
 143              		.loc 1 4015 32 is_stmt 0 view .LVU36
 144 0012 034B     		ldr	r3, .L15
 145 0014 1B68     		ldr	r3, [r3]
 146 0016 DB68     		ldr	r3, [r3, #12]
 147 0018 1A68     		ldr	r2, [r3]
 148              		.loc 1 4015 30 view .LVU37
 149 001a 024B     		ldr	r3, .L15+4
 150 001c 1A60     		str	r2, [r3]
4016:ThirdParty/FreeRTOS/tasks.c ****     }
4017:ThirdParty/FreeRTOS/tasks.c **** }
 151              		.loc 1 4017 1 view .LVU38
 152 001e 7047     		bx	lr
 153              	.L16:
 154              		.align	2
 155              	.L15:
 156 0020 00000000 		.word	pxDelayedTaskList
 157 0024 00000000 		.word	xNextTaskUnblockTime
 158              		.cfi_endproc
 159              	.LFE41:
 161              		.section	.text.prvDeleteTCB,"ax",%progbits
 162              		.align	1
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 167              	prvDeleteTCB:
 168              	.LVL8:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 78


 169              	.LFB40:
3947:ThirdParty/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 170              		.loc 1 3947 5 is_stmt 1 view -0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
3947:ThirdParty/FreeRTOS/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 174              		.loc 1 3947 5 is_stmt 0 view .LVU40
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI0:
 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180 0002 0446     		mov	r4, r0
3951:ThirdParty/FreeRTOS/tasks.c **** 
 181              		.loc 1 3951 9 is_stmt 1 view .LVU41
3964:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTCB );
 182              		.loc 1 3964 13 view .LVU42
 183 0004 006B     		ldr	r0, [r0, #48]
 184              	.LVL9:
3964:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTCB );
 185              		.loc 1 3964 13 is_stmt 0 view .LVU43
 186 0006 FFF7FEFF 		bl	vPortFree
 187              	.LVL10:
3965:ThirdParty/FreeRTOS/tasks.c ****         }
 188              		.loc 1 3965 13 is_stmt 1 view .LVU44
 189 000a 2046     		mov	r0, r4
 190 000c FFF7FEFF 		bl	vPortFree
 191              	.LVL11:
3994:ThirdParty/FreeRTOS/tasks.c **** 
 192              		.loc 1 3994 5 is_stmt 0 view .LVU45
 193 0010 10BD     		pop	{r4, pc}
3994:ThirdParty/FreeRTOS/tasks.c **** 
 194              		.loc 1 3994 5 view .LVU46
 195              		.cfi_endproc
 196              	.LFE40:
 198              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 199              		.align	1
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 204              	prvInitialiseNewTask:
 205              	.LVL12:
 206              	.LFB6:
 824:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 207              		.loc 1 824 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 16, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 824:ThirdParty/FreeRTOS/tasks.c ****     StackType_t * pxTopOfStack;
 211              		.loc 1 824 1 is_stmt 0 view .LVU48
 212 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 213              	.LCFI1:
 214              		.cfi_def_cfa_offset 24
 215              		.cfi_offset 4, -24
 216              		.cfi_offset 5, -20
 217              		.cfi_offset 6, -16
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 79


 218              		.cfi_offset 7, -12
 219              		.cfi_offset 8, -8
 220              		.cfi_offset 14, -4
 221 0004 0546     		mov	r5, r0
 222 0006 1E46     		mov	r6, r3
 223 0008 069F     		ldr	r7, [sp, #24]
 224 000a 089C     		ldr	r4, [sp, #32]
 825:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t x;
 225              		.loc 1 825 5 is_stmt 1 view .LVU49
 826:ThirdParty/FreeRTOS/tasks.c **** 
 226              		.loc 1 826 5 view .LVU50
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 227              		.loc 1 857 9 view .LVU51
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 228              		.loc 1 857 35 is_stmt 0 view .LVU52
 229 000c 236B     		ldr	r3, [r4, #48]
 230              	.LVL13:
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 231              		.loc 1 857 44 view .LVU53
 232 000e 02F18042 		add	r2, r2, #1073741824
 233              	.LVL14:
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 234              		.loc 1 857 44 view .LVU54
 235 0012 013A     		subs	r2, r2, #1
 236              	.LVL15:
 857:ThirdParty/FreeRTOS/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 237              		.loc 1 857 22 view .LVU55
 238 0014 03EB8203 		add	r3, r3, r2, lsl #2
 239              	.LVL16:
 858:ThirdParty/FreeRTOS/tasks.c **** 
 240              		.loc 1 858 9 is_stmt 1 view .LVU56
 858:ThirdParty/FreeRTOS/tasks.c **** 
 241              		.loc 1 858 87 is_stmt 0 view .LVU57
 242 0018 23F00708 		bic	r8, r3, #7
 243              	.LVL17:
 861:ThirdParty/FreeRTOS/tasks.c **** 
 244              		.loc 1 861 9 is_stmt 1 view .LVU58
 861:ThirdParty/FreeRTOS/tasks.c **** 
 245              		.loc 1 861 130 discriminator 2 view .LVU59
 885:ThirdParty/FreeRTOS/tasks.c ****     {
 246              		.loc 1 885 5 view .LVU60
 885:ThirdParty/FreeRTOS/tasks.c ****     {
 247              		.loc 1 885 7 is_stmt 0 view .LVU61
 248 001c 71B1     		cbz	r1, .L21
 249 001e 0B46     		mov	r3, r1
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 250              		.loc 1 887 16 view .LVU62
 251 0020 0022     		movs	r2, #0
 252              	.LVL18:
 253              	.L20:
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 254              		.loc 1 887 39 is_stmt 1 discriminator 1 view .LVU63
 255 0022 092A     		cmp	r2, #9
 256 0024 07D8     		bhi	.L22
 889:ThirdParty/FreeRTOS/tasks.c **** 
 257              		.loc 1 889 13 view .LVU64
 889:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 80


 258              		.loc 1 889 47 is_stmt 0 view .LVU65
 259 0026 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 889:ThirdParty/FreeRTOS/tasks.c **** 
 260              		.loc 1 889 39 view .LVU66
 261 0028 04EB020C 		add	ip, r4, r2
 262 002c 8CF83410 		strb	r1, [ip, #52]
 894:ThirdParty/FreeRTOS/tasks.c ****             {
 263              		.loc 1 894 13 is_stmt 1 view .LVU67
 894:ThirdParty/FreeRTOS/tasks.c ****             {
 264              		.loc 1 894 15 is_stmt 0 view .LVU68
 265 0030 09B1     		cbz	r1, .L22
 900:ThirdParty/FreeRTOS/tasks.c ****             }
 266              		.loc 1 900 41 is_stmt 1 view .LVU69
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 267              		.loc 1 887 83 discriminator 2 view .LVU70
 268 0032 0132     		adds	r2, r2, #1
 269              	.LVL19:
 887:ThirdParty/FreeRTOS/tasks.c ****         {
 270              		.loc 1 887 83 is_stmt 0 discriminator 2 view .LVU71
 271 0034 F5E7     		b	.L20
 272              	.L22:
 906:ThirdParty/FreeRTOS/tasks.c ****     }
 273              		.loc 1 906 9 is_stmt 1 view .LVU72
 906:ThirdParty/FreeRTOS/tasks.c ****     }
 274              		.loc 1 906 61 is_stmt 0 view .LVU73
 275 0036 0023     		movs	r3, #0
 276              	.LVL20:
 906:ThirdParty/FreeRTOS/tasks.c ****     }
 277              		.loc 1 906 61 view .LVU74
 278 0038 84F83D30 		strb	r3, [r4, #61]
 279              	.LVL21:
 280              	.L21:
 910:ThirdParty/FreeRTOS/tasks.c ****     }
 281              		.loc 1 910 33 is_stmt 1 view .LVU75
 914:ThirdParty/FreeRTOS/tasks.c **** 
 282              		.loc 1 914 5 view .LVU76
 283 003c 042F     		cmp	r7, #4
 284 003e 08D9     		bls	.L24
 914:ThirdParty/FreeRTOS/tasks.c **** 
 285              		.loc 1 914 5 discriminator 1 view .LVU77
 286              	.LBB141:
 287              	.LBI141:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 288              		.loc 2 196 34 view .LVU78
 289              	.LBB142:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 290              		.loc 2 198 9 view .LVU79
 291              		.loc 2 200 9 view .LVU80
 292              		.syntax unified
 293              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 294 0040 4FF05003 			mov r3, #80												
 295 0044 83F31188 		msr basepri, r3											
 296 0048 BFF36F8F 		isb														
 297 004c BFF34F8F 		dsb														
 298              	
 299              	@ 0 "" 2
 300              		.thumb
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 81


 301              		.syntax unified
 302              	.L25:
 303              	.LBE142:
 304              	.LBE141:
 914:ThirdParty/FreeRTOS/tasks.c **** 
 305              		.loc 1 914 5 discriminator 3 view .LVU81
 914:ThirdParty/FreeRTOS/tasks.c **** 
 306              		.loc 1 914 5 discriminator 3 view .LVU82
 307 0050 FEE7     		b	.L25
 308              	.L24:
 914:ThirdParty/FreeRTOS/tasks.c **** 
 309              		.loc 1 914 54 discriminator 2 view .LVU83
 916:ThirdParty/FreeRTOS/tasks.c ****     {
 310              		.loc 1 916 5 view .LVU84
 311              	.LVL22:
 922:ThirdParty/FreeRTOS/tasks.c ****     }
 312              		.loc 1 922 33 view .LVU85
 925:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 313              		.loc 1 925 5 view .LVU86
 925:ThirdParty/FreeRTOS/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 314              		.loc 1 925 26 is_stmt 0 view .LVU87
 315 0052 E762     		str	r7, [r4, #44]
 932:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 316              		.loc 1 932 5 is_stmt 1 view .LVU88
 317 0054 201D     		adds	r0, r4, #4
 318              	.LVL23:
 932:ThirdParty/FreeRTOS/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 319              		.loc 1 932 5 is_stmt 0 view .LVU89
 320 0056 FFF7FEFF 		bl	vListInitialiseItem
 321              	.LVL24:
 933:ThirdParty/FreeRTOS/tasks.c **** 
 322              		.loc 1 933 5 is_stmt 1 view .LVU90
 323 005a 04F11800 		add	r0, r4, #24
 324 005e FFF7FEFF 		bl	vListInitialiseItem
 325              	.LVL25:
 937:ThirdParty/FreeRTOS/tasks.c **** 
 326              		.loc 1 937 5 view .LVU91
 327 0062 2461     		str	r4, [r4, #16]
 940:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 328              		.loc 1 940 5 view .LVU92
 329 0064 C7F10507 		rsb	r7, r7, #5
 330              	.LVL26:
 940:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 331              		.loc 1 940 5 is_stmt 0 view .LVU93
 332 0068 A761     		str	r7, [r4, #24]
 941:ThirdParty/FreeRTOS/tasks.c **** 
 333              		.loc 1 941 5 is_stmt 1 view .LVU94
 334 006a 6462     		str	r4, [r4, #36]
 950:ThirdParty/FreeRTOS/tasks.c ****     }
 335              		.loc 1 950 9 view .LVU95
1007:ThirdParty/FreeRTOS/tasks.c ****         }
 336              		.loc 1 1007 13 view .LVU96
1007:ThirdParty/FreeRTOS/tasks.c ****         }
 337              		.loc 1 1007 38 is_stmt 0 view .LVU97
 338 006c 3246     		mov	r2, r6
 339 006e 2946     		mov	r1, r5
 340 0070 4046     		mov	r0, r8
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 82


 341 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 342              	.LVL27:
1007:ThirdParty/FreeRTOS/tasks.c ****         }
 343              		.loc 1 1007 36 discriminator 1 view .LVU98
 344 0076 2060     		str	r0, [r4]
1013:ThirdParty/FreeRTOS/tasks.c ****     {
 345              		.loc 1 1013 5 is_stmt 1 view .LVU99
1013:ThirdParty/FreeRTOS/tasks.c ****     {
 346              		.loc 1 1013 7 is_stmt 0 view .LVU100
 347 0078 079B     		ldr	r3, [sp, #28]
 348 007a 03B1     		cbz	r3, .L19
1017:ThirdParty/FreeRTOS/tasks.c ****     }
 349              		.loc 1 1017 9 is_stmt 1 view .LVU101
1017:ThirdParty/FreeRTOS/tasks.c ****     }
 350              		.loc 1 1017 24 is_stmt 0 view .LVU102
 351 007c 1C60     		str	r4, [r3]
1021:ThirdParty/FreeRTOS/tasks.c ****     }
 352              		.loc 1 1021 33 is_stmt 1 view .LVU103
 353              	.L19:
1023:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 354              		.loc 1 1023 1 is_stmt 0 view .LVU104
 355 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
1023:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 356              		.loc 1 1023 1 view .LVU105
 357              		.cfi_endproc
 358              	.LFE6:
 360              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 361              		.align	1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 366              	prvInitialiseTaskLists:
 367              	.LFB38:
3658:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxPriority;
 368              		.loc 1 3658 1 is_stmt 1 view -0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372 0000 38B5     		push	{r3, r4, r5, lr}
 373              	.LCFI2:
 374              		.cfi_def_cfa_offset 16
 375              		.cfi_offset 3, -16
 376              		.cfi_offset 4, -12
 377              		.cfi_offset 5, -8
 378              		.cfi_offset 14, -4
3659:ThirdParty/FreeRTOS/tasks.c **** 
 379              		.loc 1 3659 5 view .LVU107
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 380              		.loc 1 3661 5 view .LVU108
 381              	.LVL28:
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 382              		.loc 1 3661 21 is_stmt 0 view .LVU109
 383 0002 0024     		movs	r4, #0
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 384              		.loc 1 3661 5 view .LVU110
 385 0004 07E0     		b	.L30
 386              	.LVL29:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 83


 387              	.L31:
3663:ThirdParty/FreeRTOS/tasks.c ****     }
 388              		.loc 1 3663 9 is_stmt 1 view .LVU111
 389 0006 04EB8402 		add	r2, r4, r4, lsl #2
 390 000a 9300     		lsls	r3, r2, #2
 391 000c 0E48     		ldr	r0, .L33
 392 000e 1844     		add	r0, r0, r3
 393 0010 FFF7FEFF 		bl	vListInitialise
 394              	.LVL30:
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 395              		.loc 1 3661 104 discriminator 3 view .LVU112
 396 0014 0134     		adds	r4, r4, #1
 397              	.LVL31:
 398              	.L30:
3661:ThirdParty/FreeRTOS/tasks.c ****     {
 399              		.loc 1 3661 54 discriminator 1 view .LVU113
 400 0016 042C     		cmp	r4, #4
 401 0018 F5D9     		bls	.L31
3666:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 402              		.loc 1 3666 5 view .LVU114
 403 001a 0C4D     		ldr	r5, .L33+4
 404 001c 2846     		mov	r0, r5
 405 001e FFF7FEFF 		bl	vListInitialise
 406              	.LVL32:
3667:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 407              		.loc 1 3667 5 view .LVU115
 408 0022 0B4C     		ldr	r4, .L33+8
 409              	.LVL33:
3667:ThirdParty/FreeRTOS/tasks.c ****     vListInitialise( &xPendingReadyList );
 410              		.loc 1 3667 5 is_stmt 0 view .LVU116
 411 0024 2046     		mov	r0, r4
 412 0026 FFF7FEFF 		bl	vListInitialise
 413              	.LVL34:
3668:ThirdParty/FreeRTOS/tasks.c **** 
 414              		.loc 1 3668 5 is_stmt 1 view .LVU117
 415 002a 0A48     		ldr	r0, .L33+12
 416 002c FFF7FEFF 		bl	vListInitialise
 417              	.LVL35:
3672:ThirdParty/FreeRTOS/tasks.c ****     }
 418              		.loc 1 3672 9 view .LVU118
 419 0030 0948     		ldr	r0, .L33+16
 420 0032 FFF7FEFF 		bl	vListInitialise
 421              	.LVL36:
3678:ThirdParty/FreeRTOS/tasks.c ****     }
 422              		.loc 1 3678 9 view .LVU119
 423 0036 0948     		ldr	r0, .L33+20
 424 0038 FFF7FEFF 		bl	vListInitialise
 425              	.LVL37:
3684:ThirdParty/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 426              		.loc 1 3684 5 view .LVU120
3684:ThirdParty/FreeRTOS/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 427              		.loc 1 3684 23 is_stmt 0 view .LVU121
 428 003c 084B     		ldr	r3, .L33+24
 429 003e 1D60     		str	r5, [r3]
3685:ThirdParty/FreeRTOS/tasks.c **** }
 430              		.loc 1 3685 5 is_stmt 1 view .LVU122
3685:ThirdParty/FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 84


 431              		.loc 1 3685 31 is_stmt 0 view .LVU123
 432 0040 084B     		ldr	r3, .L33+28
 433 0042 1C60     		str	r4, [r3]
3686:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 434              		.loc 1 3686 1 view .LVU124
 435 0044 38BD     		pop	{r3, r4, r5, pc}
 436              	.L34:
 437 0046 00BF     		.align	2
 438              	.L33:
 439 0048 00000000 		.word	pxReadyTasksLists
 440 004c 00000000 		.word	xDelayedTaskList1
 441 0050 00000000 		.word	xDelayedTaskList2
 442 0054 00000000 		.word	xPendingReadyList
 443 0058 00000000 		.word	xTasksWaitingTermination
 444 005c 00000000 		.word	xSuspendedTaskList
 445 0060 00000000 		.word	pxDelayedTaskList
 446 0064 00000000 		.word	pxOverflowDelayedTaskList
 447              		.cfi_endproc
 448              	.LFE38:
 450              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 451              		.align	1
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 456              	prvAddNewTaskToReadyList:
 457              	.LVL38:
 458              	.LFB7:
1027:ThirdParty/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 459              		.loc 1 1027 1 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
1027:ThirdParty/FreeRTOS/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 463              		.loc 1 1027 1 is_stmt 0 view .LVU126
 464 0000 10B5     		push	{r4, lr}
 465              	.LCFI3:
 466              		.cfi_def_cfa_offset 8
 467              		.cfi_offset 4, -8
 468              		.cfi_offset 14, -4
 469 0002 0446     		mov	r4, r0
1030:ThirdParty/FreeRTOS/tasks.c ****     {
 470              		.loc 1 1030 5 is_stmt 1 view .LVU127
 471 0004 FFF7FEFF 		bl	vPortEnterCritical
 472              	.LVL39:
1032:ThirdParty/FreeRTOS/tasks.c **** 
 473              		.loc 1 1032 9 view .LVU128
1032:ThirdParty/FreeRTOS/tasks.c **** 
 474              		.loc 1 1032 31 is_stmt 0 view .LVU129
 475 0008 284A     		ldr	r2, .L42
 476 000a 1368     		ldr	r3, [r2]
 477 000c 0133     		adds	r3, r3, #1
 478 000e 1360     		str	r3, [r2]
1034:ThirdParty/FreeRTOS/tasks.c ****         {
 479              		.loc 1 1034 9 is_stmt 1 view .LVU130
1034:ThirdParty/FreeRTOS/tasks.c ****         {
 480              		.loc 1 1034 26 is_stmt 0 view .LVU131
 481 0010 274B     		ldr	r3, .L42+4
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 85


 482 0012 1B68     		ldr	r3, [r3]
1034:ThirdParty/FreeRTOS/tasks.c ****         {
 483              		.loc 1 1034 11 view .LVU132
 484 0014 5BB1     		cbz	r3, .L40
1057:ThirdParty/FreeRTOS/tasks.c ****             {
 485              		.loc 1 1057 13 is_stmt 1 view .LVU133
1057:ThirdParty/FreeRTOS/tasks.c ****             {
 486              		.loc 1 1057 35 is_stmt 0 view .LVU134
 487 0016 274B     		ldr	r3, .L42+8
 488 0018 1B68     		ldr	r3, [r3]
1057:ThirdParty/FreeRTOS/tasks.c ****             {
 489              		.loc 1 1057 15 view .LVU135
 490 001a 6BB9     		cbnz	r3, .L37
1059:ThirdParty/FreeRTOS/tasks.c ****                 {
 491              		.loc 1 1059 17 is_stmt 1 view .LVU136
1059:ThirdParty/FreeRTOS/tasks.c ****                 {
 492              		.loc 1 1059 33 is_stmt 0 view .LVU137
 493 001c 244B     		ldr	r3, .L42+4
 494 001e 1B68     		ldr	r3, [r3]
 495 0020 DA6A     		ldr	r2, [r3, #44]
1059:ThirdParty/FreeRTOS/tasks.c ****                 {
 496              		.loc 1 1059 57 view .LVU138
 497 0022 E36A     		ldr	r3, [r4, #44]
1059:ThirdParty/FreeRTOS/tasks.c ****                 {
 498              		.loc 1 1059 19 view .LVU139
 499 0024 9A42     		cmp	r2, r3
 500 0026 07D8     		bhi	.L37
1061:ThirdParty/FreeRTOS/tasks.c ****                 }
 501              		.loc 1 1061 21 is_stmt 1 view .LVU140
1061:ThirdParty/FreeRTOS/tasks.c ****                 }
 502              		.loc 1 1061 34 is_stmt 0 view .LVU141
 503 0028 214B     		ldr	r3, .L42+4
 504 002a 1C60     		str	r4, [r3]
 505 002c 04E0     		b	.L37
 506              	.L40:
1038:ThirdParty/FreeRTOS/tasks.c **** 
 507              		.loc 1 1038 13 is_stmt 1 view .LVU142
1038:ThirdParty/FreeRTOS/tasks.c **** 
 508              		.loc 1 1038 26 is_stmt 0 view .LVU143
 509 002e 204B     		ldr	r3, .L42+4
 510 0030 1C60     		str	r4, [r3]
1040:ThirdParty/FreeRTOS/tasks.c ****             {
 511              		.loc 1 1040 13 is_stmt 1 view .LVU144
1040:ThirdParty/FreeRTOS/tasks.c ****             {
 512              		.loc 1 1040 40 is_stmt 0 view .LVU145
 513 0032 1368     		ldr	r3, [r2]
1040:ThirdParty/FreeRTOS/tasks.c ****             {
 514              		.loc 1 1040 15 view .LVU146
 515 0034 012B     		cmp	r3, #1
 516 0036 36D0     		beq	.L41
 517              	.L37:
1070:ThirdParty/FreeRTOS/tasks.c ****             }
 518              		.loc 1 1070 41 is_stmt 1 view .LVU147
1074:ThirdParty/FreeRTOS/tasks.c **** 
 519              		.loc 1 1074 9 view .LVU148
1074:ThirdParty/FreeRTOS/tasks.c **** 
 520              		.loc 1 1074 21 is_stmt 0 view .LVU149
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 86


 521 0038 1F4A     		ldr	r2, .L42+12
 522 003a 1368     		ldr	r3, [r2]
 523 003c 0133     		adds	r3, r3, #1
 524 003e 1360     		str	r3, [r2]
1082:ThirdParty/FreeRTOS/tasks.c **** 
 525              		.loc 1 1082 37 is_stmt 1 view .LVU150
1084:ThirdParty/FreeRTOS/tasks.c **** 
 526              		.loc 1 1084 9 view .LVU151
1084:ThirdParty/FreeRTOS/tasks.c **** 
 527              		.loc 1 1084 9 view .LVU152
 528 0040 E36A     		ldr	r3, [r4, #44]
 529 0042 0122     		movs	r2, #1
 530 0044 9A40     		lsls	r2, r2, r3
 531 0046 1D49     		ldr	r1, .L42+16
 532 0048 0868     		ldr	r0, [r1]
 533 004a 0243     		orrs	r2, r2, r0
 534 004c 0A60     		str	r2, [r1]
 535              	.LBB143:
1084:ThirdParty/FreeRTOS/tasks.c **** 
 536              		.loc 1 1084 9 view .LVU153
 537 004e 1C4A     		ldr	r2, .L42+20
 538 0050 03EB8303 		add	r3, r3, r3, lsl #2
 539 0054 02EB8303 		add	r3, r2, r3, lsl #2
 540 0058 5B68     		ldr	r3, [r3, #4]
 541              	.LVL40:
1084:ThirdParty/FreeRTOS/tasks.c **** 
 542              		.loc 1 1084 9 view .LVU154
1084:ThirdParty/FreeRTOS/tasks.c **** 
 543              		.loc 1 1084 9 view .LVU155
1084:ThirdParty/FreeRTOS/tasks.c **** 
 544              		.loc 1 1084 9 view .LVU156
 545 005a A360     		str	r3, [r4, #8]
1084:ThirdParty/FreeRTOS/tasks.c **** 
 546              		.loc 1 1084 9 view .LVU157
 547 005c 9868     		ldr	r0, [r3, #8]
 548 005e E060     		str	r0, [r4, #12]
1084:ThirdParty/FreeRTOS/tasks.c **** 
 549              		.loc 1 1084 9 view .LVU158
 550 0060 211D     		adds	r1, r4, #4
 551 0062 4160     		str	r1, [r0, #4]
1084:ThirdParty/FreeRTOS/tasks.c **** 
 552              		.loc 1 1084 9 view .LVU159
 553 0064 9960     		str	r1, [r3, #8]
1084:ThirdParty/FreeRTOS/tasks.c **** 
 554              		.loc 1 1084 9 view .LVU160
 555 0066 E36A     		ldr	r3, [r4, #44]
 556              	.LVL41:
1084:ThirdParty/FreeRTOS/tasks.c **** 
 557              		.loc 1 1084 9 is_stmt 0 view .LVU161
 558 0068 03EB8301 		add	r1, r3, r3, lsl #2
 559 006c 8800     		lsls	r0, r1, #2
 560 006e 02EB8101 		add	r1, r2, r1, lsl #2
 561 0072 6161     		str	r1, [r4, #20]
1084:ThirdParty/FreeRTOS/tasks.c **** 
 562              		.loc 1 1084 9 is_stmt 1 view .LVU162
 563 0074 1158     		ldr	r1, [r2, r0]
 564 0076 0131     		adds	r1, r1, #1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 87


 565 0078 1150     		str	r1, [r2, r0]
 566              	.LBE143:
1084:ThirdParty/FreeRTOS/tasks.c **** 
 567              		.loc 1 1084 9 view .LVU163
1084:ThirdParty/FreeRTOS/tasks.c **** 
 568              		.loc 1 1084 42 view .LVU164
1086:ThirdParty/FreeRTOS/tasks.c ****     }
 569              		.loc 1 1086 9 view .LVU165
1088:ThirdParty/FreeRTOS/tasks.c **** 
 570              		.loc 1 1088 5 view .LVU166
 571 007a FFF7FEFF 		bl	vPortExitCritical
 572              	.LVL42:
1090:ThirdParty/FreeRTOS/tasks.c ****     {
 573              		.loc 1 1090 5 view .LVU167
1090:ThirdParty/FreeRTOS/tasks.c ****     {
 574              		.loc 1 1090 27 is_stmt 0 view .LVU168
 575 007e 0D4B     		ldr	r3, .L42+8
 576 0080 1B68     		ldr	r3, [r3]
1090:ThirdParty/FreeRTOS/tasks.c ****     {
 577              		.loc 1 1090 7 view .LVU169
 578 0082 7BB1     		cbz	r3, .L35
1094:ThirdParty/FreeRTOS/tasks.c ****         {
 579              		.loc 1 1094 9 is_stmt 1 view .LVU170
1094:ThirdParty/FreeRTOS/tasks.c ****         {
 580              		.loc 1 1094 25 is_stmt 0 view .LVU171
 581 0084 0A4B     		ldr	r3, .L42+4
 582 0086 1B68     		ldr	r3, [r3]
 583 0088 DA6A     		ldr	r2, [r3, #44]
1094:ThirdParty/FreeRTOS/tasks.c ****         {
 584              		.loc 1 1094 48 view .LVU172
 585 008a E36A     		ldr	r3, [r4, #44]
1094:ThirdParty/FreeRTOS/tasks.c ****         {
 586              		.loc 1 1094 11 view .LVU173
 587 008c 9A42     		cmp	r2, r3
 588 008e 09D2     		bcs	.L35
1096:ThirdParty/FreeRTOS/tasks.c ****         }
 589              		.loc 1 1096 13 is_stmt 1 view .LVU174
 590 0090 4FF0E023 		mov	r3, #-536813568
 591 0094 4FF08052 		mov	r2, #268435456
 592 0098 C3F8042D 		str	r2, [r3, #3332]
1096:ThirdParty/FreeRTOS/tasks.c ****         }
 593              		.loc 1 1096 13 view .LVU175
 594              		.syntax unified
 595              	@ 1096 "ThirdParty/FreeRTOS/tasks.c" 1
 596 009c BFF34F8F 		dsb
 597              	@ 0 "" 2
1096:ThirdParty/FreeRTOS/tasks.c ****         }
 598              		.loc 1 1096 13 view .LVU176
 599              	@ 1096 "ThirdParty/FreeRTOS/tasks.c" 1
 600 00a0 BFF36F8F 		isb
 601              	@ 0 "" 2
1096:ThirdParty/FreeRTOS/tasks.c ****         }
 602              		.loc 1 1096 44 view .LVU177
1105:ThirdParty/FreeRTOS/tasks.c ****     }
 603              		.loc 1 1105 33 view .LVU178
 604              		.thumb
 605              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 88


 606              	.L35:
1107:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 607              		.loc 1 1107 1 is_stmt 0 view .LVU179
 608 00a4 10BD     		pop	{r4, pc}
 609              	.LVL43:
 610              	.L41:
1045:ThirdParty/FreeRTOS/tasks.c ****             }
 611              		.loc 1 1045 17 is_stmt 1 view .LVU180
 612 00a6 FFF7FEFF 		bl	prvInitialiseTaskLists
 613              	.LVL44:
 614 00aa C5E7     		b	.L37
 615              	.L43:
 616              		.align	2
 617              	.L42:
 618 00ac 00000000 		.word	uxCurrentNumberOfTasks
 619 00b0 00000000 		.word	pxCurrentTCB
 620 00b4 00000000 		.word	xSchedulerRunning
 621 00b8 00000000 		.word	uxTaskNumber
 622 00bc 00000000 		.word	uxTopReadyPriority
 623 00c0 00000000 		.word	pxReadyTasksLists
 624              		.cfi_endproc
 625              	.LFE7:
 627              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 628              		.align	1
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 633              	prvCheckTasksWaitingTermination:
 634              	.LFB39:
3690:ThirdParty/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 635              		.loc 1 3690 1 view -0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              	.LBB144:
3695:ThirdParty/FreeRTOS/tasks.c **** 
 640              		.loc 1 3695 9 view .LVU182
3699:ThirdParty/FreeRTOS/tasks.c ****         {
 641              		.loc 1 3699 9 view .LVU183
3699:ThirdParty/FreeRTOS/tasks.c ****         {
 642              		.loc 1 3699 45 view .LVU184
 643 0000 0F4B     		ldr	r3, .L51
 644 0002 1B68     		ldr	r3, [r3]
 645 0004 D3B1     		cbz	r3, .L50
 646              	.LBE144:
3690:ThirdParty/FreeRTOS/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 647              		.loc 1 3690 1 is_stmt 0 view .LVU185
 648 0006 10B5     		push	{r4, lr}
 649              	.LCFI4:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 4, -8
 652              		.cfi_offset 14, -4
 653              	.L46:
 654              	.LBB145:
3701:ThirdParty/FreeRTOS/tasks.c ****             {
 655              		.loc 1 3701 13 is_stmt 1 view .LVU186
 656 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 89


 657              	.LVL45:
3703:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 658              		.loc 1 3703 17 view .LVU187
3703:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 659              		.loc 1 3703 25 is_stmt 0 view .LVU188
 660 000c 0D4B     		ldr	r3, .L51+4
 661 000e DB68     		ldr	r3, [r3, #12]
3703:ThirdParty/FreeRTOS/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 662              		.loc 1 3703 23 view .LVU189
 663 0010 DC68     		ldr	r4, [r3, #12]
 664              	.LVL46:
3704:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 665              		.loc 1 3704 17 is_stmt 1 view .LVU190
3704:ThirdParty/FreeRTOS/tasks.c ****                 --uxCurrentNumberOfTasks;
 666              		.loc 1 3704 26 is_stmt 0 view .LVU191
 667 0012 201D     		adds	r0, r4, #4
 668 0014 FFF7FEFF 		bl	uxListRemove
 669              	.LVL47:
3705:ThirdParty/FreeRTOS/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
 670              		.loc 1 3705 17 is_stmt 1 view .LVU192
 671 0018 0B4A     		ldr	r2, .L51+8
 672 001a 1368     		ldr	r3, [r2]
 673 001c 013B     		subs	r3, r3, #1
 674 001e 1360     		str	r3, [r2]
3706:ThirdParty/FreeRTOS/tasks.c ****             }
 675              		.loc 1 3706 17 view .LVU193
 676 0020 074A     		ldr	r2, .L51
 677 0022 1368     		ldr	r3, [r2]
 678 0024 013B     		subs	r3, r3, #1
 679 0026 1360     		str	r3, [r2]
3708:ThirdParty/FreeRTOS/tasks.c **** 
 680              		.loc 1 3708 13 view .LVU194
 681 0028 FFF7FEFF 		bl	vPortExitCritical
 682              	.LVL48:
3710:ThirdParty/FreeRTOS/tasks.c ****         }
 683              		.loc 1 3710 13 view .LVU195
 684 002c 2046     		mov	r0, r4
 685 002e FFF7FEFF 		bl	prvDeleteTCB
 686              	.LVL49:
3699:ThirdParty/FreeRTOS/tasks.c ****         {
 687              		.loc 1 3699 45 view .LVU196
 688 0032 034B     		ldr	r3, .L51
 689 0034 1B68     		ldr	r3, [r3]
 690 0036 002B     		cmp	r3, #0
 691 0038 E6D1     		bne	.L46
 692              	.LBE145:
3714:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693              		.loc 1 3714 1 is_stmt 0 view .LVU197
 694 003a 10BD     		pop	{r4, pc}
 695              	.LVL50:
 696              	.L50:
 697              	.LCFI5:
 698              		.cfi_def_cfa_offset 0
 699              		.cfi_restore 4
 700              		.cfi_restore 14
3714:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 701              		.loc 1 3714 1 view .LVU198
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 90


 702 003c 7047     		bx	lr
 703              	.L52:
 704 003e 00BF     		.align	2
 705              	.L51:
 706 0040 00000000 		.word	uxDeletedTasksWaitingCleanUp
 707 0044 00000000 		.word	xTasksWaitingTermination
 708 0048 00000000 		.word	uxCurrentNumberOfTasks
 709              		.cfi_endproc
 710              	.LFE39:
 712              		.section	.text.prvIdleTask,"ax",%progbits
 713              		.align	1
 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 718              	prvIdleTask:
 719              	.LFB37:
3428:ThirdParty/FreeRTOS/tasks.c ****     /* Stop warnings. */
 720              		.loc 1 3428 1 is_stmt 1 view -0
 721              		.cfi_startproc
 722              		@ Volatile: function does not return.
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              	.LVL51:
3428:ThirdParty/FreeRTOS/tasks.c ****     /* Stop warnings. */
 726              		.loc 1 3428 1 is_stmt 0 view .LVU200
 727 0000 08B5     		push	{r3, lr}
 728              	.LCFI6:
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 3, -8
 731              		.cfi_offset 14, -4
 732              	.LVL52:
 733              	.L54:
3430:ThirdParty/FreeRTOS/tasks.c **** 
 734              		.loc 1 3430 5 is_stmt 1 view .LVU201
3438:ThirdParty/FreeRTOS/tasks.c **** 
 735              		.loc 1 3438 67 view .LVU202
3440:ThirdParty/FreeRTOS/tasks.c ****     {
 736              		.loc 1 3440 5 view .LVU203
3444:ThirdParty/FreeRTOS/tasks.c **** 
 737              		.loc 1 3444 9 view .LVU204
 738 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 739              	.LVL53:
3467:ThirdParty/FreeRTOS/tasks.c ****             {
 740              		.loc 1 3467 13 view .LVU205
3467:ThirdParty/FreeRTOS/tasks.c ****             {
 741              		.loc 1 3467 17 is_stmt 0 view .LVU206
 742 0006 074B     		ldr	r3, .L57
 743 0008 1B68     		ldr	r3, [r3]
3467:ThirdParty/FreeRTOS/tasks.c ****             {
 744              		.loc 1 3467 15 view .LVU207
 745 000a 012B     		cmp	r3, #1
 746 000c F9D9     		bls	.L54
3469:ThirdParty/FreeRTOS/tasks.c ****             }
 747              		.loc 1 3469 17 is_stmt 1 view .LVU208
 748 000e 4FF0E023 		mov	r3, #-536813568
 749 0012 4FF08052 		mov	r2, #268435456
 750 0016 C3F8042D 		str	r2, [r3, #3332]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 91


3469:ThirdParty/FreeRTOS/tasks.c ****             }
 751              		.loc 1 3469 17 view .LVU209
 752              		.syntax unified
 753              	@ 3469 "ThirdParty/FreeRTOS/tasks.c" 1
 754 001a BFF34F8F 		dsb
 755              	@ 0 "" 2
3469:ThirdParty/FreeRTOS/tasks.c ****             }
 756              		.loc 1 3469 17 view .LVU210
 757              	@ 3469 "ThirdParty/FreeRTOS/tasks.c" 1
 758 001e BFF36F8F 		isb
 759              	@ 0 "" 2
3469:ThirdParty/FreeRTOS/tasks.c ****             }
 760              		.loc 1 3469 28 view .LVU211
 761              		.thumb
 762              		.syntax unified
 763 0022 EEE7     		b	.L54
 764              	.L58:
 765              		.align	2
 766              	.L57:
 767 0024 00000000 		.word	pxReadyTasksLists
 768              		.cfi_endproc
 769              	.LFE37:
 771              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 772              		.align	1
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 777              	prvAddCurrentTaskToDelayedList:
 778              	.LVL54:
 779              	.LFB51:
4018:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4019:ThirdParty/FreeRTOS/tasks.c **** 
4020:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4021:ThirdParty/FreeRTOS/tasks.c **** 
4022:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4023:ThirdParty/FreeRTOS/tasks.c ****     {
4024:ThirdParty/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
4025:ThirdParty/FreeRTOS/tasks.c **** 
4026:ThirdParty/FreeRTOS/tasks.c ****         /* A critical section is not required as this is not called from
4027:ThirdParty/FreeRTOS/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4028:ThirdParty/FreeRTOS/tasks.c ****          * individual execution thread. */
4029:ThirdParty/FreeRTOS/tasks.c ****         xReturn = pxCurrentTCB;
4030:ThirdParty/FreeRTOS/tasks.c **** 
4031:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4032:ThirdParty/FreeRTOS/tasks.c ****     }
4033:ThirdParty/FreeRTOS/tasks.c **** 
4034:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4035:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4036:ThirdParty/FreeRTOS/tasks.c **** 
4037:ThirdParty/FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4038:ThirdParty/FreeRTOS/tasks.c **** 
4039:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4040:ThirdParty/FreeRTOS/tasks.c ****     {
4041:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4042:ThirdParty/FreeRTOS/tasks.c **** 
4043:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4044:ThirdParty/FreeRTOS/tasks.c ****         {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 92


4045:ThirdParty/FreeRTOS/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4046:ThirdParty/FreeRTOS/tasks.c ****         }
4047:ThirdParty/FreeRTOS/tasks.c ****         else
4048:ThirdParty/FreeRTOS/tasks.c ****         {
4049:ThirdParty/FreeRTOS/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4050:ThirdParty/FreeRTOS/tasks.c ****             {
4051:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4052:ThirdParty/FreeRTOS/tasks.c ****             }
4053:ThirdParty/FreeRTOS/tasks.c ****             else
4054:ThirdParty/FreeRTOS/tasks.c ****             {
4055:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4056:ThirdParty/FreeRTOS/tasks.c ****             }
4057:ThirdParty/FreeRTOS/tasks.c ****         }
4058:ThirdParty/FreeRTOS/tasks.c **** 
4059:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4060:ThirdParty/FreeRTOS/tasks.c ****     }
4061:ThirdParty/FreeRTOS/tasks.c **** 
4062:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4063:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4064:ThirdParty/FreeRTOS/tasks.c **** 
4065:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4066:ThirdParty/FreeRTOS/tasks.c **** 
4067:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4068:ThirdParty/FreeRTOS/tasks.c ****     {
4069:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4070:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4071:ThirdParty/FreeRTOS/tasks.c **** 
4072:ThirdParty/FreeRTOS/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4073:ThirdParty/FreeRTOS/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4074:ThirdParty/FreeRTOS/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4075:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4076:ThirdParty/FreeRTOS/tasks.c ****         {
4077:ThirdParty/FreeRTOS/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4078:ThirdParty/FreeRTOS/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4079:ThirdParty/FreeRTOS/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4080:ThirdParty/FreeRTOS/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4081:ThirdParty/FreeRTOS/tasks.c ****             {
4082:ThirdParty/FreeRTOS/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4083:ThirdParty/FreeRTOS/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4084:ThirdParty/FreeRTOS/tasks.c ****                  * not being used for anything else. */
4085:ThirdParty/FreeRTOS/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4086:ThirdParty/FreeRTOS/tasks.c ****                 {
4087:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4088:ThirdParty/FreeRTOS/tasks.c ****                 }
4089:ThirdParty/FreeRTOS/tasks.c ****                 else
4090:ThirdParty/FreeRTOS/tasks.c ****                 {
4091:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4092:ThirdParty/FreeRTOS/tasks.c ****                 }
4093:ThirdParty/FreeRTOS/tasks.c **** 
4094:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task being modified is in the ready state it will need
4095:ThirdParty/FreeRTOS/tasks.c ****                  * to be moved into a new list. */
4096:ThirdParty/FreeRTOS/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4097:ThirdParty/FreeRTOS/tasks.c ****                 {
4098:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4099:ThirdParty/FreeRTOS/tasks.c ****                     {
4100:ThirdParty/FreeRTOS/tasks.c ****                         /* It is known that the task is in its ready list so
4101:ThirdParty/FreeRTOS/tasks.c ****                          * there is no need to check again and the port level
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 93


4102:ThirdParty/FreeRTOS/tasks.c ****                          * reset macro can be called directly. */
4103:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4104:ThirdParty/FreeRTOS/tasks.c ****                     }
4105:ThirdParty/FreeRTOS/tasks.c ****                     else
4106:ThirdParty/FreeRTOS/tasks.c ****                     {
4107:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4108:ThirdParty/FreeRTOS/tasks.c ****                     }
4109:ThirdParty/FreeRTOS/tasks.c **** 
4110:ThirdParty/FreeRTOS/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4111:ThirdParty/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4112:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4113:ThirdParty/FreeRTOS/tasks.c ****                 }
4114:ThirdParty/FreeRTOS/tasks.c ****                 else
4115:ThirdParty/FreeRTOS/tasks.c ****                 {
4116:ThirdParty/FreeRTOS/tasks.c ****                     /* Just inherit the priority. */
4117:ThirdParty/FreeRTOS/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4118:ThirdParty/FreeRTOS/tasks.c ****                 }
4119:ThirdParty/FreeRTOS/tasks.c **** 
4120:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4121:ThirdParty/FreeRTOS/tasks.c **** 
4122:ThirdParty/FreeRTOS/tasks.c ****                 /* Inheritance occurred. */
4123:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4124:ThirdParty/FreeRTOS/tasks.c ****             }
4125:ThirdParty/FreeRTOS/tasks.c ****             else
4126:ThirdParty/FreeRTOS/tasks.c ****             {
4127:ThirdParty/FreeRTOS/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4128:ThirdParty/FreeRTOS/tasks.c ****                 {
4129:ThirdParty/FreeRTOS/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4130:ThirdParty/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4131:ThirdParty/FreeRTOS/tasks.c ****                      * current priority of the mutex holder is not lower than the
4132:ThirdParty/FreeRTOS/tasks.c ****                      * priority of the task attempting to take the mutex.
4133:ThirdParty/FreeRTOS/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4134:ThirdParty/FreeRTOS/tasks.c ****                      * priority, but inheritance would have occurred if that had
4135:ThirdParty/FreeRTOS/tasks.c ****                      * not been the case. */
4136:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4137:ThirdParty/FreeRTOS/tasks.c ****                 }
4138:ThirdParty/FreeRTOS/tasks.c ****                 else
4139:ThirdParty/FreeRTOS/tasks.c ****                 {
4140:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4141:ThirdParty/FreeRTOS/tasks.c ****                 }
4142:ThirdParty/FreeRTOS/tasks.c ****             }
4143:ThirdParty/FreeRTOS/tasks.c ****         }
4144:ThirdParty/FreeRTOS/tasks.c ****         else
4145:ThirdParty/FreeRTOS/tasks.c ****         {
4146:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4147:ThirdParty/FreeRTOS/tasks.c ****         }
4148:ThirdParty/FreeRTOS/tasks.c **** 
4149:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4150:ThirdParty/FreeRTOS/tasks.c ****     }
4151:ThirdParty/FreeRTOS/tasks.c **** 
4152:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4153:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4154:ThirdParty/FreeRTOS/tasks.c **** 
4155:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4156:ThirdParty/FreeRTOS/tasks.c **** 
4157:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4158:ThirdParty/FreeRTOS/tasks.c ****     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 94


4159:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4160:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdFALSE;
4161:ThirdParty/FreeRTOS/tasks.c **** 
4162:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4163:ThirdParty/FreeRTOS/tasks.c ****         {
4164:ThirdParty/FreeRTOS/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4165:ThirdParty/FreeRTOS/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4166:ThirdParty/FreeRTOS/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4167:ThirdParty/FreeRTOS/tasks.c ****              * be the running state task. */
4168:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4169:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4170:ThirdParty/FreeRTOS/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4171:ThirdParty/FreeRTOS/tasks.c **** 
4172:ThirdParty/FreeRTOS/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
4173:ThirdParty/FreeRTOS/tasks.c ****              * task? */
4174:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4175:ThirdParty/FreeRTOS/tasks.c ****             {
4176:ThirdParty/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4177:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4178:ThirdParty/FreeRTOS/tasks.c ****                 {
4179:ThirdParty/FreeRTOS/tasks.c ****                     /* A task can only have an inherited priority if it holds
4180:ThirdParty/FreeRTOS/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4181:ThirdParty/FreeRTOS/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4182:ThirdParty/FreeRTOS/tasks.c ****                      * holding task then it must be the running state task.  Remove
4183:ThirdParty/FreeRTOS/tasks.c ****                      * the holding task from the ready list. */
4184:ThirdParty/FreeRTOS/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4185:ThirdParty/FreeRTOS/tasks.c ****                     {
4186:ThirdParty/FreeRTOS/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4187:ThirdParty/FreeRTOS/tasks.c ****                     }
4188:ThirdParty/FreeRTOS/tasks.c ****                     else
4189:ThirdParty/FreeRTOS/tasks.c ****                     {
4190:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4191:ThirdParty/FreeRTOS/tasks.c ****                     }
4192:ThirdParty/FreeRTOS/tasks.c **** 
4193:ThirdParty/FreeRTOS/tasks.c ****                     /* Disinherit the priority before adding the task into the
4194:ThirdParty/FreeRTOS/tasks.c ****                      * new  ready list. */
4195:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4196:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4197:ThirdParty/FreeRTOS/tasks.c **** 
4198:ThirdParty/FreeRTOS/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4199:ThirdParty/FreeRTOS/tasks.c ****                      * any other purpose if this task is running, and it must be
4200:ThirdParty/FreeRTOS/tasks.c ****                      * running to give back the mutex. */
4201:ThirdParty/FreeRTOS/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4202:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4203:ThirdParty/FreeRTOS/tasks.c **** 
4204:ThirdParty/FreeRTOS/tasks.c ****                     /* Return true to indicate that a context switch is required.
4205:ThirdParty/FreeRTOS/tasks.c ****                      * This is only actually required in the corner case whereby
4206:ThirdParty/FreeRTOS/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4207:ThirdParty/FreeRTOS/tasks.c ****                      * in an order different to that in which they were taken.
4208:ThirdParty/FreeRTOS/tasks.c ****                      * If a context switch did not occur when the first mutex was
4209:ThirdParty/FreeRTOS/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4210:ThirdParty/FreeRTOS/tasks.c ****                      * switch should occur when the last mutex is returned whether
4211:ThirdParty/FreeRTOS/tasks.c ****                      * a task is waiting on it or not. */
4212:ThirdParty/FreeRTOS/tasks.c ****                     xReturn = pdTRUE;
4213:ThirdParty/FreeRTOS/tasks.c ****                 }
4214:ThirdParty/FreeRTOS/tasks.c ****                 else
4215:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 95


4216:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4217:ThirdParty/FreeRTOS/tasks.c ****                 }
4218:ThirdParty/FreeRTOS/tasks.c ****             }
4219:ThirdParty/FreeRTOS/tasks.c ****             else
4220:ThirdParty/FreeRTOS/tasks.c ****             {
4221:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4222:ThirdParty/FreeRTOS/tasks.c ****             }
4223:ThirdParty/FreeRTOS/tasks.c ****         }
4224:ThirdParty/FreeRTOS/tasks.c ****         else
4225:ThirdParty/FreeRTOS/tasks.c ****         {
4226:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4227:ThirdParty/FreeRTOS/tasks.c ****         }
4228:ThirdParty/FreeRTOS/tasks.c **** 
4229:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4230:ThirdParty/FreeRTOS/tasks.c ****     }
4231:ThirdParty/FreeRTOS/tasks.c **** 
4232:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4233:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4234:ThirdParty/FreeRTOS/tasks.c **** 
4235:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4236:ThirdParty/FreeRTOS/tasks.c **** 
4237:ThirdParty/FreeRTOS/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4238:ThirdParty/FreeRTOS/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4239:ThirdParty/FreeRTOS/tasks.c ****     {
4240:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4241:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4242:ThirdParty/FreeRTOS/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4243:ThirdParty/FreeRTOS/tasks.c **** 
4244:ThirdParty/FreeRTOS/tasks.c ****         if( pxMutexHolder != NULL )
4245:ThirdParty/FreeRTOS/tasks.c ****         {
4246:ThirdParty/FreeRTOS/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4247:ThirdParty/FreeRTOS/tasks.c ****              * one mutex. */
4248:ThirdParty/FreeRTOS/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4249:ThirdParty/FreeRTOS/tasks.c **** 
4250:ThirdParty/FreeRTOS/tasks.c ****             /* Determine the priority to which the priority of the task that
4251:ThirdParty/FreeRTOS/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4252:ThirdParty/FreeRTOS/tasks.c ****              * holding task's base priority and the priority of the highest
4253:ThirdParty/FreeRTOS/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4254:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4255:ThirdParty/FreeRTOS/tasks.c ****             {
4256:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4257:ThirdParty/FreeRTOS/tasks.c ****             }
4258:ThirdParty/FreeRTOS/tasks.c ****             else
4259:ThirdParty/FreeRTOS/tasks.c ****             {
4260:ThirdParty/FreeRTOS/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4261:ThirdParty/FreeRTOS/tasks.c ****             }
4262:ThirdParty/FreeRTOS/tasks.c **** 
4263:ThirdParty/FreeRTOS/tasks.c ****             /* Does the priority need to change? */
4264:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4265:ThirdParty/FreeRTOS/tasks.c ****             {
4266:ThirdParty/FreeRTOS/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4267:ThirdParty/FreeRTOS/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4268:ThirdParty/FreeRTOS/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4269:ThirdParty/FreeRTOS/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4270:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4271:ThirdParty/FreeRTOS/tasks.c ****                 {
4272:ThirdParty/FreeRTOS/tasks.c ****                     /* If a task has timed out because it already holds the
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 96


4273:ThirdParty/FreeRTOS/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4274:ThirdParty/FreeRTOS/tasks.c ****                      * its own priority. */
4275:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4276:ThirdParty/FreeRTOS/tasks.c **** 
4277:ThirdParty/FreeRTOS/tasks.c ****                     /* Disinherit the priority, remembering the previous
4278:ThirdParty/FreeRTOS/tasks.c ****                      * priority to facilitate determining the subject task's
4279:ThirdParty/FreeRTOS/tasks.c ****                      * state. */
4280:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4281:ThirdParty/FreeRTOS/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4282:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4283:ThirdParty/FreeRTOS/tasks.c **** 
4284:ThirdParty/FreeRTOS/tasks.c ****                     /* Only reset the event list item value if the value is not
4285:ThirdParty/FreeRTOS/tasks.c ****                      * being used for anything else. */
4286:ThirdParty/FreeRTOS/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4287:ThirdParty/FreeRTOS/tasks.c ****                     {
4288:ThirdParty/FreeRTOS/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4289:ThirdParty/FreeRTOS/tasks.c ****                     }
4290:ThirdParty/FreeRTOS/tasks.c ****                     else
4291:ThirdParty/FreeRTOS/tasks.c ****                     {
4292:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4293:ThirdParty/FreeRTOS/tasks.c ****                     }
4294:ThirdParty/FreeRTOS/tasks.c **** 
4295:ThirdParty/FreeRTOS/tasks.c ****                     /* If the running task is not the task that holds the mutex
4296:ThirdParty/FreeRTOS/tasks.c ****                      * then the task that holds the mutex could be in either the
4297:ThirdParty/FreeRTOS/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4298:ThirdParty/FreeRTOS/tasks.c ****                      * from its current state list if it is in the Ready state as
4299:ThirdParty/FreeRTOS/tasks.c ****                      * the task's priority is going to change and there is one
4300:ThirdParty/FreeRTOS/tasks.c ****                      * Ready list per priority. */
4301:ThirdParty/FreeRTOS/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4302:ThirdParty/FreeRTOS/tasks.c ****                     {
4303:ThirdParty/FreeRTOS/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4304:ThirdParty/FreeRTOS/tasks.c ****                         {
4305:ThirdParty/FreeRTOS/tasks.c ****                             /* It is known that the task is in its ready list so
4306:ThirdParty/FreeRTOS/tasks.c ****                              * there is no need to check again and the port level
4307:ThirdParty/FreeRTOS/tasks.c ****                              * reset macro can be called directly. */
4308:ThirdParty/FreeRTOS/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4309:ThirdParty/FreeRTOS/tasks.c ****                         }
4310:ThirdParty/FreeRTOS/tasks.c ****                         else
4311:ThirdParty/FreeRTOS/tasks.c ****                         {
4312:ThirdParty/FreeRTOS/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4313:ThirdParty/FreeRTOS/tasks.c ****                         }
4314:ThirdParty/FreeRTOS/tasks.c **** 
4315:ThirdParty/FreeRTOS/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4316:ThirdParty/FreeRTOS/tasks.c ****                     }
4317:ThirdParty/FreeRTOS/tasks.c ****                     else
4318:ThirdParty/FreeRTOS/tasks.c ****                     {
4319:ThirdParty/FreeRTOS/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4320:ThirdParty/FreeRTOS/tasks.c ****                     }
4321:ThirdParty/FreeRTOS/tasks.c ****                 }
4322:ThirdParty/FreeRTOS/tasks.c ****                 else
4323:ThirdParty/FreeRTOS/tasks.c ****                 {
4324:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4325:ThirdParty/FreeRTOS/tasks.c ****                 }
4326:ThirdParty/FreeRTOS/tasks.c ****             }
4327:ThirdParty/FreeRTOS/tasks.c ****             else
4328:ThirdParty/FreeRTOS/tasks.c ****             {
4329:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 97


4330:ThirdParty/FreeRTOS/tasks.c ****             }
4331:ThirdParty/FreeRTOS/tasks.c ****         }
4332:ThirdParty/FreeRTOS/tasks.c ****         else
4333:ThirdParty/FreeRTOS/tasks.c ****         {
4334:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4335:ThirdParty/FreeRTOS/tasks.c ****         }
4336:ThirdParty/FreeRTOS/tasks.c ****     }
4337:ThirdParty/FreeRTOS/tasks.c **** 
4338:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4339:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:ThirdParty/FreeRTOS/tasks.c **** 
4341:ThirdParty/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4342:ThirdParty/FreeRTOS/tasks.c **** 
4343:ThirdParty/FreeRTOS/tasks.c ****     void vTaskEnterCritical( void )
4344:ThirdParty/FreeRTOS/tasks.c ****     {
4345:ThirdParty/FreeRTOS/tasks.c ****         portDISABLE_INTERRUPTS();
4346:ThirdParty/FreeRTOS/tasks.c **** 
4347:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4348:ThirdParty/FreeRTOS/tasks.c ****         {
4349:ThirdParty/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4350:ThirdParty/FreeRTOS/tasks.c **** 
4351:ThirdParty/FreeRTOS/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4352:ThirdParty/FreeRTOS/tasks.c ****              * function so  assert() if it is being called from an interrupt
4353:ThirdParty/FreeRTOS/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4354:ThirdParty/FreeRTOS/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4355:ThirdParty/FreeRTOS/tasks.c ****              * protect against recursive calls if the assert function also uses a
4356:ThirdParty/FreeRTOS/tasks.c ****              * critical section. */
4357:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4358:ThirdParty/FreeRTOS/tasks.c ****             {
4359:ThirdParty/FreeRTOS/tasks.c ****                 portASSERT_IF_IN_ISR();
4360:ThirdParty/FreeRTOS/tasks.c ****             }
4361:ThirdParty/FreeRTOS/tasks.c ****         }
4362:ThirdParty/FreeRTOS/tasks.c ****         else
4363:ThirdParty/FreeRTOS/tasks.c ****         {
4364:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4365:ThirdParty/FreeRTOS/tasks.c ****         }
4366:ThirdParty/FreeRTOS/tasks.c ****     }
4367:ThirdParty/FreeRTOS/tasks.c **** 
4368:ThirdParty/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4369:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4370:ThirdParty/FreeRTOS/tasks.c **** 
4371:ThirdParty/FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4372:ThirdParty/FreeRTOS/tasks.c **** 
4373:ThirdParty/FreeRTOS/tasks.c ****     void vTaskExitCritical( void )
4374:ThirdParty/FreeRTOS/tasks.c ****     {
4375:ThirdParty/FreeRTOS/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4376:ThirdParty/FreeRTOS/tasks.c ****         {
4377:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4378:ThirdParty/FreeRTOS/tasks.c ****             {
4379:ThirdParty/FreeRTOS/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4380:ThirdParty/FreeRTOS/tasks.c **** 
4381:ThirdParty/FreeRTOS/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4382:ThirdParty/FreeRTOS/tasks.c ****                 {
4383:ThirdParty/FreeRTOS/tasks.c ****                     portENABLE_INTERRUPTS();
4384:ThirdParty/FreeRTOS/tasks.c ****                 }
4385:ThirdParty/FreeRTOS/tasks.c ****                 else
4386:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 98


4387:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4388:ThirdParty/FreeRTOS/tasks.c ****                 }
4389:ThirdParty/FreeRTOS/tasks.c ****             }
4390:ThirdParty/FreeRTOS/tasks.c ****             else
4391:ThirdParty/FreeRTOS/tasks.c ****             {
4392:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4393:ThirdParty/FreeRTOS/tasks.c ****             }
4394:ThirdParty/FreeRTOS/tasks.c ****         }
4395:ThirdParty/FreeRTOS/tasks.c ****         else
4396:ThirdParty/FreeRTOS/tasks.c ****         {
4397:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4398:ThirdParty/FreeRTOS/tasks.c ****         }
4399:ThirdParty/FreeRTOS/tasks.c ****     }
4400:ThirdParty/FreeRTOS/tasks.c **** 
4401:ThirdParty/FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4402:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4403:ThirdParty/FreeRTOS/tasks.c **** 
4404:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4405:ThirdParty/FreeRTOS/tasks.c **** 
4406:ThirdParty/FreeRTOS/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4407:ThirdParty/FreeRTOS/tasks.c ****                                         const char * pcTaskName )
4408:ThirdParty/FreeRTOS/tasks.c ****     {
4409:ThirdParty/FreeRTOS/tasks.c ****         size_t x;
4410:ThirdParty/FreeRTOS/tasks.c **** 
4411:ThirdParty/FreeRTOS/tasks.c ****         /* Start by copying the entire string. */
4412:ThirdParty/FreeRTOS/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4413:ThirdParty/FreeRTOS/tasks.c **** 
4414:ThirdParty/FreeRTOS/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4415:ThirdParty/FreeRTOS/tasks.c ****          * printed out. */
4416:ThirdParty/FreeRTOS/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4417:ThirdParty/FreeRTOS/tasks.c ****         {
4418:ThirdParty/FreeRTOS/tasks.c ****             pcBuffer[ x ] = ' ';
4419:ThirdParty/FreeRTOS/tasks.c ****         }
4420:ThirdParty/FreeRTOS/tasks.c **** 
4421:ThirdParty/FreeRTOS/tasks.c ****         /* Terminate. */
4422:ThirdParty/FreeRTOS/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4423:ThirdParty/FreeRTOS/tasks.c **** 
4424:ThirdParty/FreeRTOS/tasks.c ****         /* Return the new end of string. */
4425:ThirdParty/FreeRTOS/tasks.c ****         return &( pcBuffer[ x ] );
4426:ThirdParty/FreeRTOS/tasks.c ****     }
4427:ThirdParty/FreeRTOS/tasks.c **** 
4428:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4429:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4430:ThirdParty/FreeRTOS/tasks.c **** 
4431:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4432:ThirdParty/FreeRTOS/tasks.c **** 
4433:ThirdParty/FreeRTOS/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4434:ThirdParty/FreeRTOS/tasks.c ****     {
4435:ThirdParty/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4436:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4437:ThirdParty/FreeRTOS/tasks.c ****         char cStatus;
4438:ThirdParty/FreeRTOS/tasks.c **** 
4439:ThirdParty/FreeRTOS/tasks.c ****         /*
4440:ThirdParty/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4441:ThirdParty/FreeRTOS/tasks.c ****          *
4442:ThirdParty/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4443:ThirdParty/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 99


4444:ThirdParty/FreeRTOS/tasks.c ****          * scheduler.
4445:ThirdParty/FreeRTOS/tasks.c ****          *
4446:ThirdParty/FreeRTOS/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4447:ThirdParty/FreeRTOS/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4448:ThirdParty/FreeRTOS/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4449:ThirdParty/FreeRTOS/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4450:ThirdParty/FreeRTOS/tasks.c ****          * on top of stack - not the number of bytes.
4451:ThirdParty/FreeRTOS/tasks.c ****          *
4452:ThirdParty/FreeRTOS/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4453:ThirdParty/FreeRTOS/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4454:ThirdParty/FreeRTOS/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4455:ThirdParty/FreeRTOS/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4456:ThirdParty/FreeRTOS/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4457:ThirdParty/FreeRTOS/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4458:ThirdParty/FreeRTOS/tasks.c ****          * snprintf() implementation!).
4459:ThirdParty/FreeRTOS/tasks.c ****          *
4460:ThirdParty/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4461:ThirdParty/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4462:ThirdParty/FreeRTOS/tasks.c ****          * through a call to vTaskList().
4463:ThirdParty/FreeRTOS/tasks.c ****          */
4464:ThirdParty/FreeRTOS/tasks.c **** 
4465:ThirdParty/FreeRTOS/tasks.c **** 
4466:ThirdParty/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4467:ThirdParty/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4468:ThirdParty/FreeRTOS/tasks.c **** 
4469:ThirdParty/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4470:ThirdParty/FreeRTOS/tasks.c ****          * function is executing. */
4471:ThirdParty/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4472:ThirdParty/FreeRTOS/tasks.c **** 
4473:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4474:ThirdParty/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4475:ThirdParty/FreeRTOS/tasks.c ****          * equate to NULL. */
4476:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4477:ThirdParty/FreeRTOS/tasks.c **** 
4478:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4479:ThirdParty/FreeRTOS/tasks.c ****         {
4480:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4481:ThirdParty/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4482:ThirdParty/FreeRTOS/tasks.c **** 
4483:ThirdParty/FreeRTOS/tasks.c ****             /* Create a human readable table from the binary data. */
4484:ThirdParty/FreeRTOS/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4485:ThirdParty/FreeRTOS/tasks.c ****             {
4486:ThirdParty/FreeRTOS/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4487:ThirdParty/FreeRTOS/tasks.c ****                 {
4488:ThirdParty/FreeRTOS/tasks.c ****                     case eRunning:
4489:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4490:ThirdParty/FreeRTOS/tasks.c ****                         break;
4491:ThirdParty/FreeRTOS/tasks.c **** 
4492:ThirdParty/FreeRTOS/tasks.c ****                     case eReady:
4493:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskREADY_CHAR;
4494:ThirdParty/FreeRTOS/tasks.c ****                         break;
4495:ThirdParty/FreeRTOS/tasks.c **** 
4496:ThirdParty/FreeRTOS/tasks.c ****                     case eBlocked:
4497:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4498:ThirdParty/FreeRTOS/tasks.c ****                         break;
4499:ThirdParty/FreeRTOS/tasks.c **** 
4500:ThirdParty/FreeRTOS/tasks.c ****                     case eSuspended:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 100


4501:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4502:ThirdParty/FreeRTOS/tasks.c ****                         break;
4503:ThirdParty/FreeRTOS/tasks.c **** 
4504:ThirdParty/FreeRTOS/tasks.c ****                     case eDeleted:
4505:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = tskDELETED_CHAR;
4506:ThirdParty/FreeRTOS/tasks.c ****                         break;
4507:ThirdParty/FreeRTOS/tasks.c **** 
4508:ThirdParty/FreeRTOS/tasks.c ****                     case eInvalid: /* Fall through. */
4509:ThirdParty/FreeRTOS/tasks.c ****                     default:       /* Should not get here, but it is included
4510:ThirdParty/FreeRTOS/tasks.c ****                                     * to prevent static checking errors. */
4511:ThirdParty/FreeRTOS/tasks.c ****                         cStatus = ( char ) 0x00;
4512:ThirdParty/FreeRTOS/tasks.c ****                         break;
4513:ThirdParty/FreeRTOS/tasks.c ****                 }
4514:ThirdParty/FreeRTOS/tasks.c **** 
4515:ThirdParty/FreeRTOS/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4516:ThirdParty/FreeRTOS/tasks.c ****                  * can be printed in tabular form more easily. */
4517:ThirdParty/FreeRTOS/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4518:ThirdParty/FreeRTOS/tasks.c **** 
4519:ThirdParty/FreeRTOS/tasks.c ****                 /* Write the rest of the string. */
4520:ThirdParty/FreeRTOS/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4521:ThirdParty/FreeRTOS/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4522:ThirdParty/FreeRTOS/tasks.c ****             }
4523:ThirdParty/FreeRTOS/tasks.c **** 
4524:ThirdParty/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4525:ThirdParty/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4526:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4527:ThirdParty/FreeRTOS/tasks.c ****         }
4528:ThirdParty/FreeRTOS/tasks.c ****         else
4529:ThirdParty/FreeRTOS/tasks.c ****         {
4530:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4531:ThirdParty/FreeRTOS/tasks.c ****         }
4532:ThirdParty/FreeRTOS/tasks.c ****     }
4533:ThirdParty/FreeRTOS/tasks.c **** 
4534:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4535:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4536:ThirdParty/FreeRTOS/tasks.c **** 
4537:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4538:ThirdParty/FreeRTOS/tasks.c **** 
4539:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4540:ThirdParty/FreeRTOS/tasks.c ****     {
4541:ThirdParty/FreeRTOS/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4542:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxArraySize, x;
4543:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4544:ThirdParty/FreeRTOS/tasks.c **** 
4545:ThirdParty/FreeRTOS/tasks.c ****         /*
4546:ThirdParty/FreeRTOS/tasks.c ****          * PLEASE NOTE:
4547:ThirdParty/FreeRTOS/tasks.c ****          *
4548:ThirdParty/FreeRTOS/tasks.c ****          * This function is provided for convenience only, and is used by many
4549:ThirdParty/FreeRTOS/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4550:ThirdParty/FreeRTOS/tasks.c ****          * scheduler.
4551:ThirdParty/FreeRTOS/tasks.c ****          *
4552:ThirdParty/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4553:ThirdParty/FreeRTOS/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4554:ThirdParty/FreeRTOS/tasks.c ****          * displays the amount of time each task has spent in the Running state
4555:ThirdParty/FreeRTOS/tasks.c ****          * in both absolute and percentage terms.
4556:ThirdParty/FreeRTOS/tasks.c ****          *
4557:ThirdParty/FreeRTOS/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 101


4558:ThirdParty/FreeRTOS/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4559:ThirdParty/FreeRTOS/tasks.c ****          * provide different results on different platforms.  An alternative,
4560:ThirdParty/FreeRTOS/tasks.c ****          * tiny, third party, and limited functionality implementation of
4561:ThirdParty/FreeRTOS/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4562:ThirdParty/FreeRTOS/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4563:ThirdParty/FreeRTOS/tasks.c ****          * a full snprintf() implementation!).
4564:ThirdParty/FreeRTOS/tasks.c ****          *
4565:ThirdParty/FreeRTOS/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4566:ThirdParty/FreeRTOS/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4567:ThirdParty/FreeRTOS/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4568:ThirdParty/FreeRTOS/tasks.c ****          */
4569:ThirdParty/FreeRTOS/tasks.c **** 
4570:ThirdParty/FreeRTOS/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4571:ThirdParty/FreeRTOS/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4572:ThirdParty/FreeRTOS/tasks.c **** 
4573:ThirdParty/FreeRTOS/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4574:ThirdParty/FreeRTOS/tasks.c ****          * function is executing. */
4575:ThirdParty/FreeRTOS/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4576:ThirdParty/FreeRTOS/tasks.c **** 
4577:ThirdParty/FreeRTOS/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4578:ThirdParty/FreeRTOS/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4579:ThirdParty/FreeRTOS/tasks.c ****          * equate to NULL. */
4580:ThirdParty/FreeRTOS/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4581:ThirdParty/FreeRTOS/tasks.c **** 
4582:ThirdParty/FreeRTOS/tasks.c ****         if( pxTaskStatusArray != NULL )
4583:ThirdParty/FreeRTOS/tasks.c ****         {
4584:ThirdParty/FreeRTOS/tasks.c ****             /* Generate the (binary) data. */
4585:ThirdParty/FreeRTOS/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4586:ThirdParty/FreeRTOS/tasks.c **** 
4587:ThirdParty/FreeRTOS/tasks.c ****             /* For percentage calculations. */
4588:ThirdParty/FreeRTOS/tasks.c ****             ulTotalTime /= 100UL;
4589:ThirdParty/FreeRTOS/tasks.c **** 
4590:ThirdParty/FreeRTOS/tasks.c ****             /* Avoid divide by zero errors. */
4591:ThirdParty/FreeRTOS/tasks.c ****             if( ulTotalTime > 0UL )
4592:ThirdParty/FreeRTOS/tasks.c ****             {
4593:ThirdParty/FreeRTOS/tasks.c ****                 /* Create a human readable table from the binary data. */
4594:ThirdParty/FreeRTOS/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4595:ThirdParty/FreeRTOS/tasks.c ****                 {
4596:ThirdParty/FreeRTOS/tasks.c ****                     /* What percentage of the total run time has the task used?
4597:ThirdParty/FreeRTOS/tasks.c ****                      * This will always be rounded down to the nearest integer.
4598:ThirdParty/FreeRTOS/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4599:ThirdParty/FreeRTOS/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4600:ThirdParty/FreeRTOS/tasks.c **** 
4601:ThirdParty/FreeRTOS/tasks.c ****                     /* Write the task name to the string, padding with
4602:ThirdParty/FreeRTOS/tasks.c ****                      * spaces so it can be printed in tabular form more
4603:ThirdParty/FreeRTOS/tasks.c ****                      * easily. */
4604:ThirdParty/FreeRTOS/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4605:ThirdParty/FreeRTOS/tasks.c **** 
4606:ThirdParty/FreeRTOS/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4607:ThirdParty/FreeRTOS/tasks.c ****                     {
4608:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4609:ThirdParty/FreeRTOS/tasks.c ****                         {
4610:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4611:ThirdParty/FreeRTOS/tasks.c ****                         }
4612:ThirdParty/FreeRTOS/tasks.c ****                         #else
4613:ThirdParty/FreeRTOS/tasks.c ****                         {
4614:ThirdParty/FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 102


4615:ThirdParty/FreeRTOS/tasks.c ****                              * printf() library can be used. */
4616:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4617:ThirdParty/FreeRTOS/tasks.c ****                         }
4618:ThirdParty/FreeRTOS/tasks.c ****                         #endif
4619:ThirdParty/FreeRTOS/tasks.c ****                     }
4620:ThirdParty/FreeRTOS/tasks.c ****                     else
4621:ThirdParty/FreeRTOS/tasks.c ****                     {
4622:ThirdParty/FreeRTOS/tasks.c ****                         /* If the percentage is zero here then the task has
4623:ThirdParty/FreeRTOS/tasks.c ****                          * consumed less than 1% of the total run time. */
4624:ThirdParty/FreeRTOS/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4625:ThirdParty/FreeRTOS/tasks.c ****                         {
4626:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4627:ThirdParty/FreeRTOS/tasks.c ****                         }
4628:ThirdParty/FreeRTOS/tasks.c ****                         #else
4629:ThirdParty/FreeRTOS/tasks.c ****                         {
4630:ThirdParty/FreeRTOS/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4631:ThirdParty/FreeRTOS/tasks.c ****                              * printf() library can be used. */
4632:ThirdParty/FreeRTOS/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4633:ThirdParty/FreeRTOS/tasks.c ****                         }
4634:ThirdParty/FreeRTOS/tasks.c ****                         #endif
4635:ThirdParty/FreeRTOS/tasks.c ****                     }
4636:ThirdParty/FreeRTOS/tasks.c **** 
4637:ThirdParty/FreeRTOS/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4638:ThirdParty/FreeRTOS/tasks.c ****                 }
4639:ThirdParty/FreeRTOS/tasks.c ****             }
4640:ThirdParty/FreeRTOS/tasks.c ****             else
4641:ThirdParty/FreeRTOS/tasks.c ****             {
4642:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4643:ThirdParty/FreeRTOS/tasks.c ****             }
4644:ThirdParty/FreeRTOS/tasks.c **** 
4645:ThirdParty/FreeRTOS/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4646:ThirdParty/FreeRTOS/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4647:ThirdParty/FreeRTOS/tasks.c ****             vPortFree( pxTaskStatusArray );
4648:ThirdParty/FreeRTOS/tasks.c ****         }
4649:ThirdParty/FreeRTOS/tasks.c ****         else
4650:ThirdParty/FreeRTOS/tasks.c ****         {
4651:ThirdParty/FreeRTOS/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4652:ThirdParty/FreeRTOS/tasks.c ****         }
4653:ThirdParty/FreeRTOS/tasks.c ****     }
4654:ThirdParty/FreeRTOS/tasks.c **** 
4655:ThirdParty/FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4656:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4657:ThirdParty/FreeRTOS/tasks.c **** 
4658:ThirdParty/FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4659:ThirdParty/FreeRTOS/tasks.c **** {
4660:ThirdParty/FreeRTOS/tasks.c ****     TickType_t uxReturn;
4661:ThirdParty/FreeRTOS/tasks.c **** 
4662:ThirdParty/FreeRTOS/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4663:ThirdParty/FreeRTOS/tasks.c **** 
4664:ThirdParty/FreeRTOS/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4665:ThirdParty/FreeRTOS/tasks.c ****      * queues and semaphores. */
4666:ThirdParty/FreeRTOS/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4667:ThirdParty/FreeRTOS/tasks.c **** 
4668:ThirdParty/FreeRTOS/tasks.c ****     return uxReturn;
4669:ThirdParty/FreeRTOS/tasks.c **** }
4670:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4671:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 103


4672:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4673:ThirdParty/FreeRTOS/tasks.c **** 
4674:ThirdParty/FreeRTOS/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4675:ThirdParty/FreeRTOS/tasks.c ****     {
4676:ThirdParty/FreeRTOS/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4677:ThirdParty/FreeRTOS/tasks.c ****          * then pxCurrentTCB will be NULL. */
4678:ThirdParty/FreeRTOS/tasks.c ****         if( pxCurrentTCB != NULL )
4679:ThirdParty/FreeRTOS/tasks.c ****         {
4680:ThirdParty/FreeRTOS/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4681:ThirdParty/FreeRTOS/tasks.c ****         }
4682:ThirdParty/FreeRTOS/tasks.c **** 
4683:ThirdParty/FreeRTOS/tasks.c ****         return pxCurrentTCB;
4684:ThirdParty/FreeRTOS/tasks.c ****     }
4685:ThirdParty/FreeRTOS/tasks.c **** 
4686:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4687:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4688:ThirdParty/FreeRTOS/tasks.c **** 
4689:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4690:ThirdParty/FreeRTOS/tasks.c **** 
4691:ThirdParty/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4692:ThirdParty/FreeRTOS/tasks.c ****                                       BaseType_t xClearCountOnExit,
4693:ThirdParty/FreeRTOS/tasks.c ****                                       TickType_t xTicksToWait )
4694:ThirdParty/FreeRTOS/tasks.c ****     {
4695:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
4696:ThirdParty/FreeRTOS/tasks.c **** 
4697:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4698:ThirdParty/FreeRTOS/tasks.c **** 
4699:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4700:ThirdParty/FreeRTOS/tasks.c ****         {
4701:ThirdParty/FreeRTOS/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4702:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4703:ThirdParty/FreeRTOS/tasks.c ****             {
4704:ThirdParty/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4705:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4706:ThirdParty/FreeRTOS/tasks.c **** 
4707:ThirdParty/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4708:ThirdParty/FreeRTOS/tasks.c ****                 {
4709:ThirdParty/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4710:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4711:ThirdParty/FreeRTOS/tasks.c **** 
4712:ThirdParty/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4713:ThirdParty/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4714:ThirdParty/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4715:ThirdParty/FreeRTOS/tasks.c ****                      * application code should ever do. */
4716:ThirdParty/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4717:ThirdParty/FreeRTOS/tasks.c ****                 }
4718:ThirdParty/FreeRTOS/tasks.c ****                 else
4719:ThirdParty/FreeRTOS/tasks.c ****                 {
4720:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4721:ThirdParty/FreeRTOS/tasks.c ****                 }
4722:ThirdParty/FreeRTOS/tasks.c ****             }
4723:ThirdParty/FreeRTOS/tasks.c ****             else
4724:ThirdParty/FreeRTOS/tasks.c ****             {
4725:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4726:ThirdParty/FreeRTOS/tasks.c ****             }
4727:ThirdParty/FreeRTOS/tasks.c ****         }
4728:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 104


4729:ThirdParty/FreeRTOS/tasks.c **** 
4730:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4731:ThirdParty/FreeRTOS/tasks.c ****         {
4732:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4733:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4734:ThirdParty/FreeRTOS/tasks.c **** 
4735:ThirdParty/FreeRTOS/tasks.c ****             if( ulReturn != 0UL )
4736:ThirdParty/FreeRTOS/tasks.c ****             {
4737:ThirdParty/FreeRTOS/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4738:ThirdParty/FreeRTOS/tasks.c ****                 {
4739:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4740:ThirdParty/FreeRTOS/tasks.c ****                 }
4741:ThirdParty/FreeRTOS/tasks.c ****                 else
4742:ThirdParty/FreeRTOS/tasks.c ****                 {
4743:ThirdParty/FreeRTOS/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4744:ThirdParty/FreeRTOS/tasks.c ****                 }
4745:ThirdParty/FreeRTOS/tasks.c ****             }
4746:ThirdParty/FreeRTOS/tasks.c ****             else
4747:ThirdParty/FreeRTOS/tasks.c ****             {
4748:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4749:ThirdParty/FreeRTOS/tasks.c ****             }
4750:ThirdParty/FreeRTOS/tasks.c **** 
4751:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4752:ThirdParty/FreeRTOS/tasks.c ****         }
4753:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4754:ThirdParty/FreeRTOS/tasks.c **** 
4755:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
4756:ThirdParty/FreeRTOS/tasks.c ****     }
4757:ThirdParty/FreeRTOS/tasks.c **** 
4758:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4759:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4760:ThirdParty/FreeRTOS/tasks.c **** 
4761:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4762:ThirdParty/FreeRTOS/tasks.c **** 
4763:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4764:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4765:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4766:ThirdParty/FreeRTOS/tasks.c ****                                        uint32_t * pulNotificationValue,
4767:ThirdParty/FreeRTOS/tasks.c ****                                        TickType_t xTicksToWait )
4768:ThirdParty/FreeRTOS/tasks.c ****     {
4769:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
4770:ThirdParty/FreeRTOS/tasks.c **** 
4771:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4772:ThirdParty/FreeRTOS/tasks.c **** 
4773:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4774:ThirdParty/FreeRTOS/tasks.c ****         {
4775:ThirdParty/FreeRTOS/tasks.c ****             /* Only block if a notification is not already pending. */
4776:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4777:ThirdParty/FreeRTOS/tasks.c ****             {
4778:ThirdParty/FreeRTOS/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4779:ThirdParty/FreeRTOS/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4780:ThirdParty/FreeRTOS/tasks.c ****                  * clear the value to zero. */
4781:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4782:ThirdParty/FreeRTOS/tasks.c **** 
4783:ThirdParty/FreeRTOS/tasks.c ****                 /* Mark this task as waiting for a notification. */
4784:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4785:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 105


4786:ThirdParty/FreeRTOS/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4787:ThirdParty/FreeRTOS/tasks.c ****                 {
4788:ThirdParty/FreeRTOS/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4789:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4790:ThirdParty/FreeRTOS/tasks.c **** 
4791:ThirdParty/FreeRTOS/tasks.c ****                     /* All ports are written to allow a yield in a critical
4792:ThirdParty/FreeRTOS/tasks.c ****                      * section (some will yield immediately, others wait until the
4793:ThirdParty/FreeRTOS/tasks.c ****                      * critical section exits) - but it is not something that
4794:ThirdParty/FreeRTOS/tasks.c ****                      * application code should ever do. */
4795:ThirdParty/FreeRTOS/tasks.c ****                     portYIELD_WITHIN_API();
4796:ThirdParty/FreeRTOS/tasks.c ****                 }
4797:ThirdParty/FreeRTOS/tasks.c ****                 else
4798:ThirdParty/FreeRTOS/tasks.c ****                 {
4799:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4800:ThirdParty/FreeRTOS/tasks.c ****                 }
4801:ThirdParty/FreeRTOS/tasks.c ****             }
4802:ThirdParty/FreeRTOS/tasks.c ****             else
4803:ThirdParty/FreeRTOS/tasks.c ****             {
4804:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:ThirdParty/FreeRTOS/tasks.c ****             }
4806:ThirdParty/FreeRTOS/tasks.c ****         }
4807:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4808:ThirdParty/FreeRTOS/tasks.c **** 
4809:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4810:ThirdParty/FreeRTOS/tasks.c ****         {
4811:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4812:ThirdParty/FreeRTOS/tasks.c **** 
4813:ThirdParty/FreeRTOS/tasks.c ****             if( pulNotificationValue != NULL )
4814:ThirdParty/FreeRTOS/tasks.c ****             {
4815:ThirdParty/FreeRTOS/tasks.c ****                 /* Output the current notification value, which may or may not
4816:ThirdParty/FreeRTOS/tasks.c ****                  * have changed. */
4817:ThirdParty/FreeRTOS/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4818:ThirdParty/FreeRTOS/tasks.c ****             }
4819:ThirdParty/FreeRTOS/tasks.c **** 
4820:ThirdParty/FreeRTOS/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4821:ThirdParty/FreeRTOS/tasks.c ****              * blocked state (because a notification was already pending) or the
4822:ThirdParty/FreeRTOS/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4823:ThirdParty/FreeRTOS/tasks.c ****              * unblocked because of a timeout. */
4824:ThirdParty/FreeRTOS/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4825:ThirdParty/FreeRTOS/tasks.c ****             {
4826:ThirdParty/FreeRTOS/tasks.c ****                 /* A notification was not received. */
4827:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFALSE;
4828:ThirdParty/FreeRTOS/tasks.c ****             }
4829:ThirdParty/FreeRTOS/tasks.c ****             else
4830:ThirdParty/FreeRTOS/tasks.c ****             {
4831:ThirdParty/FreeRTOS/tasks.c ****                 /* A notification was already pending or a notification was
4832:ThirdParty/FreeRTOS/tasks.c ****                  * received while the task was waiting. */
4833:ThirdParty/FreeRTOS/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4834:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
4835:ThirdParty/FreeRTOS/tasks.c ****             }
4836:ThirdParty/FreeRTOS/tasks.c **** 
4837:ThirdParty/FreeRTOS/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4838:ThirdParty/FreeRTOS/tasks.c ****         }
4839:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4840:ThirdParty/FreeRTOS/tasks.c **** 
4841:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4842:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 106


4843:ThirdParty/FreeRTOS/tasks.c **** 
4844:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4845:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4846:ThirdParty/FreeRTOS/tasks.c **** 
4847:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4848:ThirdParty/FreeRTOS/tasks.c **** 
4849:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4850:ThirdParty/FreeRTOS/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4851:ThirdParty/FreeRTOS/tasks.c ****                                    uint32_t ulValue,
4852:ThirdParty/FreeRTOS/tasks.c ****                                    eNotifyAction eAction,
4853:ThirdParty/FreeRTOS/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4854:ThirdParty/FreeRTOS/tasks.c ****     {
4855:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4856:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4857:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4858:ThirdParty/FreeRTOS/tasks.c **** 
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4860:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4861:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
4862:ThirdParty/FreeRTOS/tasks.c **** 
4863:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
4864:ThirdParty/FreeRTOS/tasks.c ****         {
4865:ThirdParty/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4866:ThirdParty/FreeRTOS/tasks.c ****             {
4867:ThirdParty/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4868:ThirdParty/FreeRTOS/tasks.c ****             }
4869:ThirdParty/FreeRTOS/tasks.c **** 
4870:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4871:ThirdParty/FreeRTOS/tasks.c **** 
4872:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4873:ThirdParty/FreeRTOS/tasks.c **** 
4874:ThirdParty/FreeRTOS/tasks.c ****             switch( eAction )
4875:ThirdParty/FreeRTOS/tasks.c ****             {
4876:ThirdParty/FreeRTOS/tasks.c ****                 case eSetBits:
4877:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4878:ThirdParty/FreeRTOS/tasks.c ****                     break;
4879:ThirdParty/FreeRTOS/tasks.c **** 
4880:ThirdParty/FreeRTOS/tasks.c ****                 case eIncrement:
4881:ThirdParty/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4882:ThirdParty/FreeRTOS/tasks.c ****                     break;
4883:ThirdParty/FreeRTOS/tasks.c **** 
4884:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
4885:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4886:ThirdParty/FreeRTOS/tasks.c ****                     break;
4887:ThirdParty/FreeRTOS/tasks.c **** 
4888:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
4889:ThirdParty/FreeRTOS/tasks.c **** 
4890:ThirdParty/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4891:ThirdParty/FreeRTOS/tasks.c ****                     {
4892:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4893:ThirdParty/FreeRTOS/tasks.c ****                     }
4894:ThirdParty/FreeRTOS/tasks.c ****                     else
4895:ThirdParty/FreeRTOS/tasks.c ****                     {
4896:ThirdParty/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
4897:ThirdParty/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
4898:ThirdParty/FreeRTOS/tasks.c ****                     }
4899:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 107


4900:ThirdParty/FreeRTOS/tasks.c ****                     break;
4901:ThirdParty/FreeRTOS/tasks.c **** 
4902:ThirdParty/FreeRTOS/tasks.c ****                 case eNoAction:
4903:ThirdParty/FreeRTOS/tasks.c **** 
4904:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
4905:ThirdParty/FreeRTOS/tasks.c ****                      * updated. */
4906:ThirdParty/FreeRTOS/tasks.c ****                     break;
4907:ThirdParty/FreeRTOS/tasks.c **** 
4908:ThirdParty/FreeRTOS/tasks.c ****                 default:
4909:ThirdParty/FreeRTOS/tasks.c **** 
4910:ThirdParty/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
4911:ThirdParty/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
4912:ThirdParty/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
4913:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4914:ThirdParty/FreeRTOS/tasks.c **** 
4915:ThirdParty/FreeRTOS/tasks.c ****                     break;
4916:ThirdParty/FreeRTOS/tasks.c ****             }
4917:ThirdParty/FreeRTOS/tasks.c **** 
4918:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4919:ThirdParty/FreeRTOS/tasks.c **** 
4920:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4921:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
4922:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4923:ThirdParty/FreeRTOS/tasks.c ****             {
4924:ThirdParty/FreeRTOS/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4925:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4926:ThirdParty/FreeRTOS/tasks.c **** 
4927:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
4928:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4929:ThirdParty/FreeRTOS/tasks.c **** 
4930:ThirdParty/FreeRTOS/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4931:ThirdParty/FreeRTOS/tasks.c ****                 {
4932:ThirdParty/FreeRTOS/tasks.c ****                     /* If a task is blocked waiting for a notification then
4933:ThirdParty/FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4934:ThirdParty/FreeRTOS/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4935:ThirdParty/FreeRTOS/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4936:ThirdParty/FreeRTOS/tasks.c ****                      * because it will automatically get reset to a new value when
4937:ThirdParty/FreeRTOS/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4938:ThirdParty/FreeRTOS/tasks.c ****                      * tickless idling is used it might be more important to enter
4939:ThirdParty/FreeRTOS/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4940:ThirdParty/FreeRTOS/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4941:ThirdParty/FreeRTOS/tasks.c ****                      * earliest possible time. */
4942:ThirdParty/FreeRTOS/tasks.c ****                     prvResetNextTaskUnblockTime();
4943:ThirdParty/FreeRTOS/tasks.c ****                 }
4944:ThirdParty/FreeRTOS/tasks.c ****                 #endif
4945:ThirdParty/FreeRTOS/tasks.c **** 
4946:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4947:ThirdParty/FreeRTOS/tasks.c ****                 {
4948:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
4949:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
4950:ThirdParty/FreeRTOS/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
4951:ThirdParty/FreeRTOS/tasks.c ****                 }
4952:ThirdParty/FreeRTOS/tasks.c ****                 else
4953:ThirdParty/FreeRTOS/tasks.c ****                 {
4954:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4955:ThirdParty/FreeRTOS/tasks.c ****                 }
4956:ThirdParty/FreeRTOS/tasks.c ****             }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 108


4957:ThirdParty/FreeRTOS/tasks.c ****             else
4958:ThirdParty/FreeRTOS/tasks.c ****             {
4959:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4960:ThirdParty/FreeRTOS/tasks.c ****             }
4961:ThirdParty/FreeRTOS/tasks.c ****         }
4962:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
4963:ThirdParty/FreeRTOS/tasks.c **** 
4964:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
4965:ThirdParty/FreeRTOS/tasks.c ****     }
4966:ThirdParty/FreeRTOS/tasks.c **** 
4967:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4968:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4969:ThirdParty/FreeRTOS/tasks.c **** 
4970:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4971:ThirdParty/FreeRTOS/tasks.c **** 
4972:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4973:ThirdParty/FreeRTOS/tasks.c ****                                           UBaseType_t uxIndexToNotify,
4974:ThirdParty/FreeRTOS/tasks.c ****                                           uint32_t ulValue,
4975:ThirdParty/FreeRTOS/tasks.c ****                                           eNotifyAction eAction,
4976:ThirdParty/FreeRTOS/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
4977:ThirdParty/FreeRTOS/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4978:ThirdParty/FreeRTOS/tasks.c ****     {
4979:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
4980:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
4981:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
4982:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
4983:ThirdParty/FreeRTOS/tasks.c **** 
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
4985:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4986:ThirdParty/FreeRTOS/tasks.c **** 
4987:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
4988:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
4989:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
4990:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4991:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4992:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
4993:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4994:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
4995:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
4996:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4997:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
4998:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4999:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5000:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5001:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
5002:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5003:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5004:ThirdParty/FreeRTOS/tasks.c **** 
5005:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5006:ThirdParty/FreeRTOS/tasks.c **** 
5007:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5008:ThirdParty/FreeRTOS/tasks.c ****         {
5009:ThirdParty/FreeRTOS/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5010:ThirdParty/FreeRTOS/tasks.c ****             {
5011:ThirdParty/FreeRTOS/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5012:ThirdParty/FreeRTOS/tasks.c ****             }
5013:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 109


5014:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5015:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5016:ThirdParty/FreeRTOS/tasks.c **** 
5017:ThirdParty/FreeRTOS/tasks.c ****             switch( eAction )
5018:ThirdParty/FreeRTOS/tasks.c ****             {
5019:ThirdParty/FreeRTOS/tasks.c ****                 case eSetBits:
5020:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5021:ThirdParty/FreeRTOS/tasks.c ****                     break;
5022:ThirdParty/FreeRTOS/tasks.c **** 
5023:ThirdParty/FreeRTOS/tasks.c ****                 case eIncrement:
5024:ThirdParty/FreeRTOS/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5025:ThirdParty/FreeRTOS/tasks.c ****                     break;
5026:ThirdParty/FreeRTOS/tasks.c **** 
5027:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithOverwrite:
5028:ThirdParty/FreeRTOS/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5029:ThirdParty/FreeRTOS/tasks.c ****                     break;
5030:ThirdParty/FreeRTOS/tasks.c **** 
5031:ThirdParty/FreeRTOS/tasks.c ****                 case eSetValueWithoutOverwrite:
5032:ThirdParty/FreeRTOS/tasks.c **** 
5033:ThirdParty/FreeRTOS/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5034:ThirdParty/FreeRTOS/tasks.c ****                     {
5035:ThirdParty/FreeRTOS/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5036:ThirdParty/FreeRTOS/tasks.c ****                     }
5037:ThirdParty/FreeRTOS/tasks.c ****                     else
5038:ThirdParty/FreeRTOS/tasks.c ****                     {
5039:ThirdParty/FreeRTOS/tasks.c ****                         /* The value could not be written to the task. */
5040:ThirdParty/FreeRTOS/tasks.c ****                         xReturn = pdFAIL;
5041:ThirdParty/FreeRTOS/tasks.c ****                     }
5042:ThirdParty/FreeRTOS/tasks.c **** 
5043:ThirdParty/FreeRTOS/tasks.c ****                     break;
5044:ThirdParty/FreeRTOS/tasks.c **** 
5045:ThirdParty/FreeRTOS/tasks.c ****                 case eNoAction:
5046:ThirdParty/FreeRTOS/tasks.c **** 
5047:ThirdParty/FreeRTOS/tasks.c ****                     /* The task is being notified without its notify value being
5048:ThirdParty/FreeRTOS/tasks.c ****                      * updated. */
5049:ThirdParty/FreeRTOS/tasks.c ****                     break;
5050:ThirdParty/FreeRTOS/tasks.c **** 
5051:ThirdParty/FreeRTOS/tasks.c ****                 default:
5052:ThirdParty/FreeRTOS/tasks.c **** 
5053:ThirdParty/FreeRTOS/tasks.c ****                     /* Should not get here if all enums are handled.
5054:ThirdParty/FreeRTOS/tasks.c ****                      * Artificially force an assert by testing a value the
5055:ThirdParty/FreeRTOS/tasks.c ****                      * compiler can't assume is const. */
5056:ThirdParty/FreeRTOS/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5057:ThirdParty/FreeRTOS/tasks.c ****                     break;
5058:ThirdParty/FreeRTOS/tasks.c ****             }
5059:ThirdParty/FreeRTOS/tasks.c **** 
5060:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5061:ThirdParty/FreeRTOS/tasks.c **** 
5062:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5063:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5064:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5065:ThirdParty/FreeRTOS/tasks.c ****             {
5066:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5067:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5068:ThirdParty/FreeRTOS/tasks.c **** 
5069:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5070:ThirdParty/FreeRTOS/tasks.c ****                 {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 110


5071:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5072:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5073:ThirdParty/FreeRTOS/tasks.c ****                 }
5074:ThirdParty/FreeRTOS/tasks.c ****                 else
5075:ThirdParty/FreeRTOS/tasks.c ****                 {
5076:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5077:ThirdParty/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5078:ThirdParty/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5079:ThirdParty/FreeRTOS/tasks.c ****                 }
5080:ThirdParty/FreeRTOS/tasks.c **** 
5081:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5082:ThirdParty/FreeRTOS/tasks.c ****                 {
5083:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5084:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5085:ThirdParty/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5086:ThirdParty/FreeRTOS/tasks.c ****                     {
5087:ThirdParty/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5088:ThirdParty/FreeRTOS/tasks.c ****                     }
5089:ThirdParty/FreeRTOS/tasks.c **** 
5090:ThirdParty/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5091:ThirdParty/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5092:ThirdParty/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5093:ThirdParty/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
5094:ThirdParty/FreeRTOS/tasks.c ****                 }
5095:ThirdParty/FreeRTOS/tasks.c ****                 else
5096:ThirdParty/FreeRTOS/tasks.c ****                 {
5097:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5098:ThirdParty/FreeRTOS/tasks.c ****                 }
5099:ThirdParty/FreeRTOS/tasks.c ****             }
5100:ThirdParty/FreeRTOS/tasks.c ****         }
5101:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5102:ThirdParty/FreeRTOS/tasks.c **** 
5103:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
5104:ThirdParty/FreeRTOS/tasks.c ****     }
5105:ThirdParty/FreeRTOS/tasks.c **** 
5106:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5107:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5108:ThirdParty/FreeRTOS/tasks.c **** 
5109:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5110:ThirdParty/FreeRTOS/tasks.c **** 
5111:ThirdParty/FreeRTOS/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5112:ThirdParty/FreeRTOS/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5113:ThirdParty/FreeRTOS/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5114:ThirdParty/FreeRTOS/tasks.c ****     {
5115:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5116:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
5117:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5118:ThirdParty/FreeRTOS/tasks.c **** 
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
5120:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5121:ThirdParty/FreeRTOS/tasks.c **** 
5122:ThirdParty/FreeRTOS/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5123:ThirdParty/FreeRTOS/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5124:ThirdParty/FreeRTOS/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5125:ThirdParty/FreeRTOS/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5126:ThirdParty/FreeRTOS/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5127:ThirdParty/FreeRTOS/tasks.c ****          * is defined in FreeRTOSConfig.h then
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 111


5128:ThirdParty/FreeRTOS/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5129:ThirdParty/FreeRTOS/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5130:ThirdParty/FreeRTOS/tasks.c ****          * been assigned a priority above the configured maximum system call
5131:ThirdParty/FreeRTOS/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5132:ThirdParty/FreeRTOS/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5133:ThirdParty/FreeRTOS/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5134:ThirdParty/FreeRTOS/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5135:ThirdParty/FreeRTOS/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5136:ThirdParty/FreeRTOS/tasks.c ****          * provided on the following link:
5137:ThirdParty/FreeRTOS/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5138:ThirdParty/FreeRTOS/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5139:ThirdParty/FreeRTOS/tasks.c **** 
5140:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
5141:ThirdParty/FreeRTOS/tasks.c **** 
5142:ThirdParty/FreeRTOS/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5143:ThirdParty/FreeRTOS/tasks.c ****         {
5144:ThirdParty/FreeRTOS/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5145:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5146:ThirdParty/FreeRTOS/tasks.c **** 
5147:ThirdParty/FreeRTOS/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5148:ThirdParty/FreeRTOS/tasks.c ****              * semaphore. */
5149:ThirdParty/FreeRTOS/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5150:ThirdParty/FreeRTOS/tasks.c **** 
5151:ThirdParty/FreeRTOS/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5152:ThirdParty/FreeRTOS/tasks.c **** 
5153:ThirdParty/FreeRTOS/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5154:ThirdParty/FreeRTOS/tasks.c ****              * notification then unblock it now. */
5155:ThirdParty/FreeRTOS/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5156:ThirdParty/FreeRTOS/tasks.c ****             {
5157:ThirdParty/FreeRTOS/tasks.c ****                 /* The task should not have been on an event list. */
5158:ThirdParty/FreeRTOS/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5159:ThirdParty/FreeRTOS/tasks.c **** 
5160:ThirdParty/FreeRTOS/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5161:ThirdParty/FreeRTOS/tasks.c ****                 {
5162:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5163:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5164:ThirdParty/FreeRTOS/tasks.c ****                 }
5165:ThirdParty/FreeRTOS/tasks.c ****                 else
5166:ThirdParty/FreeRTOS/tasks.c ****                 {
5167:ThirdParty/FreeRTOS/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5168:ThirdParty/FreeRTOS/tasks.c ****                      * this task pending until the scheduler is resumed. */
5169:ThirdParty/FreeRTOS/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5170:ThirdParty/FreeRTOS/tasks.c ****                 }
5171:ThirdParty/FreeRTOS/tasks.c **** 
5172:ThirdParty/FreeRTOS/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5173:ThirdParty/FreeRTOS/tasks.c ****                 {
5174:ThirdParty/FreeRTOS/tasks.c ****                     /* The notified task has a priority above the currently
5175:ThirdParty/FreeRTOS/tasks.c ****                      * executing task so a yield is required. */
5176:ThirdParty/FreeRTOS/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5177:ThirdParty/FreeRTOS/tasks.c ****                     {
5178:ThirdParty/FreeRTOS/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5179:ThirdParty/FreeRTOS/tasks.c ****                     }
5180:ThirdParty/FreeRTOS/tasks.c **** 
5181:ThirdParty/FreeRTOS/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5182:ThirdParty/FreeRTOS/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5183:ThirdParty/FreeRTOS/tasks.c ****                      * safe FreeRTOS function. */
5184:ThirdParty/FreeRTOS/tasks.c ****                     xYieldPending = pdTRUE;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 112


5185:ThirdParty/FreeRTOS/tasks.c ****                 }
5186:ThirdParty/FreeRTOS/tasks.c ****                 else
5187:ThirdParty/FreeRTOS/tasks.c ****                 {
5188:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5189:ThirdParty/FreeRTOS/tasks.c ****                 }
5190:ThirdParty/FreeRTOS/tasks.c ****             }
5191:ThirdParty/FreeRTOS/tasks.c ****         }
5192:ThirdParty/FreeRTOS/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5193:ThirdParty/FreeRTOS/tasks.c ****     }
5194:ThirdParty/FreeRTOS/tasks.c **** 
5195:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5196:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5197:ThirdParty/FreeRTOS/tasks.c **** 
5198:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5199:ThirdParty/FreeRTOS/tasks.c **** 
5200:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5201:ThirdParty/FreeRTOS/tasks.c ****                                              UBaseType_t uxIndexToClear )
5202:ThirdParty/FreeRTOS/tasks.c ****     {
5203:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5204:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
5205:ThirdParty/FreeRTOS/tasks.c **** 
5206:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5207:ThirdParty/FreeRTOS/tasks.c **** 
5208:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5209:ThirdParty/FreeRTOS/tasks.c ****          * its notification state cleared. */
5210:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5211:ThirdParty/FreeRTOS/tasks.c **** 
5212:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5213:ThirdParty/FreeRTOS/tasks.c ****         {
5214:ThirdParty/FreeRTOS/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5215:ThirdParty/FreeRTOS/tasks.c ****             {
5216:ThirdParty/FreeRTOS/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5217:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
5218:ThirdParty/FreeRTOS/tasks.c ****             }
5219:ThirdParty/FreeRTOS/tasks.c ****             else
5220:ThirdParty/FreeRTOS/tasks.c ****             {
5221:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdFAIL;
5222:ThirdParty/FreeRTOS/tasks.c ****             }
5223:ThirdParty/FreeRTOS/tasks.c ****         }
5224:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5225:ThirdParty/FreeRTOS/tasks.c **** 
5226:ThirdParty/FreeRTOS/tasks.c ****         return xReturn;
5227:ThirdParty/FreeRTOS/tasks.c ****     }
5228:ThirdParty/FreeRTOS/tasks.c **** 
5229:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5230:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5231:ThirdParty/FreeRTOS/tasks.c **** 
5232:ThirdParty/FreeRTOS/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5233:ThirdParty/FreeRTOS/tasks.c **** 
5234:ThirdParty/FreeRTOS/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5235:ThirdParty/FreeRTOS/tasks.c ****                                             UBaseType_t uxIndexToClear,
5236:ThirdParty/FreeRTOS/tasks.c ****                                             uint32_t ulBitsToClear )
5237:ThirdParty/FreeRTOS/tasks.c ****     {
5238:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
5239:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
5240:ThirdParty/FreeRTOS/tasks.c **** 
5241:ThirdParty/FreeRTOS/tasks.c ****         /* If null is passed in here then it is the calling task that is having
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 113


5242:ThirdParty/FreeRTOS/tasks.c ****          * its notification state cleared. */
5243:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5244:ThirdParty/FreeRTOS/tasks.c **** 
5245:ThirdParty/FreeRTOS/tasks.c ****         taskENTER_CRITICAL();
5246:ThirdParty/FreeRTOS/tasks.c ****         {
5247:ThirdParty/FreeRTOS/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5248:ThirdParty/FreeRTOS/tasks.c ****              * then clear the bit mask. */
5249:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5250:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5251:ThirdParty/FreeRTOS/tasks.c ****         }
5252:ThirdParty/FreeRTOS/tasks.c ****         taskEXIT_CRITICAL();
5253:ThirdParty/FreeRTOS/tasks.c **** 
5254:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
5255:ThirdParty/FreeRTOS/tasks.c ****     }
5256:ThirdParty/FreeRTOS/tasks.c **** 
5257:ThirdParty/FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5258:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5259:ThirdParty/FreeRTOS/tasks.c **** 
5260:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5261:ThirdParty/FreeRTOS/tasks.c **** 
5262:ThirdParty/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5263:ThirdParty/FreeRTOS/tasks.c ****     {
5264:ThirdParty/FreeRTOS/tasks.c ****         return xIdleTaskHandle->ulRunTimeCounter;
5265:ThirdParty/FreeRTOS/tasks.c ****     }
5266:ThirdParty/FreeRTOS/tasks.c **** 
5267:ThirdParty/FreeRTOS/tasks.c **** #endif
5268:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5269:ThirdParty/FreeRTOS/tasks.c **** 
5270:ThirdParty/FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5271:ThirdParty/FreeRTOS/tasks.c **** 
5272:ThirdParty/FreeRTOS/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5273:ThirdParty/FreeRTOS/tasks.c ****     {
5274:ThirdParty/FreeRTOS/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5275:ThirdParty/FreeRTOS/tasks.c **** 
5276:ThirdParty/FreeRTOS/tasks.c ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5277:ThirdParty/FreeRTOS/tasks.c **** 
5278:ThirdParty/FreeRTOS/tasks.c ****         /* For percentage calculations. */
5279:ThirdParty/FreeRTOS/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5280:ThirdParty/FreeRTOS/tasks.c **** 
5281:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid divide by zero errors. */
5282:ThirdParty/FreeRTOS/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5283:ThirdParty/FreeRTOS/tasks.c ****         {
5284:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5285:ThirdParty/FreeRTOS/tasks.c ****         }
5286:ThirdParty/FreeRTOS/tasks.c ****         else
5287:ThirdParty/FreeRTOS/tasks.c ****         {
5288:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = 0;
5289:ThirdParty/FreeRTOS/tasks.c ****         }
5290:ThirdParty/FreeRTOS/tasks.c **** 
5291:ThirdParty/FreeRTOS/tasks.c ****         return ulReturn;
5292:ThirdParty/FreeRTOS/tasks.c ****     }
5293:ThirdParty/FreeRTOS/tasks.c **** 
5294:ThirdParty/FreeRTOS/tasks.c **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5295:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5296:ThirdParty/FreeRTOS/tasks.c **** 
5297:ThirdParty/FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5298:ThirdParty/FreeRTOS/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 114


5299:ThirdParty/FreeRTOS/tasks.c **** {
 780              		.loc 1 5299 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		.loc 1 5299 1 is_stmt 0 view .LVU213
 785 0000 70B5     		push	{r4, r5, r6, lr}
 786              	.LCFI7:
 787              		.cfi_def_cfa_offset 16
 788              		.cfi_offset 4, -16
 789              		.cfi_offset 5, -12
 790              		.cfi_offset 6, -8
 791              		.cfi_offset 14, -4
 792 0002 0446     		mov	r4, r0
 793 0004 0D46     		mov	r5, r1
5300:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xTimeToWake;
 794              		.loc 1 5300 5 is_stmt 1 view .LVU214
5301:ThirdParty/FreeRTOS/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 795              		.loc 1 5301 5 view .LVU215
 796              		.loc 1 5301 22 is_stmt 0 view .LVU216
 797 0006 234B     		ldr	r3, .L66
 798 0008 1E68     		ldr	r6, [r3]
 799              	.LVL55:
5302:ThirdParty/FreeRTOS/tasks.c **** 
5303:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5304:ThirdParty/FreeRTOS/tasks.c ****     {
5305:ThirdParty/FreeRTOS/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5306:ThirdParty/FreeRTOS/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5307:ThirdParty/FreeRTOS/tasks.c ****          * when the task leaves the Blocked state. */
5308:ThirdParty/FreeRTOS/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5309:ThirdParty/FreeRTOS/tasks.c ****     }
5310:ThirdParty/FreeRTOS/tasks.c ****     #endif
5311:ThirdParty/FreeRTOS/tasks.c **** 
5312:ThirdParty/FreeRTOS/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5313:ThirdParty/FreeRTOS/tasks.c ****      * as the same list item is used for both lists. */
5314:ThirdParty/FreeRTOS/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800              		.loc 1 5314 5 is_stmt 1 view .LVU217
 801              		.loc 1 5314 38 is_stmt 0 view .LVU218
 802 000a 234B     		ldr	r3, .L66+4
 803 000c 1868     		ldr	r0, [r3]
 804              	.LVL56:
 805              		.loc 1 5314 9 view .LVU219
 806 000e 0430     		adds	r0, r0, #4
 807 0010 FFF7FEFF 		bl	uxListRemove
 808              	.LVL57:
 809              		.loc 1 5314 7 discriminator 1 view .LVU220
 810 0014 48B9     		cbnz	r0, .L60
5315:ThirdParty/FreeRTOS/tasks.c ****     {
5316:ThirdParty/FreeRTOS/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5317:ThirdParty/FreeRTOS/tasks.c ****          * check, and the port reset macro can be called directly. */
5318:ThirdParty/FreeRTOS/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 811              		.loc 1 5318 9 is_stmt 1 view .LVU221
 812 0016 204B     		ldr	r3, .L66+4
 813 0018 1B68     		ldr	r3, [r3]
 814 001a DB6A     		ldr	r3, [r3, #44]
 815 001c 0122     		movs	r2, #1
 816 001e 9A40     		lsls	r2, r2, r3
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 115


 817 0020 1E49     		ldr	r1, .L66+8
 818 0022 0B68     		ldr	r3, [r1]
 819 0024 23EA0203 		bic	r3, r3, r2
 820 0028 0B60     		str	r3, [r1]
 821              	.L60:
5319:ThirdParty/FreeRTOS/tasks.c ****     }
5320:ThirdParty/FreeRTOS/tasks.c ****     else
5321:ThirdParty/FreeRTOS/tasks.c ****     {
5322:ThirdParty/FreeRTOS/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 822              		.loc 1 5322 33 view .LVU222
5323:ThirdParty/FreeRTOS/tasks.c ****     }
5324:ThirdParty/FreeRTOS/tasks.c **** 
5325:ThirdParty/FreeRTOS/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5326:ThirdParty/FreeRTOS/tasks.c ****     {
5327:ThirdParty/FreeRTOS/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 823              		.loc 1 5327 9 view .LVU223
 824              		.loc 1 5327 11 is_stmt 0 view .LVU224
 825 002a B4F1FF3F 		cmp	r4, #-1
 826 002e 0DD0     		beq	.L65
 827              	.L61:
5328:ThirdParty/FreeRTOS/tasks.c ****         {
5329:ThirdParty/FreeRTOS/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5330:ThirdParty/FreeRTOS/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5331:ThirdParty/FreeRTOS/tasks.c ****              * indefinitely. */
5332:ThirdParty/FreeRTOS/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5333:ThirdParty/FreeRTOS/tasks.c ****         }
5334:ThirdParty/FreeRTOS/tasks.c ****         else
5335:ThirdParty/FreeRTOS/tasks.c ****         {
5336:ThirdParty/FreeRTOS/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5337:ThirdParty/FreeRTOS/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5338:ThirdParty/FreeRTOS/tasks.c ****              * kernel will manage it correctly. */
5339:ThirdParty/FreeRTOS/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 828              		.loc 1 5339 13 is_stmt 1 view .LVU225
 829              		.loc 1 5339 25 is_stmt 0 view .LVU226
 830 0030 3444     		add	r4, r4, r6
 831              	.LVL58:
5340:ThirdParty/FreeRTOS/tasks.c **** 
5341:ThirdParty/FreeRTOS/tasks.c ****             /* The list item will be inserted in wake time order. */
5342:ThirdParty/FreeRTOS/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 832              		.loc 1 5342 13 is_stmt 1 view .LVU227
 833 0032 194B     		ldr	r3, .L66+4
 834 0034 1B68     		ldr	r3, [r3]
 835 0036 5C60     		str	r4, [r3, #4]
5343:ThirdParty/FreeRTOS/tasks.c **** 
5344:ThirdParty/FreeRTOS/tasks.c ****             if( xTimeToWake < xConstTickCount )
 836              		.loc 1 5344 13 view .LVU228
 837              		.loc 1 5344 15 is_stmt 0 view .LVU229
 838 0038 A642     		cmp	r6, r4
 839 003a 1DD9     		bls	.L63
5345:ThirdParty/FreeRTOS/tasks.c ****             {
5346:ThirdParty/FreeRTOS/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5347:ThirdParty/FreeRTOS/tasks.c ****                  * list. */
5348:ThirdParty/FreeRTOS/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 840              		.loc 1 5348 17 is_stmt 1 view .LVU230
 841 003c 184B     		ldr	r3, .L66+12
 842 003e 1868     		ldr	r0, [r3]
 843              		.loc 1 5348 72 is_stmt 0 view .LVU231
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 116


 844 0040 154B     		ldr	r3, .L66+4
 845 0042 1968     		ldr	r1, [r3]
 846              		.loc 1 5348 17 view .LVU232
 847 0044 0431     		adds	r1, r1, #4
 848 0046 FFF7FEFF 		bl	vListInsert
 849              	.LVL59:
 850              	.L59:
5349:ThirdParty/FreeRTOS/tasks.c ****             }
5350:ThirdParty/FreeRTOS/tasks.c ****             else
5351:ThirdParty/FreeRTOS/tasks.c ****             {
5352:ThirdParty/FreeRTOS/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5353:ThirdParty/FreeRTOS/tasks.c ****                  * is used. */
5354:ThirdParty/FreeRTOS/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5355:ThirdParty/FreeRTOS/tasks.c **** 
5356:ThirdParty/FreeRTOS/tasks.c ****                 /* If the task entering the blocked state was placed at the
5357:ThirdParty/FreeRTOS/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5358:ThirdParty/FreeRTOS/tasks.c ****                  * needs to be updated too. */
5359:ThirdParty/FreeRTOS/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
5360:ThirdParty/FreeRTOS/tasks.c ****                 {
5361:ThirdParty/FreeRTOS/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
5362:ThirdParty/FreeRTOS/tasks.c ****                 }
5363:ThirdParty/FreeRTOS/tasks.c ****                 else
5364:ThirdParty/FreeRTOS/tasks.c ****                 {
5365:ThirdParty/FreeRTOS/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5366:ThirdParty/FreeRTOS/tasks.c ****                 }
5367:ThirdParty/FreeRTOS/tasks.c ****             }
5368:ThirdParty/FreeRTOS/tasks.c ****         }
5369:ThirdParty/FreeRTOS/tasks.c ****     }
5370:ThirdParty/FreeRTOS/tasks.c ****     #else /* INCLUDE_vTaskSuspend */
5371:ThirdParty/FreeRTOS/tasks.c ****     {
5372:ThirdParty/FreeRTOS/tasks.c ****         /* Calculate the time at which the task should be woken if the event
5373:ThirdParty/FreeRTOS/tasks.c ****          * does not occur.  This may overflow but this doesn't matter, the kernel
5374:ThirdParty/FreeRTOS/tasks.c ****          * will manage it correctly. */
5375:ThirdParty/FreeRTOS/tasks.c ****         xTimeToWake = xConstTickCount + xTicksToWait;
5376:ThirdParty/FreeRTOS/tasks.c **** 
5377:ThirdParty/FreeRTOS/tasks.c ****         /* The list item will be inserted in wake time order. */
5378:ThirdParty/FreeRTOS/tasks.c ****         listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5379:ThirdParty/FreeRTOS/tasks.c **** 
5380:ThirdParty/FreeRTOS/tasks.c ****         if( xTimeToWake < xConstTickCount )
5381:ThirdParty/FreeRTOS/tasks.c ****         {
5382:ThirdParty/FreeRTOS/tasks.c ****             /* Wake time has overflowed.  Place this item in the overflow list. */
5383:ThirdParty/FreeRTOS/tasks.c ****             vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5384:ThirdParty/FreeRTOS/tasks.c ****         }
5385:ThirdParty/FreeRTOS/tasks.c ****         else
5386:ThirdParty/FreeRTOS/tasks.c ****         {
5387:ThirdParty/FreeRTOS/tasks.c ****             /* The wake time has not overflowed, so the current block list is used. */
5388:ThirdParty/FreeRTOS/tasks.c ****             vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5389:ThirdParty/FreeRTOS/tasks.c **** 
5390:ThirdParty/FreeRTOS/tasks.c ****             /* If the task entering the blocked state was placed at the head of the
5391:ThirdParty/FreeRTOS/tasks.c ****              * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5392:ThirdParty/FreeRTOS/tasks.c ****              * too. */
5393:ThirdParty/FreeRTOS/tasks.c ****             if( xTimeToWake < xNextTaskUnblockTime )
5394:ThirdParty/FreeRTOS/tasks.c ****             {
5395:ThirdParty/FreeRTOS/tasks.c ****                 xNextTaskUnblockTime = xTimeToWake;
5396:ThirdParty/FreeRTOS/tasks.c ****             }
5397:ThirdParty/FreeRTOS/tasks.c ****             else
5398:ThirdParty/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 117


5399:ThirdParty/FreeRTOS/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5400:ThirdParty/FreeRTOS/tasks.c ****             }
5401:ThirdParty/FreeRTOS/tasks.c ****         }
5402:ThirdParty/FreeRTOS/tasks.c **** 
5403:ThirdParty/FreeRTOS/tasks.c ****         /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5404:ThirdParty/FreeRTOS/tasks.c ****         ( void ) xCanBlockIndefinitely;
5405:ThirdParty/FreeRTOS/tasks.c ****     }
5406:ThirdParty/FreeRTOS/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
5407:ThirdParty/FreeRTOS/tasks.c **** }
 851              		.loc 1 5407 1 view .LVU233
 852 004a 70BD     		pop	{r4, r5, r6, pc}
 853              	.LVL60:
 854              	.L65:
5327:ThirdParty/FreeRTOS/tasks.c ****         {
 855              		.loc 1 5327 47 discriminator 1 view .LVU234
 856 004c 002D     		cmp	r5, #0
 857 004e EFD0     		beq	.L61
 858              	.LBB146:
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 859              		.loc 1 5332 13 is_stmt 1 view .LVU235
 860 0050 144A     		ldr	r2, .L66+16
 861 0052 5168     		ldr	r1, [r2, #4]
 862              	.LVL61:
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 863              		.loc 1 5332 13 view .LVU236
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 864              		.loc 1 5332 13 view .LVU237
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 865              		.loc 1 5332 13 view .LVU238
 866 0054 104B     		ldr	r3, .L66+4
 867 0056 1868     		ldr	r0, [r3]
 868 0058 8160     		str	r1, [r0, #8]
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 869              		.loc 1 5332 13 view .LVU239
 870 005a 1868     		ldr	r0, [r3]
 871 005c 8C68     		ldr	r4, [r1, #8]
 872              	.LVL62:
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 873              		.loc 1 5332 13 is_stmt 0 view .LVU240
 874 005e C460     		str	r4, [r0, #12]
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 875              		.loc 1 5332 13 is_stmt 1 view .LVU241
 876 0060 1868     		ldr	r0, [r3]
 877 0062 0430     		adds	r0, r0, #4
 878 0064 6060     		str	r0, [r4, #4]
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 879              		.loc 1 5332 13 view .LVU242
 880 0066 1868     		ldr	r0, [r3]
 881 0068 0430     		adds	r0, r0, #4
 882 006a 8860     		str	r0, [r1, #8]
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 883              		.loc 1 5332 13 view .LVU243
 884 006c 1B68     		ldr	r3, [r3]
 885 006e 5A61     		str	r2, [r3, #20]
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 886              		.loc 1 5332 13 view .LVU244
 887 0070 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 118


 888 0072 0133     		adds	r3, r3, #1
 889 0074 1360     		str	r3, [r2]
 890              	.LBE146:
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 891              		.loc 1 5332 85 view .LVU245
5332:ThirdParty/FreeRTOS/tasks.c ****         }
 892              		.loc 1 5332 13 is_stmt 0 view .LVU246
 893 0076 E8E7     		b	.L59
 894              	.LVL63:
 895              	.L63:
5354:ThirdParty/FreeRTOS/tasks.c **** 
 896              		.loc 1 5354 17 is_stmt 1 view .LVU247
 897 0078 0B4B     		ldr	r3, .L66+20
 898 007a 1868     		ldr	r0, [r3]
5354:ThirdParty/FreeRTOS/tasks.c **** 
 899              		.loc 1 5354 64 is_stmt 0 view .LVU248
 900 007c 064B     		ldr	r3, .L66+4
 901 007e 1968     		ldr	r1, [r3]
5354:ThirdParty/FreeRTOS/tasks.c **** 
 902              		.loc 1 5354 17 view .LVU249
 903 0080 0431     		adds	r1, r1, #4
 904 0082 FFF7FEFF 		bl	vListInsert
 905              	.LVL64:
5359:ThirdParty/FreeRTOS/tasks.c ****                 {
 906              		.loc 1 5359 17 is_stmt 1 view .LVU250
5359:ThirdParty/FreeRTOS/tasks.c ****                 {
 907              		.loc 1 5359 33 is_stmt 0 view .LVU251
 908 0086 094B     		ldr	r3, .L66+24
 909 0088 1B68     		ldr	r3, [r3]
5359:ThirdParty/FreeRTOS/tasks.c ****                 {
 910              		.loc 1 5359 19 view .LVU252
 911 008a A342     		cmp	r3, r4
 912 008c DDD9     		bls	.L59
5361:ThirdParty/FreeRTOS/tasks.c ****                 }
 913              		.loc 1 5361 21 is_stmt 1 view .LVU253
5361:ThirdParty/FreeRTOS/tasks.c ****                 }
 914              		.loc 1 5361 42 is_stmt 0 view .LVU254
 915 008e 074B     		ldr	r3, .L66+24
 916 0090 1C60     		str	r4, [r3]
5365:ThirdParty/FreeRTOS/tasks.c ****                 }
 917              		.loc 1 5365 45 is_stmt 1 view .LVU255
 918              		.loc 1 5407 1 is_stmt 0 view .LVU256
 919 0092 DAE7     		b	.L59
 920              	.L67:
 921              		.align	2
 922              	.L66:
 923 0094 00000000 		.word	xTickCount
 924 0098 00000000 		.word	pxCurrentTCB
 925 009c 00000000 		.word	uxTopReadyPriority
 926 00a0 00000000 		.word	pxOverflowDelayedTaskList
 927 00a4 00000000 		.word	xSuspendedTaskList
 928 00a8 00000000 		.word	pxDelayedTaskList
 929 00ac 00000000 		.word	xNextTaskUnblockTime
 930              		.cfi_endproc
 931              	.LFE51:
 933              		.section	.text.xTaskCreate,"ax",%progbits
 934              		.align	1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 119


 935              		.global	xTaskCreate
 936              		.syntax unified
 937              		.thumb
 938              		.thumb_func
 940              	xTaskCreate:
 941              	.LVL65:
 942              	.LFB5:
 727:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 943              		.loc 1 727 5 is_stmt 1 view -0
 944              		.cfi_startproc
 945              		@ args = 8, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 727:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxNewTCB;
 947              		.loc 1 727 5 is_stmt 0 view .LVU258
 948 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 949              	.LCFI8:
 950              		.cfi_def_cfa_offset 28
 951              		.cfi_offset 4, -28
 952              		.cfi_offset 5, -24
 953              		.cfi_offset 6, -20
 954              		.cfi_offset 7, -16
 955              		.cfi_offset 8, -12
 956              		.cfi_offset 9, -8
 957              		.cfi_offset 14, -4
 958 0004 85B0     		sub	sp, sp, #20
 959              	.LCFI9:
 960              		.cfi_def_cfa_offset 48
 961 0006 0746     		mov	r7, r0
 962 0008 8846     		mov	r8, r1
 963 000a 1446     		mov	r4, r2
 964 000c 1E46     		mov	r6, r3
 728:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 965              		.loc 1 728 9 is_stmt 1 view .LVU259
 729:ThirdParty/FreeRTOS/tasks.c **** 
 966              		.loc 1 729 9 view .LVU260
 967              	.LBB147:
 760:ThirdParty/FreeRTOS/tasks.c **** 
 968              		.loc 1 760 13 view .LVU261
 763:ThirdParty/FreeRTOS/tasks.c **** 
 969              		.loc 1 763 13 view .LVU262
 763:ThirdParty/FreeRTOS/tasks.c **** 
 970              		.loc 1 763 23 is_stmt 0 view .LVU263
 971 000e 9000     		lsls	r0, r2, #2
 972              	.LVL66:
 763:ThirdParty/FreeRTOS/tasks.c **** 
 973              		.loc 1 763 23 view .LVU264
 974 0010 FFF7FEFF 		bl	pvPortMalloc
 975              	.LVL67:
 765:ThirdParty/FreeRTOS/tasks.c ****             {
 976              		.loc 1 765 13 is_stmt 1 view .LVU265
 765:ThirdParty/FreeRTOS/tasks.c ****             {
 977              		.loc 1 765 15 is_stmt 0 view .LVU266
 978 0014 18B3     		cbz	r0, .L71
 979 0016 8146     		mov	r9, r0
 768:ThirdParty/FreeRTOS/tasks.c **** 
 980              		.loc 1 768 17 is_stmt 1 view .LVU267
 768:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 120


 981              		.loc 1 768 40 is_stmt 0 view .LVU268
 982 0018 4820     		movs	r0, #72
 983              	.LVL68:
 768:ThirdParty/FreeRTOS/tasks.c **** 
 984              		.loc 1 768 40 view .LVU269
 985 001a FFF7FEFF 		bl	pvPortMalloc
 986              	.LVL69:
 770:ThirdParty/FreeRTOS/tasks.c ****                 {
 987              		.loc 1 770 17 is_stmt 1 view .LVU270
 770:ThirdParty/FreeRTOS/tasks.c ****                 {
 988              		.loc 1 770 19 is_stmt 0 view .LVU271
 989 001e 0546     		mov	r5, r0
 990 0020 B8B1     		cbz	r0, .L70
 772:ThirdParty/FreeRTOS/tasks.c **** 
 991              		.loc 1 772 21 is_stmt 1 view .LVU272
 992 0022 4822     		movs	r2, #72
 993 0024 0021     		movs	r1, #0
 994 0026 FFF7FEFF 		bl	memset
 995              	.LVL70:
 775:ThirdParty/FreeRTOS/tasks.c ****                 }
 996              		.loc 1 775 21 view .LVU273
 775:ThirdParty/FreeRTOS/tasks.c ****                 }
 997              		.loc 1 775 39 is_stmt 0 view .LVU274
 998 002a C5F83090 		str	r9, [r5, #48]
 775:ThirdParty/FreeRTOS/tasks.c ****                 }
 999              		.loc 1 775 39 view .LVU275
 1000              	.LBE147:
 791:ThirdParty/FreeRTOS/tasks.c ****         {
 1001              		.loc 1 791 9 is_stmt 1 view .LVU276
 801:ThirdParty/FreeRTOS/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 1002              		.loc 1 801 13 view .LVU277
 1003 002e 0023     		movs	r3, #0
 1004 0030 0393     		str	r3, [sp, #12]
 1005 0032 0295     		str	r5, [sp, #8]
 1006 0034 0D9B     		ldr	r3, [sp, #52]
 1007 0036 0193     		str	r3, [sp, #4]
 1008 0038 0C9B     		ldr	r3, [sp, #48]
 1009 003a 0093     		str	r3, [sp]
 1010 003c 3346     		mov	r3, r6
 1011 003e 2246     		mov	r2, r4
 1012 0040 4146     		mov	r1, r8
 1013 0042 3846     		mov	r0, r7
 1014 0044 FFF7FEFF 		bl	prvInitialiseNewTask
 1015              	.LVL71:
 802:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdPASS;
 1016              		.loc 1 802 13 view .LVU278
 1017 0048 2846     		mov	r0, r5
 1018 004a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1019              	.LVL72:
 803:ThirdParty/FreeRTOS/tasks.c ****         }
 1020              		.loc 1 803 13 view .LVU279
 803:ThirdParty/FreeRTOS/tasks.c ****         }
 1021              		.loc 1 803 21 is_stmt 0 view .LVU280
 1022 004e 0120     		movs	r0, #1
 1023 0050 07E0     		b	.L68
 1024              	.LVL73:
 1025              	.L70:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 121


 1026              	.LBB148:
 781:ThirdParty/FreeRTOS/tasks.c ****                 }
 1027              		.loc 1 781 21 is_stmt 1 view .LVU281
 1028 0052 4846     		mov	r0, r9
 1029              	.LVL74:
 781:ThirdParty/FreeRTOS/tasks.c ****                 }
 1030              		.loc 1 781 21 is_stmt 0 view .LVU282
 1031 0054 FFF7FEFF 		bl	vPortFree
 1032              	.LVL75:
 781:ThirdParty/FreeRTOS/tasks.c ****                 }
 1033              		.loc 1 781 21 view .LVU283
 1034              	.LBE148:
 791:ThirdParty/FreeRTOS/tasks.c ****         {
 1035              		.loc 1 791 9 is_stmt 1 view .LVU284
 807:ThirdParty/FreeRTOS/tasks.c ****         }
 1036              		.loc 1 807 21 is_stmt 0 view .LVU285
 1037 0058 4FF0FF30 		mov	r0, #-1
 1038 005c 01E0     		b	.L68
 1039              	.LVL76:
 1040              	.L71:
 807:ThirdParty/FreeRTOS/tasks.c ****         }
 1041              		.loc 1 807 21 view .LVU286
 1042 005e 4FF0FF30 		mov	r0, #-1
 1043              	.LVL77:
 810:ThirdParty/FreeRTOS/tasks.c ****     }
 1044              		.loc 1 810 9 is_stmt 1 view .LVU287
 1045              	.L68:
 811:ThirdParty/FreeRTOS/tasks.c **** 
 1046              		.loc 1 811 5 is_stmt 0 view .LVU288
 1047 0062 05B0     		add	sp, sp, #20
 1048              	.LCFI10:
 1049              		.cfi_def_cfa_offset 28
 1050              		@ sp needed
 1051 0064 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 811:ThirdParty/FreeRTOS/tasks.c **** 
 1052              		.loc 1 811 5 view .LVU289
 1053              		.cfi_endproc
 1054              	.LFE5:
 1056              		.section	.text.vTaskDelete,"ax",%progbits
 1057              		.align	1
 1058              		.global	vTaskDelete
 1059              		.syntax unified
 1060              		.thumb
 1061              		.thumb_func
 1063              	vTaskDelete:
 1064              	.LVL78:
 1065              	.LFB8:
1113:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1066              		.loc 1 1113 5 is_stmt 1 view -0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
1113:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1070              		.loc 1 1113 5 is_stmt 0 view .LVU291
 1071 0000 38B5     		push	{r3, r4, r5, lr}
 1072              	.LCFI11:
 1073              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 122


 1074              		.cfi_offset 3, -16
 1075              		.cfi_offset 4, -12
 1076              		.cfi_offset 5, -8
 1077              		.cfi_offset 14, -4
 1078 0002 0446     		mov	r4, r0
1114:ThirdParty/FreeRTOS/tasks.c **** 
 1079              		.loc 1 1114 9 is_stmt 1 view .LVU292
1116:ThirdParty/FreeRTOS/tasks.c ****         {
 1080              		.loc 1 1116 9 view .LVU293
 1081 0004 FFF7FEFF 		bl	vPortEnterCritical
 1082              	.LVL79:
1120:ThirdParty/FreeRTOS/tasks.c **** 
 1083              		.loc 1 1120 13 view .LVU294
1120:ThirdParty/FreeRTOS/tasks.c **** 
 1084              		.loc 1 1120 21 is_stmt 0 view .LVU295
 1085 0008 002C     		cmp	r4, #0
 1086 000a 38D0     		beq	.L84
 1087              	.LVL80:
 1088              	.L74:
1123:ThirdParty/FreeRTOS/tasks.c ****             {
 1089              		.loc 1 1123 13 is_stmt 1 view .LVU296
1123:ThirdParty/FreeRTOS/tasks.c ****             {
 1090              		.loc 1 1123 17 is_stmt 0 view .LVU297
 1091 000c 251D     		adds	r5, r4, #4
 1092 000e 2846     		mov	r0, r5
 1093 0010 FFF7FEFF 		bl	uxListRemove
 1094              	.LVL81:
1123:ThirdParty/FreeRTOS/tasks.c ****             {
 1095              		.loc 1 1123 15 discriminator 1 view .LVU298
 1096 0014 70B9     		cbnz	r0, .L75
1125:ThirdParty/FreeRTOS/tasks.c ****             }
 1097              		.loc 1 1125 17 is_stmt 1 view .LVU299
 1098 0016 E26A     		ldr	r2, [r4, #44]
 1099 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1100 001c 9B00     		lsls	r3, r3, #2
 1101 001e 2949     		ldr	r1, .L87
 1102 0020 CB58     		ldr	r3, [r1, r3]
 1103 0022 3BB9     		cbnz	r3, .L75
1125:ThirdParty/FreeRTOS/tasks.c ****             }
 1104              		.loc 1 1125 17 discriminator 1 view .LVU300
 1105 0024 0123     		movs	r3, #1
 1106 0026 03FA02F2 		lsl	r2, r3, r2
 1107 002a 2749     		ldr	r1, .L87+4
 1108 002c 0B68     		ldr	r3, [r1]
 1109 002e 23EA0203 		bic	r3, r3, r2
 1110 0032 0B60     		str	r3, [r1]
 1111              	.L75:
1129:ThirdParty/FreeRTOS/tasks.c ****             }
 1112              		.loc 1 1129 41 view .LVU301
1133:ThirdParty/FreeRTOS/tasks.c ****             {
 1113              		.loc 1 1133 13 view .LVU302
1133:ThirdParty/FreeRTOS/tasks.c ****             {
 1114              		.loc 1 1133 17 is_stmt 0 view .LVU303
 1115 0034 A36A     		ldr	r3, [r4, #40]
1133:ThirdParty/FreeRTOS/tasks.c ****             {
 1116              		.loc 1 1133 15 view .LVU304
 1117 0036 1BB1     		cbz	r3, .L76
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 123


1135:ThirdParty/FreeRTOS/tasks.c ****             }
 1118              		.loc 1 1135 17 is_stmt 1 view .LVU305
1135:ThirdParty/FreeRTOS/tasks.c ****             }
 1119              		.loc 1 1135 26 is_stmt 0 view .LVU306
 1120 0038 04F11800 		add	r0, r4, #24
 1121 003c FFF7FEFF 		bl	uxListRemove
 1122              	.LVL82:
 1123              	.L76:
1139:ThirdParty/FreeRTOS/tasks.c ****             }
 1124              		.loc 1 1139 41 is_stmt 1 view .LVU307
1146:ThirdParty/FreeRTOS/tasks.c **** 
 1125              		.loc 1 1146 13 view .LVU308
1146:ThirdParty/FreeRTOS/tasks.c **** 
 1126              		.loc 1 1146 25 is_stmt 0 view .LVU309
 1127 0040 224A     		ldr	r2, .L87+8
 1128 0042 1368     		ldr	r3, [r2]
 1129 0044 0133     		adds	r3, r3, #1
 1130 0046 1360     		str	r3, [r2]
1148:ThirdParty/FreeRTOS/tasks.c ****             {
 1131              		.loc 1 1148 13 is_stmt 1 view .LVU310
1148:ThirdParty/FreeRTOS/tasks.c ****             {
 1132              		.loc 1 1148 23 is_stmt 0 view .LVU311
 1133 0048 214B     		ldr	r3, .L87+12
 1134 004a 1B68     		ldr	r3, [r3]
1148:ThirdParty/FreeRTOS/tasks.c ****             {
 1135              		.loc 1 1148 15 view .LVU312
 1136 004c A342     		cmp	r3, r4
 1137 004e 19D0     		beq	.L85
1175:ThirdParty/FreeRTOS/tasks.c ****                 traceTASK_DELETE( pxTCB );
 1138              		.loc 1 1175 17 is_stmt 1 view .LVU313
 1139 0050 204A     		ldr	r2, .L87+16
 1140 0052 1368     		ldr	r3, [r2]
 1141 0054 013B     		subs	r3, r3, #1
 1142 0056 1360     		str	r3, [r2]
1176:ThirdParty/FreeRTOS/tasks.c **** 
 1143              		.loc 1 1176 42 view .LVU314
1180:ThirdParty/FreeRTOS/tasks.c ****             }
 1144              		.loc 1 1180 17 view .LVU315
 1145 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1146              	.LVL83:
 1147              	.L78:
1183:ThirdParty/FreeRTOS/tasks.c **** 
 1148              		.loc 1 1183 9 view .LVU316
 1149 005c FFF7FEFF 		bl	vPortExitCritical
 1150              	.LVL84:
1188:ThirdParty/FreeRTOS/tasks.c ****         {
 1151              		.loc 1 1188 9 view .LVU317
1188:ThirdParty/FreeRTOS/tasks.c ****         {
 1152              		.loc 1 1188 19 is_stmt 0 view .LVU318
 1153 0060 1B4B     		ldr	r3, .L87+12
 1154 0062 1B68     		ldr	r3, [r3]
1188:ThirdParty/FreeRTOS/tasks.c ****         {
 1155              		.loc 1 1188 11 view .LVU319
 1156 0064 A342     		cmp	r3, r4
 1157 0066 02D0     		beq	.L79
1190:ThirdParty/FreeRTOS/tasks.c ****         }
 1158              		.loc 1 1190 13 is_stmt 1 view .LVU320
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 124


 1159 0068 2046     		mov	r0, r4
 1160 006a FFF7FEFF 		bl	prvDeleteTCB
 1161              	.LVL85:
 1162              	.L79:
1195:ThirdParty/FreeRTOS/tasks.c ****         {
 1163              		.loc 1 1195 9 view .LVU321
1195:ThirdParty/FreeRTOS/tasks.c ****         {
 1164              		.loc 1 1195 31 is_stmt 0 view .LVU322
 1165 006e 1A4B     		ldr	r3, .L87+20
 1166 0070 1B68     		ldr	r3, [r3]
1195:ThirdParty/FreeRTOS/tasks.c ****         {
 1167              		.loc 1 1195 11 view .LVU323
 1168 0072 1BB1     		cbz	r3, .L73
1197:ThirdParty/FreeRTOS/tasks.c ****             {
 1169              		.loc 1 1197 13 is_stmt 1 view .LVU324
1197:ThirdParty/FreeRTOS/tasks.c ****             {
 1170              		.loc 1 1197 23 is_stmt 0 view .LVU325
 1171 0074 164B     		ldr	r3, .L87+12
 1172 0076 1B68     		ldr	r3, [r3]
1197:ThirdParty/FreeRTOS/tasks.c ****             {
 1173              		.loc 1 1197 15 view .LVU326
 1174 0078 A342     		cmp	r3, r4
 1175 007a 0CD0     		beq	.L86
 1176              	.L73:
1207:ThirdParty/FreeRTOS/tasks.c **** 
 1177              		.loc 1 1207 5 view .LVU327
 1178 007c 38BD     		pop	{r3, r4, r5, pc}
 1179              	.LVL86:
 1180              	.L84:
1120:ThirdParty/FreeRTOS/tasks.c **** 
 1181              		.loc 1 1120 21 discriminator 1 view .LVU328
 1182 007e 144B     		ldr	r3, .L87+12
 1183 0080 1C68     		ldr	r4, [r3]
 1184              	.LVL87:
1120:ThirdParty/FreeRTOS/tasks.c **** 
 1185              		.loc 1 1120 21 discriminator 1 view .LVU329
 1186 0082 C3E7     		b	.L74
 1187              	.LVL88:
 1188              	.L85:
1155:ThirdParty/FreeRTOS/tasks.c **** 
 1189              		.loc 1 1155 17 is_stmt 1 view .LVU330
 1190 0084 2946     		mov	r1, r5
 1191 0086 1548     		ldr	r0, .L87+24
 1192 0088 FFF7FEFF 		bl	vListInsertEnd
 1193              	.LVL89:
1160:ThirdParty/FreeRTOS/tasks.c **** 
 1194              		.loc 1 1160 17 view .LVU331
 1195 008c 144A     		ldr	r2, .L87+28
 1196 008e 1368     		ldr	r3, [r2]
 1197 0090 0133     		adds	r3, r3, #1
 1198 0092 1360     		str	r3, [r2]
1164:ThirdParty/FreeRTOS/tasks.c **** 
 1199              		.loc 1 1164 42 view .LVU332
1171:ThirdParty/FreeRTOS/tasks.c ****             }
 1200              		.loc 1 1171 66 view .LVU333
 1201 0094 E2E7     		b	.L78
 1202              	.L86:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 125


1199:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1203              		.loc 1 1199 17 view .LVU334
 1204 0096 134B     		ldr	r3, .L87+32
 1205 0098 1B68     		ldr	r3, [r3]
 1206 009a 43B1     		cbz	r3, .L81
1199:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1207              		.loc 1 1199 17 discriminator 1 view .LVU335
 1208              	.LBB149:
 1209              	.LBI149:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1210              		.loc 2 196 34 view .LVU336
 1211              	.LBB150:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1212              		.loc 2 198 9 view .LVU337
 1213              		.loc 2 200 9 view .LVU338
 1214              		.syntax unified
 1215              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1216 009c 4FF05003 			mov r3, #80												
 1217 00a0 83F31188 		msr basepri, r3											
 1218 00a4 BFF36F8F 		isb														
 1219 00a8 BFF34F8F 		dsb														
 1220              	
 1221              	@ 0 "" 2
 1222              		.thumb
 1223              		.syntax unified
 1224              	.L82:
 1225              	.LBE150:
 1226              	.LBE149:
1199:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1227              		.loc 1 1199 17 discriminator 3 view .LVU339
1199:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1228              		.loc 1 1199 17 discriminator 3 view .LVU340
 1229 00ac FEE7     		b	.L82
 1230              	.L81:
1199:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 1231              		.loc 1 1199 58 discriminator 2 view .LVU341
1200:ThirdParty/FreeRTOS/tasks.c ****             }
 1232              		.loc 1 1200 17 view .LVU342
 1233 00ae 4FF0E023 		mov	r3, #-536813568
 1234 00b2 4FF08052 		mov	r2, #268435456
 1235 00b6 C3F8042D 		str	r2, [r3, #3332]
1200:ThirdParty/FreeRTOS/tasks.c ****             }
 1236              		.loc 1 1200 17 view .LVU343
 1237              		.syntax unified
 1238              	@ 1200 "ThirdParty/FreeRTOS/tasks.c" 1
 1239 00ba BFF34F8F 		dsb
 1240              	@ 0 "" 2
1200:ThirdParty/FreeRTOS/tasks.c ****             }
 1241              		.loc 1 1200 17 view .LVU344
 1242              	@ 1200 "ThirdParty/FreeRTOS/tasks.c" 1
 1243 00be BFF36F8F 		isb
 1244              	@ 0 "" 2
1200:ThirdParty/FreeRTOS/tasks.c ****             }
 1245              		.loc 1 1200 39 view .LVU345
1204:ThirdParty/FreeRTOS/tasks.c ****             }
 1246              		.loc 1 1204 41 view .LVU346
1207:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 126


 1247              		.loc 1 1207 5 is_stmt 0 view .LVU347
 1248              		.thumb
 1249              		.syntax unified
 1250 00c2 DBE7     		b	.L73
 1251              	.L88:
 1252              		.align	2
 1253              	.L87:
 1254 00c4 00000000 		.word	pxReadyTasksLists
 1255 00c8 00000000 		.word	uxTopReadyPriority
 1256 00cc 00000000 		.word	uxTaskNumber
 1257 00d0 00000000 		.word	pxCurrentTCB
 1258 00d4 00000000 		.word	uxCurrentNumberOfTasks
 1259 00d8 00000000 		.word	xSchedulerRunning
 1260 00dc 00000000 		.word	xTasksWaitingTermination
 1261 00e0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1262 00e4 00000000 		.word	uxSchedulerSuspended
 1263              		.cfi_endproc
 1264              	.LFE8:
 1266              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1267              		.align	1
 1268              		.global	uxTaskPriorityGet
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1273              	uxTaskPriorityGet:
 1274              	.LVL90:
 1275              	.LFB11:
1446:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1276              		.loc 1 1446 5 is_stmt 1 view -0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
1446:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1280              		.loc 1 1446 5 is_stmt 0 view .LVU349
 1281 0000 10B5     		push	{r4, lr}
 1282              	.LCFI12:
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 4, -8
 1285              		.cfi_offset 14, -4
 1286 0002 0446     		mov	r4, r0
1447:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn;
 1287              		.loc 1 1447 9 is_stmt 1 view .LVU350
1448:ThirdParty/FreeRTOS/tasks.c **** 
 1288              		.loc 1 1448 9 view .LVU351
1450:ThirdParty/FreeRTOS/tasks.c ****         {
 1289              		.loc 1 1450 9 view .LVU352
 1290 0004 FFF7FEFF 		bl	vPortEnterCritical
 1291              	.LVL91:
1454:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1292              		.loc 1 1454 13 view .LVU353
1454:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1293              		.loc 1 1454 21 is_stmt 0 view .LVU354
 1294 0008 24B1     		cbz	r4, .L92
 1295              	.LVL92:
 1296              	.L90:
1455:ThirdParty/FreeRTOS/tasks.c ****         }
 1297              		.loc 1 1455 13 is_stmt 1 view .LVU355
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 127


1455:ThirdParty/FreeRTOS/tasks.c ****         }
 1298              		.loc 1 1455 22 is_stmt 0 view .LVU356
 1299 000a E46A     		ldr	r4, [r4, #44]
 1300              	.LVL93:
1457:ThirdParty/FreeRTOS/tasks.c **** 
 1301              		.loc 1 1457 9 is_stmt 1 view .LVU357
 1302 000c FFF7FEFF 		bl	vPortExitCritical
 1303              	.LVL94:
1459:ThirdParty/FreeRTOS/tasks.c ****     }
 1304              		.loc 1 1459 9 view .LVU358
1460:ThirdParty/FreeRTOS/tasks.c **** 
 1305              		.loc 1 1460 5 is_stmt 0 view .LVU359
 1306 0010 2046     		mov	r0, r4
 1307 0012 10BD     		pop	{r4, pc}
 1308              	.LVL95:
 1309              	.L92:
1454:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1310              		.loc 1 1454 21 discriminator 1 view .LVU360
 1311 0014 014B     		ldr	r3, .L93
 1312 0016 1C68     		ldr	r4, [r3]
 1313              	.LVL96:
1454:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1314              		.loc 1 1454 21 discriminator 1 view .LVU361
 1315 0018 F7E7     		b	.L90
 1316              	.L94:
 1317 001a 00BF     		.align	2
 1318              	.L93:
 1319 001c 00000000 		.word	pxCurrentTCB
 1320              		.cfi_endproc
 1321              	.LFE11:
 1323              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1324              		.align	1
 1325              		.global	uxTaskPriorityGetFromISR
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1330              	uxTaskPriorityGetFromISR:
 1331              	.LVL97:
 1332              	.LFB12:
1468:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1333              		.loc 1 1468 5 is_stmt 1 view -0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
1468:ThirdParty/FreeRTOS/tasks.c ****         TCB_t const * pxTCB;
 1337              		.loc 1 1468 5 is_stmt 0 view .LVU363
 1338 0000 10B5     		push	{r4, lr}
 1339              	.LCFI13:
 1340              		.cfi_def_cfa_offset 8
 1341              		.cfi_offset 4, -8
 1342              		.cfi_offset 14, -4
 1343 0002 0446     		mov	r4, r0
1469:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxReturn, uxSavedInterruptState;
 1344              		.loc 1 1469 9 is_stmt 1 view .LVU364
1470:ThirdParty/FreeRTOS/tasks.c **** 
 1345              		.loc 1 1470 9 view .LVU365
1488:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 128


 1346              		.loc 1 1488 9 view .LVU366
 1347 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1348              	.LVL98:
1490:ThirdParty/FreeRTOS/tasks.c ****         {
 1349              		.loc 1 1490 9 view .LVU367
 1350              	.LBB151:
 1351              	.LBI151:
 201:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 202:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %0, %1												\n"\
 203:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %0											\n"\
 204:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 205:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 206:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 208:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 209:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 210:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 211:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1352              		.loc 2 212 38 view .LVU368
 1353              	.LBB152:
 213:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1354              		.loc 2 214 9 view .LVU369
 215:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 1355              		.loc 2 216 9 view .LVU370
 1356              		.syntax unified
 1357              	@ 216 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1358 0008 EFF31183 			mrs r3, basepri											
 1359 000c 4FF05002 		mov r2, #80												
 1360 0010 82F31188 		msr basepri, r2											
 1361 0014 BFF36F8F 		isb														
 1362 0018 BFF34F8F 		dsb														
 1363              	
 1364              	@ 0 "" 2
 1365              	.LVL99:
 217:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 218:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	mov %1, %2												\n"\
 220:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	msr basepri, %1											\n"\
 221:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	isb														\n"\
 222:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             "	dsb														\n"\
 223:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         );
 225:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 226:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****          * warnings. */
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 1366              		.loc 2 228 9 view .LVU371
 1367              		.loc 2 228 9 is_stmt 0 view .LVU372
 1368              		.thumb
 1369              		.syntax unified
 1370              	.LBE152:
 1371              	.LBE151:
1494:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1372              		.loc 1 1494 13 is_stmt 1 view .LVU373
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 129


1494:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1373              		.loc 1 1494 21 is_stmt 0 view .LVU374
 1374 001c 1CB1     		cbz	r4, .L98
 1375              	.LVL100:
 1376              	.L96:
1495:ThirdParty/FreeRTOS/tasks.c ****         }
 1377              		.loc 1 1495 13 is_stmt 1 view .LVU375
1495:ThirdParty/FreeRTOS/tasks.c ****         }
 1378              		.loc 1 1495 22 is_stmt 0 view .LVU376
 1379 001e E06A     		ldr	r0, [r4, #44]
 1380              	.LVL101:
1497:ThirdParty/FreeRTOS/tasks.c **** 
 1381              		.loc 1 1497 9 is_stmt 1 view .LVU377
 1382              	.LBB153:
 1383              	.LBI153:
 229:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 230:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 231:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1384              		.loc 2 232 34 view .LVU378
 1385              	.LBB154:
 233:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 234:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         __asm volatile
 1386              		.loc 2 234 9 view .LVU379
 1387              		.syntax unified
 1388              	@ 234 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1389 0020 83F31188 			msr basepri, r3	
 1390              	@ 0 "" 2
 1391              		.thumb
 1392              		.syntax unified
 1393              	.LBE154:
 1394              	.LBE153:
1499:ThirdParty/FreeRTOS/tasks.c ****     }
 1395              		.loc 1 1499 9 view .LVU380
1500:ThirdParty/FreeRTOS/tasks.c **** 
 1396              		.loc 1 1500 5 is_stmt 0 view .LVU381
 1397 0024 10BD     		pop	{r4, pc}
 1398              	.LVL102:
 1399              	.L98:
1494:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1400              		.loc 1 1494 21 discriminator 1 view .LVU382
 1401 0026 014A     		ldr	r2, .L99
 1402 0028 1468     		ldr	r4, [r2]
 1403              	.LVL103:
1494:ThirdParty/FreeRTOS/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1404              		.loc 1 1494 21 discriminator 1 view .LVU383
 1405 002a F8E7     		b	.L96
 1406              	.L100:
 1407              		.align	2
 1408              	.L99:
 1409 002c 00000000 		.word	pxCurrentTCB
 1410              		.cfi_endproc
 1411              	.LFE12:
 1413              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1414              		.align	1
 1415              		.global	vTaskPrioritySet
 1416              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 130


 1417              		.thumb
 1418              		.thumb_func
 1420              	vTaskPrioritySet:
 1421              	.LVL104:
 1422              	.LFB13:
1509:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1423              		.loc 1 1509 5 is_stmt 1 view -0
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 0
 1426              		@ frame_needed = 0, uses_anonymous_args = 0
1509:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 1427              		.loc 1 1509 5 is_stmt 0 view .LVU385
 1428 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1429              	.LCFI14:
 1430              		.cfi_def_cfa_offset 24
 1431              		.cfi_offset 3, -24
 1432              		.cfi_offset 4, -20
 1433              		.cfi_offset 5, -16
 1434              		.cfi_offset 6, -12
 1435              		.cfi_offset 7, -8
 1436              		.cfi_offset 14, -4
1510:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1437              		.loc 1 1510 9 is_stmt 1 view .LVU386
1511:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1438              		.loc 1 1511 9 view .LVU387
1512:ThirdParty/FreeRTOS/tasks.c **** 
 1439              		.loc 1 1512 9 view .LVU388
 1440              	.LVL105:
1514:ThirdParty/FreeRTOS/tasks.c **** 
 1441              		.loc 1 1514 9 view .LVU389
 1442 0002 0429     		cmp	r1, #4
 1443 0004 08D9     		bls	.L102
1514:ThirdParty/FreeRTOS/tasks.c **** 
 1444              		.loc 1 1514 9 discriminator 1 view .LVU390
 1445              	.LBB155:
 1446              	.LBI155:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1447              		.loc 2 196 34 view .LVU391
 1448              	.LBB156:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1449              		.loc 2 198 9 view .LVU392
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 1450              		.loc 2 200 9 view .LVU393
 1451              		.syntax unified
 1452              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1453 0006 4FF05003 			mov r3, #80												
 1454 000a 83F31188 		msr basepri, r3											
 1455 000e BFF36F8F 		isb														
 1456 0012 BFF34F8F 		dsb														
 1457              	
 1458              	@ 0 "" 2
 1459              		.thumb
 1460              		.syntax unified
 1461              	.L103:
 1462              	.LBE156:
 1463              	.LBE155:
1514:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 131


 1464              		.loc 1 1514 9 discriminator 3 view .LVU394
1514:ThirdParty/FreeRTOS/tasks.c **** 
 1465              		.loc 1 1514 9 discriminator 3 view .LVU395
 1466 0016 FEE7     		b	.L103
 1467              	.L102:
 1468 0018 0546     		mov	r5, r0
 1469 001a 0C46     		mov	r4, r1
1514:ThirdParty/FreeRTOS/tasks.c **** 
 1470              		.loc 1 1514 61 discriminator 2 view .LVU396
1517:ThirdParty/FreeRTOS/tasks.c ****         {
 1471              		.loc 1 1517 9 view .LVU397
 1472              	.LVL106:
1523:ThirdParty/FreeRTOS/tasks.c ****         }
 1473              		.loc 1 1523 37 view .LVU398
1526:ThirdParty/FreeRTOS/tasks.c ****         {
 1474              		.loc 1 1526 9 view .LVU399
 1475 001c FFF7FEFF 		bl	vPortEnterCritical
 1476              	.LVL107:
1530:ThirdParty/FreeRTOS/tasks.c **** 
 1477              		.loc 1 1530 13 view .LVU400
1530:ThirdParty/FreeRTOS/tasks.c **** 
 1478              		.loc 1 1530 21 is_stmt 0 view .LVU401
 1479 0020 75B1     		cbz	r5, .L115
 1480              	.LVL108:
 1481              	.L104:
1532:ThirdParty/FreeRTOS/tasks.c **** 
 1482              		.loc 1 1532 59 is_stmt 1 view .LVU402
1540:ThirdParty/FreeRTOS/tasks.c ****             }
 1483              		.loc 1 1540 17 view .LVU403
1540:ThirdParty/FreeRTOS/tasks.c ****             }
 1484              		.loc 1 1540 39 is_stmt 0 view .LVU404
 1485 0022 EE6A     		ldr	r6, [r5, #44]
 1486              	.LVL109:
1544:ThirdParty/FreeRTOS/tasks.c ****             {
 1487              		.loc 1 1544 13 is_stmt 1 view .LVU405
1544:ThirdParty/FreeRTOS/tasks.c ****             {
 1488              		.loc 1 1544 15 is_stmt 0 view .LVU406
 1489 0024 B442     		cmp	r4, r6
 1490 0026 2DD0     		beq	.L105
1548:ThirdParty/FreeRTOS/tasks.c ****                 {
 1491              		.loc 1 1548 17 is_stmt 1 view .LVU407
1548:ThirdParty/FreeRTOS/tasks.c ****                 {
 1492              		.loc 1 1548 19 is_stmt 0 view .LVU408
 1493 0028 0DD9     		bls	.L106
1550:ThirdParty/FreeRTOS/tasks.c ****                     {
 1494              		.loc 1 1550 21 is_stmt 1 view .LVU409
1550:ThirdParty/FreeRTOS/tasks.c ****                     {
 1495              		.loc 1 1550 31 is_stmt 0 view .LVU410
 1496 002a 2F4B     		ldr	r3, .L117
 1497 002c 1B68     		ldr	r3, [r3]
1550:ThirdParty/FreeRTOS/tasks.c ****                     {
 1498              		.loc 1 1550 23 view .LVU411
 1499 002e AB42     		cmp	r3, r5
 1500 0030 2BD0     		beq	.L111
1555:ThirdParty/FreeRTOS/tasks.c ****                         {
 1501              		.loc 1 1555 25 is_stmt 1 view .LVU412
1555:ThirdParty/FreeRTOS/tasks.c ****                         {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 132


 1502              		.loc 1 1555 58 is_stmt 0 view .LVU413
 1503 0032 2D4B     		ldr	r3, .L117
 1504 0034 1B68     		ldr	r3, [r3]
 1505 0036 DB6A     		ldr	r3, [r3, #44]
1555:ThirdParty/FreeRTOS/tasks.c ****                         {
 1506              		.loc 1 1555 27 view .LVU414
 1507 0038 A342     		cmp	r3, r4
 1508 003a 28D9     		bls	.L112
1512:ThirdParty/FreeRTOS/tasks.c **** 
 1509              		.loc 1 1512 20 view .LVU415
 1510 003c 0027     		movs	r7, #0
 1511 003e 07E0     		b	.L107
 1512              	.LVL110:
 1513              	.L115:
1530:ThirdParty/FreeRTOS/tasks.c **** 
 1514              		.loc 1 1530 21 discriminator 1 view .LVU416
 1515 0040 294B     		ldr	r3, .L117
 1516 0042 1D68     		ldr	r5, [r3]
 1517              	.LVL111:
1530:ThirdParty/FreeRTOS/tasks.c **** 
 1518              		.loc 1 1530 21 discriminator 1 view .LVU417
 1519 0044 EDE7     		b	.L104
 1520              	.LVL112:
 1521              	.L106:
1571:ThirdParty/FreeRTOS/tasks.c ****                 {
 1522              		.loc 1 1571 22 is_stmt 1 view .LVU418
1571:ThirdParty/FreeRTOS/tasks.c ****                 {
 1523              		.loc 1 1571 32 is_stmt 0 view .LVU419
 1524 0046 284B     		ldr	r3, .L117
 1525 0048 1B68     		ldr	r3, [r3]
1571:ThirdParty/FreeRTOS/tasks.c ****                 {
 1526              		.loc 1 1571 24 view .LVU420
 1527 004a AB42     		cmp	r3, r5
 1528 004c 21D0     		beq	.L113
1512:ThirdParty/FreeRTOS/tasks.c **** 
 1529              		.loc 1 1512 20 view .LVU421
 1530 004e 0027     		movs	r7, #0
 1531              	.L107:
 1532              	.LVL113:
1583:ThirdParty/FreeRTOS/tasks.c **** 
 1533              		.loc 1 1583 17 is_stmt 1 view .LVU422
1588:ThirdParty/FreeRTOS/tasks.c **** 
 1534              		.loc 1 1588 17 view .LVU423
1608:ThirdParty/FreeRTOS/tasks.c ****                 }
 1535              		.loc 1 1608 21 view .LVU424
1608:ThirdParty/FreeRTOS/tasks.c ****                 }
 1536              		.loc 1 1608 39 is_stmt 0 view .LVU425
 1537 0050 EC62     		str	r4, [r5, #44]
1614:ThirdParty/FreeRTOS/tasks.c ****                 {
 1538              		.loc 1 1614 17 is_stmt 1 view .LVU426
1614:ThirdParty/FreeRTOS/tasks.c ****                 {
 1539              		.loc 1 1614 23 is_stmt 0 view .LVU427
 1540 0052 AB69     		ldr	r3, [r5, #24]
1614:ThirdParty/FreeRTOS/tasks.c ****                 {
 1541              		.loc 1 1614 19 view .LVU428
 1542 0054 002B     		cmp	r3, #0
 1543 0056 02DB     		blt	.L108
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 133


1616:ThirdParty/FreeRTOS/tasks.c ****                 }
 1544              		.loc 1 1616 21 is_stmt 1 view .LVU429
 1545 0058 C4F10504 		rsb	r4, r4, #5
 1546              	.LVL114:
1616:ThirdParty/FreeRTOS/tasks.c ****                 }
 1547              		.loc 1 1616 21 is_stmt 0 view .LVU430
 1548 005c AC61     		str	r4, [r5, #24]
 1549              	.L108:
1620:ThirdParty/FreeRTOS/tasks.c ****                 }
 1550              		.loc 1 1620 45 is_stmt 1 view .LVU431
1627:ThirdParty/FreeRTOS/tasks.c ****                 {
 1551              		.loc 1 1627 17 view .LVU432
1627:ThirdParty/FreeRTOS/tasks.c ****                 {
 1552              		.loc 1 1627 21 is_stmt 0 view .LVU433
 1553 005e 6969     		ldr	r1, [r5, #20]
 1554 0060 06EB8602 		add	r2, r6, r6, lsl #2
 1555 0064 214B     		ldr	r3, .L117+4
 1556 0066 03EB8203 		add	r3, r3, r2, lsl #2
1627:ThirdParty/FreeRTOS/tasks.c ****                 {
 1557              		.loc 1 1627 19 view .LVU434
 1558 006a 9942     		cmp	r1, r3
 1559 006c 13D0     		beq	.L116
 1560              	.LVL115:
 1561              	.L109:
1648:ThirdParty/FreeRTOS/tasks.c ****                 }
 1562              		.loc 1 1648 45 is_stmt 1 view .LVU435
1651:ThirdParty/FreeRTOS/tasks.c ****                 {
 1563              		.loc 1 1651 17 view .LVU436
1651:ThirdParty/FreeRTOS/tasks.c ****                 {
 1564              		.loc 1 1651 19 is_stmt 0 view .LVU437
 1565 006e 4FB1     		cbz	r7, .L105
1653:ThirdParty/FreeRTOS/tasks.c ****                 }
 1566              		.loc 1 1653 21 is_stmt 1 view .LVU438
 1567 0070 4FF0E023 		mov	r3, #-536813568
 1568 0074 4FF08052 		mov	r2, #268435456
 1569 0078 C3F8042D 		str	r2, [r3, #3332]
1653:ThirdParty/FreeRTOS/tasks.c ****                 }
 1570              		.loc 1 1653 21 view .LVU439
 1571              		.syntax unified
 1572              	@ 1653 "ThirdParty/FreeRTOS/tasks.c" 1
 1573 007c BFF34F8F 		dsb
 1574              	@ 0 "" 2
1653:ThirdParty/FreeRTOS/tasks.c ****                 }
 1575              		.loc 1 1653 21 view .LVU440
 1576              	@ 1653 "ThirdParty/FreeRTOS/tasks.c" 1
 1577 0080 BFF36F8F 		isb
 1578              	@ 0 "" 2
1653:ThirdParty/FreeRTOS/tasks.c ****                 }
 1579              		.loc 1 1653 52 view .LVU441
 1580              	.LVL116:
 1581              		.thumb
 1582              		.syntax unified
 1583              	.L105:
1657:ThirdParty/FreeRTOS/tasks.c ****                 }
 1584              		.loc 1 1657 45 view .LVU442
1662:ThirdParty/FreeRTOS/tasks.c ****             }
 1585              		.loc 1 1662 17 view .LVU443
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 134


1665:ThirdParty/FreeRTOS/tasks.c ****     }
 1586              		.loc 1 1665 9 view .LVU444
 1587 0084 FFF7FEFF 		bl	vPortExitCritical
 1588              	.LVL117:
1666:ThirdParty/FreeRTOS/tasks.c **** 
 1589              		.loc 1 1666 5 is_stmt 0 view .LVU445
 1590 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1591              	.LVL118:
 1592              	.L111:
1512:ThirdParty/FreeRTOS/tasks.c **** 
 1593              		.loc 1 1512 20 view .LVU446
 1594 008a 0027     		movs	r7, #0
 1595 008c E0E7     		b	.L107
 1596              	.L112:
1557:ThirdParty/FreeRTOS/tasks.c ****                         }
 1597              		.loc 1 1557 44 view .LVU447
 1598 008e 0127     		movs	r7, #1
 1599 0090 DEE7     		b	.L107
 1600              	.L113:
1576:ThirdParty/FreeRTOS/tasks.c ****                 }
 1601              		.loc 1 1576 36 view .LVU448
 1602 0092 0127     		movs	r7, #1
 1603 0094 DCE7     		b	.L107
 1604              	.LVL119:
 1605              	.L116:
1632:ThirdParty/FreeRTOS/tasks.c ****                     {
 1606              		.loc 1 1632 21 is_stmt 1 view .LVU449
1632:ThirdParty/FreeRTOS/tasks.c ****                     {
 1607              		.loc 1 1632 25 is_stmt 0 view .LVU450
 1608 0096 2C1D     		adds	r4, r5, #4
 1609 0098 2046     		mov	r0, r4
 1610 009a FFF7FEFF 		bl	uxListRemove
 1611              	.LVL120:
1632:ThirdParty/FreeRTOS/tasks.c ****                     {
 1612              		.loc 1 1632 23 discriminator 1 view .LVU451
 1613 009e 30B9     		cbnz	r0, .L110
1637:ThirdParty/FreeRTOS/tasks.c ****                     }
 1614              		.loc 1 1637 25 is_stmt 1 view .LVU452
 1615 00a0 0122     		movs	r2, #1
 1616 00a2 B240     		lsls	r2, r2, r6
 1617 00a4 1249     		ldr	r1, .L117+8
 1618 00a6 0B68     		ldr	r3, [r1]
 1619 00a8 23EA0203 		bic	r3, r3, r2
 1620 00ac 0B60     		str	r3, [r1]
 1621              	.L110:
1641:ThirdParty/FreeRTOS/tasks.c ****                     }
 1622              		.loc 1 1641 49 view .LVU453
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1623              		.loc 1 1644 21 view .LVU454
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1624              		.loc 1 1644 21 view .LVU455
 1625 00ae EB6A     		ldr	r3, [r5, #44]
 1626 00b0 0122     		movs	r2, #1
 1627 00b2 9A40     		lsls	r2, r2, r3
 1628 00b4 0E49     		ldr	r1, .L117+8
 1629 00b6 0868     		ldr	r0, [r1]
 1630 00b8 0243     		orrs	r2, r2, r0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 135


 1631 00ba 0A60     		str	r2, [r1]
 1632              	.LBB157:
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1633              		.loc 1 1644 21 view .LVU456
 1634 00bc 0B4A     		ldr	r2, .L117+4
 1635 00be 03EB8303 		add	r3, r3, r3, lsl #2
 1636 00c2 02EB8303 		add	r3, r2, r3, lsl #2
 1637 00c6 5B68     		ldr	r3, [r3, #4]
 1638              	.LVL121:
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1639              		.loc 1 1644 21 view .LVU457
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1640              		.loc 1 1644 21 view .LVU458
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1641              		.loc 1 1644 21 view .LVU459
 1642 00c8 AB60     		str	r3, [r5, #8]
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1643              		.loc 1 1644 21 view .LVU460
 1644 00ca 9968     		ldr	r1, [r3, #8]
 1645 00cc E960     		str	r1, [r5, #12]
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1646              		.loc 1 1644 21 view .LVU461
 1647 00ce 4C60     		str	r4, [r1, #4]
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1648              		.loc 1 1644 21 view .LVU462
 1649 00d0 9C60     		str	r4, [r3, #8]
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1650              		.loc 1 1644 21 view .LVU463
 1651 00d2 EB6A     		ldr	r3, [r5, #44]
 1652              	.LVL122:
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1653              		.loc 1 1644 21 is_stmt 0 view .LVU464
 1654 00d4 03EB8301 		add	r1, r3, r3, lsl #2
 1655 00d8 8800     		lsls	r0, r1, #2
 1656 00da 02EB8101 		add	r1, r2, r1, lsl #2
 1657 00de 6961     		str	r1, [r5, #20]
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1658              		.loc 1 1644 21 is_stmt 1 view .LVU465
 1659 00e0 1158     		ldr	r1, [r2, r0]
 1660 00e2 0131     		adds	r1, r1, #1
 1661 00e4 1150     		str	r1, [r2, r0]
 1662              	.LBE157:
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1663              		.loc 1 1644 21 view .LVU466
1644:ThirdParty/FreeRTOS/tasks.c ****                 }
 1664              		.loc 1 1644 51 view .LVU467
 1665 00e6 C2E7     		b	.L109
 1666              	.L118:
 1667              		.align	2
 1668              	.L117:
 1669 00e8 00000000 		.word	pxCurrentTCB
 1670 00ec 00000000 		.word	pxReadyTasksLists
 1671 00f0 00000000 		.word	uxTopReadyPriority
 1672              		.cfi_endproc
 1673              	.LFE13:
 1675              		.section	.text.vTaskResume,"ax",%progbits
 1676              		.align	1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 136


 1677              		.global	vTaskResume
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1682              	vTaskResume:
 1683              	.LVL123:
 1684              	.LFB16:
1826:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1685              		.loc 1 1826 5 view -0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
1826:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1689              		.loc 1 1826 5 is_stmt 0 view .LVU469
 1690 0000 38B5     		push	{r3, r4, r5, lr}
 1691              	.LCFI15:
 1692              		.cfi_def_cfa_offset 16
 1693              		.cfi_offset 3, -16
 1694              		.cfi_offset 4, -12
 1695              		.cfi_offset 5, -8
 1696              		.cfi_offset 14, -4
1827:ThirdParty/FreeRTOS/tasks.c **** 
 1697              		.loc 1 1827 9 is_stmt 1 view .LVU470
 1698              	.LVL124:
1830:ThirdParty/FreeRTOS/tasks.c **** 
 1699              		.loc 1 1830 9 view .LVU471
 1700 0002 68B1     		cbz	r0, .L125
 1701 0004 0446     		mov	r4, r0
1830:ThirdParty/FreeRTOS/tasks.c **** 
 1702              		.loc 1 1830 38 discriminator 2 view .LVU472
1834:ThirdParty/FreeRTOS/tasks.c ****         {
 1703              		.loc 1 1834 9 view .LVU473
1834:ThirdParty/FreeRTOS/tasks.c ****         {
 1704              		.loc 1 1834 21 is_stmt 0 view .LVU474
 1705 0006 234B     		ldr	r3, .L127
 1706 0008 1B68     		ldr	r3, [r3]
1834:ThirdParty/FreeRTOS/tasks.c ****         {
 1707              		.loc 1 1834 11 view .LVU475
 1708 000a 8342     		cmp	r3, r0
 1709 000c 07D0     		beq	.L119
1836:ThirdParty/FreeRTOS/tasks.c ****             {
 1710              		.loc 1 1836 13 is_stmt 1 view .LVU476
 1711 000e FFF7FEFF 		bl	vPortEnterCritical
 1712              	.LVL125:
1838:ThirdParty/FreeRTOS/tasks.c ****                 {
 1713              		.loc 1 1838 17 view .LVU477
1838:ThirdParty/FreeRTOS/tasks.c ****                 {
 1714              		.loc 1 1838 21 is_stmt 0 view .LVU478
 1715 0012 2046     		mov	r0, r4
 1716 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1717              	.LVL126:
1838:ThirdParty/FreeRTOS/tasks.c ****                 {
 1718              		.loc 1 1838 19 discriminator 1 view .LVU479
 1719 0018 58B9     		cbnz	r0, .L126
 1720              	.L123:
1862:ThirdParty/FreeRTOS/tasks.c ****                 }
 1721              		.loc 1 1862 45 is_stmt 1 view .LVU480
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 137


1865:ThirdParty/FreeRTOS/tasks.c ****         }
 1722              		.loc 1 1865 13 view .LVU481
 1723 001a FFF7FEFF 		bl	vPortExitCritical
 1724              	.LVL127:
1869:ThirdParty/FreeRTOS/tasks.c ****         }
 1725              		.loc 1 1869 37 view .LVU482
 1726              	.L119:
1871:ThirdParty/FreeRTOS/tasks.c **** 
 1727              		.loc 1 1871 5 is_stmt 0 view .LVU483
 1728 001e 38BD     		pop	{r3, r4, r5, pc}
 1729              	.LVL128:
 1730              	.L125:
1830:ThirdParty/FreeRTOS/tasks.c **** 
 1731              		.loc 1 1830 9 is_stmt 1 discriminator 1 view .LVU484
 1732              	.LBB158:
 1733              	.LBI158:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1734              		.loc 2 196 34 view .LVU485
 1735              	.LBB159:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1736              		.loc 2 198 9 view .LVU486
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 1737              		.loc 2 200 9 view .LVU487
 1738              		.syntax unified
 1739              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1740 0020 4FF05003 			mov r3, #80												
 1741 0024 83F31188 		msr basepri, r3											
 1742 0028 BFF36F8F 		isb														
 1743 002c BFF34F8F 		dsb														
 1744              	
 1745              	@ 0 "" 2
 1746              		.thumb
 1747              		.syntax unified
 1748              	.L121:
 1749              	.LBE159:
 1750              	.LBE158:
1830:ThirdParty/FreeRTOS/tasks.c **** 
 1751              		.loc 1 1830 9 discriminator 3 view .LVU488
1830:ThirdParty/FreeRTOS/tasks.c **** 
 1752              		.loc 1 1830 9 discriminator 3 view .LVU489
 1753 0030 FEE7     		b	.L121
 1754              	.LVL129:
 1755              	.L126:
1840:ThirdParty/FreeRTOS/tasks.c **** 
 1756              		.loc 1 1840 46 view .LVU490
1844:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1757              		.loc 1 1844 21 view .LVU491
1844:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1758              		.loc 1 1844 30 is_stmt 0 view .LVU492
 1759 0032 251D     		adds	r5, r4, #4
 1760 0034 2846     		mov	r0, r5
 1761 0036 FFF7FEFF 		bl	uxListRemove
 1762              	.LVL130:
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1763              		.loc 1 1845 21 is_stmt 1 view .LVU493
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1764              		.loc 1 1845 21 view .LVU494
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 138


 1765 003a E36A     		ldr	r3, [r4, #44]
 1766 003c 0122     		movs	r2, #1
 1767 003e 9A40     		lsls	r2, r2, r3
 1768 0040 1549     		ldr	r1, .L127+4
 1769 0042 0868     		ldr	r0, [r1]
 1770 0044 0243     		orrs	r2, r2, r0
 1771 0046 0A60     		str	r2, [r1]
 1772              	.LBB160:
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1773              		.loc 1 1845 21 view .LVU495
 1774 0048 144A     		ldr	r2, .L127+8
 1775 004a 03EB8303 		add	r3, r3, r3, lsl #2
 1776 004e 02EB8303 		add	r3, r2, r3, lsl #2
 1777 0052 5B68     		ldr	r3, [r3, #4]
 1778              	.LVL131:
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1779              		.loc 1 1845 21 view .LVU496
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1780              		.loc 1 1845 21 view .LVU497
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1781              		.loc 1 1845 21 view .LVU498
 1782 0054 A360     		str	r3, [r4, #8]
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1783              		.loc 1 1845 21 view .LVU499
 1784 0056 9968     		ldr	r1, [r3, #8]
 1785 0058 E160     		str	r1, [r4, #12]
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1786              		.loc 1 1845 21 view .LVU500
 1787 005a 4D60     		str	r5, [r1, #4]
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1788              		.loc 1 1845 21 view .LVU501
 1789 005c 9D60     		str	r5, [r3, #8]
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1790              		.loc 1 1845 21 view .LVU502
 1791 005e E36A     		ldr	r3, [r4, #44]
 1792              	.LVL132:
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1793              		.loc 1 1845 21 is_stmt 0 view .LVU503
 1794 0060 03EB8301 		add	r1, r3, r3, lsl #2
 1795 0064 8800     		lsls	r0, r1, #2
 1796 0066 02EB8101 		add	r1, r2, r1, lsl #2
 1797 006a 6161     		str	r1, [r4, #20]
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1798              		.loc 1 1845 21 is_stmt 1 view .LVU504
 1799 006c 1158     		ldr	r1, [r2, r0]
 1800 006e 0131     		adds	r1, r1, #1
 1801 0070 1150     		str	r1, [r2, r0]
 1802              	.LBE160:
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1803              		.loc 1 1845 21 view .LVU505
1845:ThirdParty/FreeRTOS/tasks.c **** 
 1804              		.loc 1 1845 51 view .LVU506
1848:ThirdParty/FreeRTOS/tasks.c ****                     {
 1805              		.loc 1 1848 21 view .LVU507
1848:ThirdParty/FreeRTOS/tasks.c ****                     {
 1806              		.loc 1 1848 30 is_stmt 0 view .LVU508
 1807 0072 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 139


1848:ThirdParty/FreeRTOS/tasks.c ****                     {
 1808              		.loc 1 1848 58 view .LVU509
 1809 0074 074B     		ldr	r3, .L127
 1810 0076 1B68     		ldr	r3, [r3]
 1811 0078 DB6A     		ldr	r3, [r3, #44]
1848:ThirdParty/FreeRTOS/tasks.c ****                     {
 1812              		.loc 1 1848 23 view .LVU510
 1813 007a 9A42     		cmp	r2, r3
 1814 007c CDD3     		bcc	.L123
1853:ThirdParty/FreeRTOS/tasks.c ****                     }
 1815              		.loc 1 1853 25 is_stmt 1 view .LVU511
 1816 007e 4FF0E023 		mov	r3, #-536813568
 1817 0082 4FF08052 		mov	r2, #268435456
 1818 0086 C3F8042D 		str	r2, [r3, #3332]
1853:ThirdParty/FreeRTOS/tasks.c ****                     }
 1819              		.loc 1 1853 25 view .LVU512
 1820              		.syntax unified
 1821              	@ 1853 "ThirdParty/FreeRTOS/tasks.c" 1
 1822 008a BFF34F8F 		dsb
 1823              	@ 0 "" 2
1853:ThirdParty/FreeRTOS/tasks.c ****                     }
 1824              		.loc 1 1853 25 view .LVU513
 1825              	@ 1853 "ThirdParty/FreeRTOS/tasks.c" 1
 1826 008e BFF36F8F 		isb
 1827              	@ 0 "" 2
1853:ThirdParty/FreeRTOS/tasks.c ****                     }
 1828              		.loc 1 1853 56 view .LVU514
 1829              		.thumb
 1830              		.syntax unified
 1831 0092 C2E7     		b	.L123
 1832              	.L128:
 1833              		.align	2
 1834              	.L127:
 1835 0094 00000000 		.word	pxCurrentTCB
 1836 0098 00000000 		.word	uxTopReadyPriority
 1837 009c 00000000 		.word	pxReadyTasksLists
 1838              		.cfi_endproc
 1839              	.LFE16:
 1841              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1842              		.align	1
 1843              		.global	xTaskResumeFromISR
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1848              	xTaskResumeFromISR:
 1849              	.LVL133:
 1850              	.LFB17:
1880:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1851              		.loc 1 1880 5 view -0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
1880:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1855              		.loc 1 1880 5 is_stmt 0 view .LVU516
 1856 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1857              	.LCFI16:
 1858              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 140


 1859              		.cfi_offset 3, -24
 1860              		.cfi_offset 4, -20
 1861              		.cfi_offset 5, -16
 1862              		.cfi_offset 6, -12
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
1881:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1865              		.loc 1 1881 9 is_stmt 1 view .LVU517
 1866              	.LVL134:
1882:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 1867              		.loc 1 1882 9 view .LVU518
1883:ThirdParty/FreeRTOS/tasks.c **** 
 1868              		.loc 1 1883 9 view .LVU519
1885:ThirdParty/FreeRTOS/tasks.c **** 
 1869              		.loc 1 1885 9 view .LVU520
 1870 0002 0028     		cmp	r0, #0
 1871 0004 43D0     		beq	.L137
 1872 0006 0446     		mov	r4, r0
1885:ThirdParty/FreeRTOS/tasks.c **** 
 1873              		.loc 1 1885 38 discriminator 2 view .LVU521
1903:ThirdParty/FreeRTOS/tasks.c **** 
 1874              		.loc 1 1903 9 view .LVU522
 1875 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1876              	.LVL135:
1905:ThirdParty/FreeRTOS/tasks.c ****         {
 1877              		.loc 1 1905 9 view .LVU523
 1878              	.LBB161:
 1879              	.LBI161:
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1880              		.loc 2 212 38 view .LVU524
 1881              	.LBB162:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 1882              		.loc 2 214 9 view .LVU525
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 1883              		.loc 2 216 9 view .LVU526
 1884              		.syntax unified
 1885              	@ 216 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1886 000c EFF31185 			mrs r5, basepri											
 1887 0010 4FF05003 		mov r3, #80												
 1888 0014 83F31188 		msr basepri, r3											
 1889 0018 BFF36F8F 		isb														
 1890 001c BFF34F8F 		dsb														
 1891              	
 1892              	@ 0 "" 2
 1893              	.LVL136:
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 1894              		.loc 2 228 9 view .LVU527
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 1895              		.loc 2 228 9 is_stmt 0 view .LVU528
 1896              		.thumb
 1897              		.syntax unified
 1898              	.LBE162:
 1899              	.LBE161:
1907:ThirdParty/FreeRTOS/tasks.c ****             {
 1900              		.loc 1 1907 13 is_stmt 1 view .LVU529
1907:ThirdParty/FreeRTOS/tasks.c ****             {
 1901              		.loc 1 1907 17 is_stmt 0 view .LVU530
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 141


 1902 0020 2046     		mov	r0, r4
 1903 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1904              	.LVL137:
1907:ThirdParty/FreeRTOS/tasks.c ****             {
 1905              		.loc 1 1907 15 discriminator 1 view .LVU531
 1906 0026 0646     		mov	r6, r0
 1907 0028 0028     		cmp	r0, #0
 1908 002a 2CD0     		beq	.L132
1909:ThirdParty/FreeRTOS/tasks.c **** 
 1909              		.loc 1 1909 51 is_stmt 1 view .LVU532
1912:ThirdParty/FreeRTOS/tasks.c ****                 {
 1910              		.loc 1 1912 17 view .LVU533
1912:ThirdParty/FreeRTOS/tasks.c ****                 {
 1911              		.loc 1 1912 42 is_stmt 0 view .LVU534
 1912 002c 214B     		ldr	r3, .L138
 1913 002e 1B68     		ldr	r3, [r3]
1912:ThirdParty/FreeRTOS/tasks.c ****                 {
 1914              		.loc 1 1912 19 view .LVU535
 1915 0030 002B     		cmp	r3, #0
 1916 0032 37D1     		bne	.L133
1916:ThirdParty/FreeRTOS/tasks.c ****                     {
 1917              		.loc 1 1916 21 is_stmt 1 view .LVU536
1916:ThirdParty/FreeRTOS/tasks.c ****                     {
 1918              		.loc 1 1916 30 is_stmt 0 view .LVU537
 1919 0034 E26A     		ldr	r2, [r4, #44]
1916:ThirdParty/FreeRTOS/tasks.c ****                     {
 1920              		.loc 1 1916 58 view .LVU538
 1921 0036 204B     		ldr	r3, .L138+4
 1922 0038 1B68     		ldr	r3, [r3]
 1923 003a DB6A     		ldr	r3, [r3, #44]
1916:ThirdParty/FreeRTOS/tasks.c ****                     {
 1924              		.loc 1 1916 23 view .LVU539
 1925 003c 9A42     		cmp	r2, r3
 1926 003e 2FD3     		bcc	.L135
1918:ThirdParty/FreeRTOS/tasks.c **** 
 1927              		.loc 1 1918 25 is_stmt 1 view .LVU540
 1928              	.LVL138:
1923:ThirdParty/FreeRTOS/tasks.c ****                     }
 1929              		.loc 1 1923 25 view .LVU541
1923:ThirdParty/FreeRTOS/tasks.c ****                     }
 1930              		.loc 1 1923 39 is_stmt 0 view .LVU542
 1931 0040 0126     		movs	r6, #1
 1932 0042 1E4B     		ldr	r3, .L138+8
 1933 0044 1E60     		str	r6, [r3]
 1934              	.LVL139:
 1935              	.L134:
1927:ThirdParty/FreeRTOS/tasks.c ****                     }
 1936              		.loc 1 1927 49 is_stmt 1 view .LVU543
1930:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1937              		.loc 1 1930 21 view .LVU544
1930:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1938              		.loc 1 1930 30 is_stmt 0 view .LVU545
 1939 0046 271D     		adds	r7, r4, #4
 1940 0048 3846     		mov	r0, r7
 1941 004a FFF7FEFF 		bl	uxListRemove
 1942              	.LVL140:
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 142


 1943              		.loc 1 1931 21 is_stmt 1 view .LVU546
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1944              		.loc 1 1931 21 view .LVU547
 1945 004e E36A     		ldr	r3, [r4, #44]
 1946 0050 0122     		movs	r2, #1
 1947 0052 9A40     		lsls	r2, r2, r3
 1948 0054 1A49     		ldr	r1, .L138+12
 1949 0056 0868     		ldr	r0, [r1]
 1950 0058 0243     		orrs	r2, r2, r0
 1951 005a 0A60     		str	r2, [r1]
 1952              	.LBB163:
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1953              		.loc 1 1931 21 view .LVU548
 1954 005c 194A     		ldr	r2, .L138+16
 1955 005e 03EB8303 		add	r3, r3, r3, lsl #2
 1956 0062 02EB8303 		add	r3, r2, r3, lsl #2
 1957 0066 5B68     		ldr	r3, [r3, #4]
 1958              	.LVL141:
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1959              		.loc 1 1931 21 view .LVU549
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1960              		.loc 1 1931 21 view .LVU550
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1961              		.loc 1 1931 21 view .LVU551
 1962 0068 A360     		str	r3, [r4, #8]
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1963              		.loc 1 1931 21 view .LVU552
 1964 006a 9968     		ldr	r1, [r3, #8]
 1965 006c E160     		str	r1, [r4, #12]
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1966              		.loc 1 1931 21 view .LVU553
 1967 006e 4F60     		str	r7, [r1, #4]
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1968              		.loc 1 1931 21 view .LVU554
 1969 0070 9F60     		str	r7, [r3, #8]
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1970              		.loc 1 1931 21 view .LVU555
 1971 0072 E36A     		ldr	r3, [r4, #44]
 1972              	.LVL142:
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1973              		.loc 1 1931 21 is_stmt 0 view .LVU556
 1974 0074 03EB8301 		add	r1, r3, r3, lsl #2
 1975 0078 8800     		lsls	r0, r1, #2
 1976 007a 02EB8101 		add	r1, r2, r1, lsl #2
 1977 007e 6161     		str	r1, [r4, #20]
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1978              		.loc 1 1931 21 is_stmt 1 view .LVU557
 1979 0080 1158     		ldr	r1, [r2, r0]
 1980 0082 0131     		adds	r1, r1, #1
 1981 0084 1150     		str	r1, [r2, r0]
 1982              	.LBE163:
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1983              		.loc 1 1931 21 view .LVU558
1931:ThirdParty/FreeRTOS/tasks.c ****                 }
 1984              		.loc 1 1931 51 view .LVU559
 1985              	.LVL143:
 1986              	.L132:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 143


1943:ThirdParty/FreeRTOS/tasks.c ****             }
 1987              		.loc 1 1943 41 view .LVU560
1946:ThirdParty/FreeRTOS/tasks.c **** 
 1988              		.loc 1 1946 9 view .LVU561
 1989              	.LBB164:
 1990              	.LBI164:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 1991              		.loc 2 232 34 view .LVU562
 1992              	.LBB165:
 1993              		.loc 2 234 9 view .LVU563
 1994              		.syntax unified
 1995              	@ 234 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 1996 0086 85F31188 			msr basepri, r5	
 1997              	@ 0 "" 2
 1998              		.thumb
 1999              		.syntax unified
 2000              	.LBE165:
 2001              	.LBE164:
1948:ThirdParty/FreeRTOS/tasks.c ****     }
 2002              		.loc 1 1948 9 view .LVU564
1949:ThirdParty/FreeRTOS/tasks.c **** 
 2003              		.loc 1 1949 5 is_stmt 0 view .LVU565
 2004 008a 3046     		mov	r0, r6
 2005 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2006              	.LVL144:
 2007              	.L137:
1885:ThirdParty/FreeRTOS/tasks.c **** 
 2008              		.loc 1 1885 9 is_stmt 1 discriminator 1 view .LVU566
 2009              	.LBB166:
 2010              	.LBI166:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2011              		.loc 2 196 34 view .LVU567
 2012              	.LBB167:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2013              		.loc 2 198 9 view .LVU568
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2014              		.loc 2 200 9 view .LVU569
 2015              		.syntax unified
 2016              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2017 008e 4FF05003 			mov r3, #80												
 2018 0092 83F31188 		msr basepri, r3											
 2019 0096 BFF36F8F 		isb														
 2020 009a BFF34F8F 		dsb														
 2021              	
 2022              	@ 0 "" 2
 2023              		.thumb
 2024              		.syntax unified
 2025              	.L131:
 2026              	.LBE167:
 2027              	.LBE166:
1885:ThirdParty/FreeRTOS/tasks.c **** 
 2028              		.loc 1 1885 9 discriminator 3 view .LVU570
1885:ThirdParty/FreeRTOS/tasks.c **** 
 2029              		.loc 1 1885 9 discriminator 3 view .LVU571
 2030 009e FEE7     		b	.L131
 2031              	.LVL145:
 2032              	.L135:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 144


1881:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2033              		.loc 1 1881 20 is_stmt 0 view .LVU572
 2034 00a0 0026     		movs	r6, #0
 2035 00a2 D0E7     		b	.L134
 2036              	.L133:
1938:ThirdParty/FreeRTOS/tasks.c ****                 }
 2037              		.loc 1 1938 21 is_stmt 1 view .LVU573
 2038 00a4 04F11801 		add	r1, r4, #24
 2039 00a8 0748     		ldr	r0, .L138+20
 2040 00aa FFF7FEFF 		bl	vListInsertEnd
 2041              	.LVL146:
1881:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 2042              		.loc 1 1881 20 is_stmt 0 view .LVU574
 2043 00ae 0026     		movs	r6, #0
 2044 00b0 E9E7     		b	.L132
 2045              	.L139:
 2046 00b2 00BF     		.align	2
 2047              	.L138:
 2048 00b4 00000000 		.word	uxSchedulerSuspended
 2049 00b8 00000000 		.word	pxCurrentTCB
 2050 00bc 00000000 		.word	xYieldPending
 2051 00c0 00000000 		.word	uxTopReadyPriority
 2052 00c4 00000000 		.word	pxReadyTasksLists
 2053 00c8 00000000 		.word	xPendingReadyList
 2054              		.cfi_endproc
 2055              	.LFE17:
 2057              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2058              		.align	2
 2059              	.LC0:
 2060 0000 49444C45 		.ascii	"IDLE\000"
 2060      00
 2061              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2062              		.align	1
 2063              		.global	vTaskStartScheduler
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2068              	vTaskStartScheduler:
 2069              	.LFB18:
1955:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 2070              		.loc 1 1955 1 is_stmt 1 view -0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 0
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074 0000 00B5     		push	{lr}
 2075              	.LCFI17:
 2076              		.cfi_def_cfa_offset 4
 2077              		.cfi_offset 14, -4
 2078 0002 83B0     		sub	sp, sp, #12
 2079              	.LCFI18:
 2080              		.cfi_def_cfa_offset 16
1956:ThirdParty/FreeRTOS/tasks.c **** 
 2081              		.loc 1 1956 5 view .LVU576
1988:ThirdParty/FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
 2082              		.loc 1 1988 9 view .LVU577
1988:ThirdParty/FreeRTOS/tasks.c ****                                configIDLE_TASK_NAME,
 2083              		.loc 1 1988 19 is_stmt 0 view .LVU578
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 145


 2084 0004 184B     		ldr	r3, .L147
 2085 0006 0193     		str	r3, [sp, #4]
 2086 0008 0023     		movs	r3, #0
 2087 000a 0093     		str	r3, [sp]
 2088 000c 8022     		movs	r2, #128
 2089 000e 1749     		ldr	r1, .L147+4
 2090 0010 1748     		ldr	r0, .L147+8
 2091 0012 FFF7FEFF 		bl	xTaskCreate
 2092              	.LVL147:
2010:ThirdParty/FreeRTOS/tasks.c ****     {
 2093              		.loc 1 2010 5 is_stmt 1 view .LVU579
2010:ThirdParty/FreeRTOS/tasks.c ****     {
 2094              		.loc 1 2010 7 is_stmt 0 view .LVU580
 2095 0016 0128     		cmp	r0, #1
 2096 0018 07D0     		beq	.L145
2066:ThirdParty/FreeRTOS/tasks.c ****     }
 2097              		.loc 1 2066 9 is_stmt 1 view .LVU581
 2098 001a B0F1FF3F 		cmp	r0, #-1
 2099 001e 19D0     		beq	.L146
 2100              	.LVL148:
 2101              	.L142:
2066:ThirdParty/FreeRTOS/tasks.c ****     }
 2102              		.loc 1 2066 73 discriminator 2 view .LVU582
2071:ThirdParty/FreeRTOS/tasks.c **** 
 2103              		.loc 1 2071 5 view .LVU583
2075:ThirdParty/FreeRTOS/tasks.c **** }
 2104              		.loc 1 2075 5 view .LVU584
 2105 0020 144B     		ldr	r3, .L147+12
 2106 0022 1B68     		ldr	r3, [r3]
2076:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2107              		.loc 1 2076 1 is_stmt 0 view .LVU585
 2108 0024 03B0     		add	sp, sp, #12
 2109              	.LCFI19:
 2110              		.cfi_remember_state
 2111              		.cfi_def_cfa_offset 4
 2112              		@ sp needed
 2113 0026 5DF804FB 		ldr	pc, [sp], #4
 2114              	.LVL149:
 2115              	.L145:
 2116              	.LCFI20:
 2117              		.cfi_restore_state
2026:ThirdParty/FreeRTOS/tasks.c **** 
 2118              		.loc 1 2026 9 is_stmt 1 view .LVU586
 2119              	.LBB168:
 2120              	.LBI168:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2121              		.loc 2 196 34 view .LVU587
 2122              	.LBB169:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2123              		.loc 2 198 9 view .LVU588
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2124              		.loc 2 200 9 view .LVU589
 2125              		.syntax unified
 2126              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2127 002a 4FF05003 			mov r3, #80												
 2128 002e 83F31188 		msr basepri, r3											
 2129 0032 BFF36F8F 		isb														
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 146


 2130 0036 BFF34F8F 		dsb														
 2131              	
 2132              	@ 0 "" 2
 2133              		.thumb
 2134              		.syntax unified
 2135              	.LBE169:
 2136              	.LBE168:
2036:ThirdParty/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2137              		.loc 1 2036 9 view .LVU590
2036:ThirdParty/FreeRTOS/tasks.c ****         xSchedulerRunning = pdTRUE;
 2138              		.loc 1 2036 30 is_stmt 0 view .LVU591
 2139 003a 0F4B     		ldr	r3, .L147+16
 2140 003c 4FF0FF32 		mov	r2, #-1
 2141 0040 1A60     		str	r2, [r3]
2037:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2142              		.loc 1 2037 9 is_stmt 1 view .LVU592
2037:ThirdParty/FreeRTOS/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2143              		.loc 1 2037 27 is_stmt 0 view .LVU593
 2144 0042 0E4B     		ldr	r3, .L147+20
 2145 0044 0122     		movs	r2, #1
 2146 0046 1A60     		str	r2, [r3]
2038:ThirdParty/FreeRTOS/tasks.c **** 
 2147              		.loc 1 2038 9 is_stmt 1 view .LVU594
2038:ThirdParty/FreeRTOS/tasks.c **** 
 2148              		.loc 1 2038 20 is_stmt 0 view .LVU595
 2149 0048 0D4B     		ldr	r3, .L147+24
 2150 004a 0022     		movs	r2, #0
 2151 004c 1A60     		str	r2, [r3]
2046:ThirdParty/FreeRTOS/tasks.c **** 
 2152              		.loc 1 2046 49 is_stmt 1 view .LVU596
2048:ThirdParty/FreeRTOS/tasks.c **** 
 2153              		.loc 1 2048 32 view .LVU597
2052:ThirdParty/FreeRTOS/tasks.c **** 
 2154              		.loc 1 2052 9 view .LVU598
 2155 004e FFF7FEFF 		bl	xPortStartScheduler
 2156              	.LVL150:
2052:ThirdParty/FreeRTOS/tasks.c **** 
 2157              		.loc 1 2052 9 is_stmt 0 view .LVU599
 2158 0052 E5E7     		b	.L142
 2159              	.LVL151:
 2160              	.L146:
2066:ThirdParty/FreeRTOS/tasks.c ****     }
 2161              		.loc 1 2066 9 is_stmt 1 discriminator 1 view .LVU600
 2162              	.LBB170:
 2163              	.LBI170:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2164              		.loc 2 196 34 view .LVU601
 2165              	.LBB171:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2166              		.loc 2 198 9 view .LVU602
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2167              		.loc 2 200 9 view .LVU603
 2168              		.syntax unified
 2169              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2170 0054 4FF05003 			mov r3, #80												
 2171 0058 83F31188 		msr basepri, r3											
 2172 005c BFF36F8F 		isb														
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 147


 2173 0060 BFF34F8F 		dsb														
 2174              	
 2175              	@ 0 "" 2
 2176              		.thumb
 2177              		.syntax unified
 2178              	.L143:
 2179              	.LBE171:
 2180              	.LBE170:
2066:ThirdParty/FreeRTOS/tasks.c ****     }
 2181              		.loc 1 2066 9 discriminator 3 view .LVU604
2066:ThirdParty/FreeRTOS/tasks.c ****     }
 2182              		.loc 1 2066 9 discriminator 3 view .LVU605
 2183 0064 FEE7     		b	.L143
 2184              	.L148:
 2185 0066 00BF     		.align	2
 2186              	.L147:
 2187 0068 00000000 		.word	xIdleTaskHandle
 2188 006c 00000000 		.word	.LC0
 2189 0070 00000000 		.word	prvIdleTask
 2190 0074 00000000 		.word	uxTopUsedPriority
 2191 0078 00000000 		.word	xNextTaskUnblockTime
 2192 007c 00000000 		.word	xSchedulerRunning
 2193 0080 00000000 		.word	xTickCount
 2194              		.cfi_endproc
 2195              	.LFE18:
 2197              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2198              		.align	1
 2199              		.global	vTaskEndScheduler
 2200              		.syntax unified
 2201              		.thumb
 2202              		.thumb_func
 2204              	vTaskEndScheduler:
 2205              	.LFB19:
2080:ThirdParty/FreeRTOS/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2206              		.loc 1 2080 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 0
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 2210 0000 08B5     		push	{r3, lr}
 2211              	.LCFI21:
 2212              		.cfi_def_cfa_offset 8
 2213              		.cfi_offset 3, -8
 2214              		.cfi_offset 14, -4
2084:ThirdParty/FreeRTOS/tasks.c ****     xSchedulerRunning = pdFALSE;
 2215              		.loc 1 2084 5 view .LVU607
 2216              	.LBB172:
 2217              	.LBI172:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2218              		.loc 2 196 34 view .LVU608
 2219              	.LBB173:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2220              		.loc 2 198 9 view .LVU609
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2221              		.loc 2 200 9 view .LVU610
 2222              		.syntax unified
 2223              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2224 0002 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 148


 2225 0006 83F31188 		msr basepri, r3											
 2226 000a BFF36F8F 		isb														
 2227 000e BFF34F8F 		dsb														
 2228              	
 2229              	@ 0 "" 2
 2230              		.thumb
 2231              		.syntax unified
 2232              	.LBE173:
 2233              	.LBE172:
2085:ThirdParty/FreeRTOS/tasks.c ****     vPortEndScheduler();
 2234              		.loc 1 2085 5 view .LVU611
2085:ThirdParty/FreeRTOS/tasks.c ****     vPortEndScheduler();
 2235              		.loc 1 2085 23 is_stmt 0 view .LVU612
 2236 0012 034B     		ldr	r3, .L151
 2237 0014 0022     		movs	r2, #0
 2238 0016 1A60     		str	r2, [r3]
2086:ThirdParty/FreeRTOS/tasks.c **** }
 2239              		.loc 1 2086 5 is_stmt 1 view .LVU613
 2240 0018 FFF7FEFF 		bl	vPortEndScheduler
 2241              	.LVL152:
2087:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2242              		.loc 1 2087 1 is_stmt 0 view .LVU614
 2243 001c 08BD     		pop	{r3, pc}
 2244              	.L152:
 2245 001e 00BF     		.align	2
 2246              	.L151:
 2247 0020 00000000 		.word	xSchedulerRunning
 2248              		.cfi_endproc
 2249              	.LFE19:
 2251              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2252              		.align	1
 2253              		.global	vTaskSuspendAll
 2254              		.syntax unified
 2255              		.thumb
 2256              		.thumb_func
 2258              	vTaskSuspendAll:
 2259              	.LFB20:
2091:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required as the variable is of type
 2260              		.loc 1 2091 1 is_stmt 1 view -0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 0
 2263              		@ frame_needed = 0, uses_anonymous_args = 0
 2264              		@ link register save eliminated.
2099:ThirdParty/FreeRTOS/tasks.c **** 
 2265              		.loc 1 2099 27 view .LVU616
2103:ThirdParty/FreeRTOS/tasks.c **** 
 2266              		.loc 1 2103 5 view .LVU617
 2267 0000 024A     		ldr	r2, .L154
 2268 0002 1368     		ldr	r3, [r2]
 2269 0004 0133     		adds	r3, r3, #1
 2270 0006 1360     		str	r3, [r2]
2107:ThirdParty/FreeRTOS/tasks.c **** }
 2271              		.loc 1 2107 5 view .LVU618
2108:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2272              		.loc 1 2108 1 is_stmt 0 view .LVU619
 2273 0008 7047     		bx	lr
 2274              	.L155:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 149


 2275 000a 00BF     		.align	2
 2276              	.L154:
 2277 000c 00000000 		.word	uxSchedulerSuspended
 2278              		.cfi_endproc
 2279              	.LFE20:
 2281              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2282              		.align	1
 2283              		.global	xTaskGetTickCount
 2284              		.syntax unified
 2285              		.thumb
 2286              		.thumb_func
 2288              	xTaskGetTickCount:
 2289              	.LFB22:
2287:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xTicks;
 2290              		.loc 1 2287 1 is_stmt 1 view -0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 0
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
 2294              		@ link register save eliminated.
2288:ThirdParty/FreeRTOS/tasks.c **** 
 2295              		.loc 1 2288 5 view .LVU621
2291:ThirdParty/FreeRTOS/tasks.c ****     {
 2296              		.loc 1 2291 35 view .LVU622
2293:ThirdParty/FreeRTOS/tasks.c ****     }
 2297              		.loc 1 2293 9 view .LVU623
2293:ThirdParty/FreeRTOS/tasks.c ****     }
 2298              		.loc 1 2293 16 is_stmt 0 view .LVU624
 2299 0000 014B     		ldr	r3, .L157
 2300 0002 1868     		ldr	r0, [r3]
 2301              	.LVL153:
2295:ThirdParty/FreeRTOS/tasks.c **** 
 2302              		.loc 1 2295 34 is_stmt 1 view .LVU625
2297:ThirdParty/FreeRTOS/tasks.c **** }
 2303              		.loc 1 2297 5 view .LVU626
2298:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2304              		.loc 1 2298 1 is_stmt 0 view .LVU627
 2305 0004 7047     		bx	lr
 2306              	.L158:
 2307 0006 00BF     		.align	2
 2308              	.L157:
 2309 0008 00000000 		.word	xTickCount
 2310              		.cfi_endproc
 2311              	.LFE22:
 2313              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2314              		.align	1
 2315              		.global	xTaskGetTickCountFromISR
 2316              		.syntax unified
 2317              		.thumb
 2318              		.thumb_func
 2320              	xTaskGetTickCountFromISR:
 2321              	.LFB23:
2302:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xReturn;
 2322              		.loc 1 2302 1 is_stmt 1 view -0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326 0000 08B5     		push	{r3, lr}
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 150


 2327              	.LCFI22:
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 3, -8
 2330              		.cfi_offset 14, -4
2303:ThirdParty/FreeRTOS/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
 2331              		.loc 1 2303 5 view .LVU629
2304:ThirdParty/FreeRTOS/tasks.c **** 
 2332              		.loc 1 2304 5 view .LVU630
2320:ThirdParty/FreeRTOS/tasks.c **** 
 2333              		.loc 1 2320 5 view .LVU631
 2334 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2335              	.LVL154:
2322:ThirdParty/FreeRTOS/tasks.c ****     {
 2336              		.loc 1 2322 5 view .LVU632
2324:ThirdParty/FreeRTOS/tasks.c ****     }
 2337              		.loc 1 2324 9 view .LVU633
2324:ThirdParty/FreeRTOS/tasks.c ****     }
 2338              		.loc 1 2324 17 is_stmt 0 view .LVU634
 2339 0006 014B     		ldr	r3, .L161
 2340 0008 1868     		ldr	r0, [r3]
 2341              	.LVL155:
2326:ThirdParty/FreeRTOS/tasks.c **** 
 2342              		.loc 1 2326 5 is_stmt 1 view .LVU635
2328:ThirdParty/FreeRTOS/tasks.c **** }
 2343              		.loc 1 2328 5 view .LVU636
2329:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2344              		.loc 1 2329 1 is_stmt 0 view .LVU637
 2345 000a 08BD     		pop	{r3, pc}
 2346              	.L162:
 2347              		.align	2
 2348              	.L161:
 2349 000c 00000000 		.word	xTickCount
 2350              		.cfi_endproc
 2351              	.LFE23:
 2353              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2354              		.align	1
 2355              		.global	uxTaskGetNumberOfTasks
 2356              		.syntax unified
 2357              		.thumb
 2358              		.thumb_func
 2360              	uxTaskGetNumberOfTasks:
 2361              	.LFB24:
2333:ThirdParty/FreeRTOS/tasks.c ****     /* A critical section is not required because the variables are of type
 2362              		.loc 1 2333 1 is_stmt 1 view -0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
2336:ThirdParty/FreeRTOS/tasks.c **** }
 2367              		.loc 1 2336 5 view .LVU639
2336:ThirdParty/FreeRTOS/tasks.c **** }
 2368              		.loc 1 2336 12 is_stmt 0 view .LVU640
 2369 0000 014B     		ldr	r3, .L164
 2370 0002 1868     		ldr	r0, [r3]
2337:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2371              		.loc 1 2337 1 view .LVU641
 2372 0004 7047     		bx	lr
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 151


 2373              	.L165:
 2374 0006 00BF     		.align	2
 2375              	.L164:
 2376 0008 00000000 		.word	uxCurrentNumberOfTasks
 2377              		.cfi_endproc
 2378              	.LFE24:
 2380              		.section	.text.pcTaskGetName,"ax",%progbits
 2381              		.align	1
 2382              		.global	pcTaskGetName
 2383              		.syntax unified
 2384              		.thumb
 2385              		.thumb_func
 2387              	pcTaskGetName:
 2388              	.LVL156:
 2389              	.LFB25:
2341:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2390              		.loc 1 2341 1 is_stmt 1 view -0
 2391              		.cfi_startproc
 2392              		@ args = 0, pretend = 0, frame = 0
 2393              		@ frame_needed = 0, uses_anonymous_args = 0
 2394              		@ link register save eliminated.
2342:ThirdParty/FreeRTOS/tasks.c **** 
 2395              		.loc 1 2342 5 view .LVU643
2346:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2396              		.loc 1 2346 5 view .LVU644
2346:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2397              		.loc 1 2346 13 is_stmt 0 view .LVU645
 2398 0000 0346     		mov	r3, r0
 2399 0002 10B1     		cbz	r0, .L169
 2400              	.LVL157:
 2401              	.L167:
2347:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2402              		.loc 1 2347 26 is_stmt 1 discriminator 2 view .LVU646
2348:ThirdParty/FreeRTOS/tasks.c **** }
 2403              		.loc 1 2348 5 view .LVU647
2349:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2404              		.loc 1 2349 1 is_stmt 0 view .LVU648
 2405 0004 03F13400 		add	r0, r3, #52
 2406 0008 7047     		bx	lr
 2407              	.LVL158:
 2408              	.L169:
2346:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTCB );
 2409              		.loc 1 2346 13 discriminator 1 view .LVU649
 2410 000a 064B     		ldr	r3, .L170
 2411 000c 1B68     		ldr	r3, [r3]
 2412              	.LVL159:
2347:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2413              		.loc 1 2347 5 is_stmt 1 view .LVU650
 2414 000e 002B     		cmp	r3, #0
 2415 0010 F8D1     		bne	.L167
2347:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2416              		.loc 1 2347 5 discriminator 1 view .LVU651
 2417              	.LBB174:
 2418              	.LBI174:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2419              		.loc 2 196 34 view .LVU652
 2420              	.LBB175:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 152


 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2421              		.loc 2 198 9 view .LVU653
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2422              		.loc 2 200 9 view .LVU654
 2423              		.syntax unified
 2424              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2425 0012 4FF05003 			mov r3, #80												
 2426 0016 83F31188 		msr basepri, r3											
 2427 001a BFF36F8F 		isb														
 2428 001e BFF34F8F 		dsb														
 2429              	
 2430              	@ 0 "" 2
 2431              	.LVL160:
 2432              		.thumb
 2433              		.syntax unified
 2434              	.L168:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2435              		.loc 2 200 9 is_stmt 0 view .LVU655
 2436              	.LBE175:
 2437              	.LBE174:
2347:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2438              		.loc 1 2347 5 is_stmt 1 discriminator 3 view .LVU656
2347:ThirdParty/FreeRTOS/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
 2439              		.loc 1 2347 5 discriminator 3 view .LVU657
 2440 0022 FEE7     		b	.L168
 2441              	.L171:
 2442              		.align	2
 2443              	.L170:
 2444 0024 00000000 		.word	pxCurrentTCB
 2445              		.cfi_endproc
 2446              	.LFE25:
 2448              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2449              		.align	1
 2450              		.global	xTaskIncrementTick
 2451              		.syntax unified
 2452              		.thumb
 2453              		.thumb_func
 2455              	xTaskIncrementTick:
 2456              	.LFB27:
2721:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB;
 2457              		.loc 1 2721 1 view -0
 2458              		.cfi_startproc
 2459              		@ args = 0, pretend = 0, frame = 0
 2460              		@ frame_needed = 0, uses_anonymous_args = 0
 2461 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2462              	.LCFI23:
 2463              		.cfi_def_cfa_offset 24
 2464              		.cfi_offset 3, -24
 2465              		.cfi_offset 4, -20
 2466              		.cfi_offset 5, -16
 2467              		.cfi_offset 6, -12
 2468              		.cfi_offset 7, -8
 2469              		.cfi_offset 14, -4
2722:ThirdParty/FreeRTOS/tasks.c ****     TickType_t xItemValue;
 2470              		.loc 1 2722 5 view .LVU659
2723:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
 2471              		.loc 1 2723 5 view .LVU660
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 153


2724:ThirdParty/FreeRTOS/tasks.c **** 
 2472              		.loc 1 2724 5 view .LVU661
 2473              	.LVL161:
2729:ThirdParty/FreeRTOS/tasks.c **** 
 2474              		.loc 1 2729 43 view .LVU662
2731:ThirdParty/FreeRTOS/tasks.c ****     {
 2475              		.loc 1 2731 5 view .LVU663
2731:ThirdParty/FreeRTOS/tasks.c ****     {
 2476              		.loc 1 2731 30 is_stmt 0 view .LVU664
 2477 0002 524B     		ldr	r3, .L196
 2478 0004 1B68     		ldr	r3, [r3]
2731:ThirdParty/FreeRTOS/tasks.c ****     {
 2479              		.loc 1 2731 7 view .LVU665
 2480 0006 002B     		cmp	r3, #0
 2481 0008 40F09980 		bne	.L173
 2482              	.LBB176:
2735:ThirdParty/FreeRTOS/tasks.c **** 
 2483              		.loc 1 2735 9 is_stmt 1 view .LVU666
2735:ThirdParty/FreeRTOS/tasks.c **** 
 2484              		.loc 1 2735 55 is_stmt 0 view .LVU667
 2485 000c 504B     		ldr	r3, .L196+4
 2486 000e 1C68     		ldr	r4, [r3]
2735:ThirdParty/FreeRTOS/tasks.c **** 
 2487              		.loc 1 2735 26 view .LVU668
 2488 0010 0134     		adds	r4, r4, #1
 2489              	.LVL162:
2739:ThirdParty/FreeRTOS/tasks.c **** 
 2490              		.loc 1 2739 9 is_stmt 1 view .LVU669
2739:ThirdParty/FreeRTOS/tasks.c **** 
 2491              		.loc 1 2739 20 is_stmt 0 view .LVU670
 2492 0012 1C60     		str	r4, [r3]
2741:ThirdParty/FreeRTOS/tasks.c ****         {
 2493              		.loc 1 2741 9 is_stmt 1 view .LVU671
2741:ThirdParty/FreeRTOS/tasks.c ****         {
 2494              		.loc 1 2741 11 is_stmt 0 view .LVU672
 2495 0014 C4B9     		cbnz	r4, .L174
 2496              	.LBB177:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2497              		.loc 1 2743 13 is_stmt 1 view .LVU673
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2498              		.loc 1 2743 13 view .LVU674
 2499 0016 4F4B     		ldr	r3, .L196+8
 2500 0018 1B68     		ldr	r3, [r3]
 2501 001a 1B68     		ldr	r3, [r3]
 2502 001c 43B1     		cbz	r3, .L175
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2503              		.loc 1 2743 13 discriminator 1 view .LVU675
 2504              	.LBB178:
 2505              	.LBI178:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2506              		.loc 2 196 34 view .LVU676
 2507              	.LBB179:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2508              		.loc 2 198 9 view .LVU677
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2509              		.loc 2 200 9 view .LVU678
 2510              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 154


 2511              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2512 001e 4FF05003 			mov r3, #80												
 2513 0022 83F31188 		msr basepri, r3											
 2514 0026 BFF36F8F 		isb														
 2515 002a BFF34F8F 		dsb														
 2516              	
 2517              	@ 0 "" 2
 2518              		.thumb
 2519              		.syntax unified
 2520              	.L176:
 2521              	.LBE179:
 2522              	.LBE178:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2523              		.loc 1 2743 13 discriminator 3 view .LVU679
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2524              		.loc 1 2743 13 discriminator 3 view .LVU680
 2525 002e FEE7     		b	.L176
 2526              	.L175:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2527              		.loc 1 2743 13 discriminator 2 view .LVU681
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2528              		.loc 1 2743 13 discriminator 2 view .LVU682
 2529 0030 484A     		ldr	r2, .L196+8
 2530 0032 1168     		ldr	r1, [r2]
 2531              	.LVL163:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2532              		.loc 1 2743 13 discriminator 2 view .LVU683
 2533 0034 484B     		ldr	r3, .L196+12
 2534 0036 1868     		ldr	r0, [r3]
 2535 0038 1060     		str	r0, [r2]
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2536              		.loc 1 2743 13 discriminator 2 view .LVU684
 2537 003a 1960     		str	r1, [r3]
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2538              		.loc 1 2743 13 discriminator 2 view .LVU685
 2539 003c 474A     		ldr	r2, .L196+16
 2540 003e 1368     		ldr	r3, [r2]
 2541 0040 0133     		adds	r3, r3, #1
 2542 0042 1360     		str	r3, [r2]
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2543              		.loc 1 2743 13 discriminator 2 view .LVU686
 2544 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2545              	.LVL164:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2546              		.loc 1 2743 13 is_stmt 0 discriminator 2 view .LVU687
 2547              	.LBE177:
2743:ThirdParty/FreeRTOS/tasks.c ****         }
 2548              		.loc 1 2743 39 is_stmt 1 discriminator 1 view .LVU688
 2549              	.L174:
2747:ThirdParty/FreeRTOS/tasks.c ****         }
 2550              		.loc 1 2747 37 view .LVU689
2754:ThirdParty/FreeRTOS/tasks.c ****         {
 2551              		.loc 1 2754 9 view .LVU690
2754:ThirdParty/FreeRTOS/tasks.c ****         {
 2552              		.loc 1 2754 29 is_stmt 0 view .LVU691
 2553 0048 454B     		ldr	r3, .L196+20
 2554 004a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 155


2754:ThirdParty/FreeRTOS/tasks.c ****         {
 2555              		.loc 1 2754 11 view .LVU692
 2556 004c A342     		cmp	r3, r4
 2557 004e 11D9     		bls	.L188
 2558              	.LBE176:
2724:ThirdParty/FreeRTOS/tasks.c **** 
 2559              		.loc 1 2724 16 view .LVU693
 2560 0050 0020     		movs	r0, #0
 2561              	.LVL165:
 2562              	.L178:
 2563              	.LBB185:
2841:ThirdParty/FreeRTOS/tasks.c ****             {
 2564              		.loc 1 2841 13 is_stmt 1 view .LVU694
2841:ThirdParty/FreeRTOS/tasks.c ****             {
 2565              		.loc 1 2841 17 is_stmt 0 view .LVU695
 2566 0052 444B     		ldr	r3, .L196+24
 2567 0054 1B68     		ldr	r3, [r3]
 2568 0056 DB6A     		ldr	r3, [r3, #44]
 2569 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2570 005c 9A00     		lsls	r2, r3, #2
 2571 005e 424B     		ldr	r3, .L196+28
 2572 0060 9B58     		ldr	r3, [r3, r2]
2841:ThirdParty/FreeRTOS/tasks.c ****             {
 2573              		.loc 1 2841 15 view .LVU696
 2574 0062 012B     		cmp	r3, #1
 2575 0064 00D9     		bls	.L186
2843:ThirdParty/FreeRTOS/tasks.c ****             }
 2576              		.loc 1 2843 33 view .LVU697
 2577 0066 0120     		movs	r0, #1
 2578              	.LVL166:
 2579              	.L186:
2847:ThirdParty/FreeRTOS/tasks.c ****             }
 2580              		.loc 1 2847 41 is_stmt 1 view .LVU698
2869:ThirdParty/FreeRTOS/tasks.c ****             {
 2581              		.loc 1 2869 13 view .LVU699
2869:ThirdParty/FreeRTOS/tasks.c ****             {
 2582              		.loc 1 2869 31 is_stmt 0 view .LVU700
 2583 0068 404B     		ldr	r3, .L196+32
 2584 006a 1B68     		ldr	r3, [r3]
2869:ThirdParty/FreeRTOS/tasks.c ****             {
 2585              		.loc 1 2869 15 view .LVU701
 2586 006c 002B     		cmp	r3, #0
 2587 006e 6BD0     		beq	.L172
2871:ThirdParty/FreeRTOS/tasks.c ****             }
 2588              		.loc 1 2871 33 view .LVU702
 2589 0070 0120     		movs	r0, #1
 2590              	.LVL167:
2871:ThirdParty/FreeRTOS/tasks.c ****             }
 2591              		.loc 1 2871 33 view .LVU703
 2592              	.LBE185:
2893:ThirdParty/FreeRTOS/tasks.c **** }
 2593              		.loc 1 2893 5 is_stmt 1 view .LVU704
2893:ThirdParty/FreeRTOS/tasks.c **** }
 2594              		.loc 1 2893 12 is_stmt 0 view .LVU705
 2595 0072 69E0     		b	.L172
 2596              	.LVL168:
 2597              	.L188:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 156


2724:ThirdParty/FreeRTOS/tasks.c **** 
 2598              		.loc 1 2724 16 view .LVU706
 2599 0074 0020     		movs	r0, #0
 2600 0076 37E0     		b	.L177
 2601              	.LVL169:
 2602              	.L193:
 2603              	.LBB186:
2765:ThirdParty/FreeRTOS/tasks.c ****                     break;
 2604              		.loc 1 2765 21 is_stmt 1 view .LVU707
2765:ThirdParty/FreeRTOS/tasks.c ****                     break;
 2605              		.loc 1 2765 42 is_stmt 0 view .LVU708
 2606 0078 394B     		ldr	r3, .L196+20
 2607 007a 4FF0FF32 		mov	r2, #-1
 2608 007e 1A60     		str	r2, [r3]
2766:ThirdParty/FreeRTOS/tasks.c ****                 }
 2609              		.loc 1 2766 21 is_stmt 1 view .LVU709
 2610 0080 E7E7     		b	.L178
 2611              	.LVL170:
 2612              	.L194:
2784:ThirdParty/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2613              		.loc 1 2784 25 view .LVU710
2784:ThirdParty/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2614              		.loc 1 2784 46 is_stmt 0 view .LVU711
 2615 0082 374B     		ldr	r3, .L196+20
 2616              	.LVL171:
2784:ThirdParty/FreeRTOS/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2617              		.loc 1 2784 46 view .LVU712
 2618 0084 1A60     		str	r2, [r3]
2785:ThirdParty/FreeRTOS/tasks.c ****                     }
 2619              		.loc 1 2785 25 is_stmt 1 view .LVU713
 2620 0086 E4E7     		b	.L178
 2621              	.LVL172:
 2622              	.L195:
 2623              	.LBB180:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2624              		.loc 1 2793 21 discriminator 1 view .LVU714
 2625 0088 D968     		ldr	r1, [r3, #12]
 2626 008a 5160     		str	r1, [r2, #4]
 2627 008c 42E0     		b	.L181
 2628              	.LVL173:
 2629              	.L183:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2630              		.loc 1 2793 21 is_stmt 0 discriminator 1 view .LVU715
 2631              	.LBE180:
 2632              	.LBB181:
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2633              		.loc 1 2799 25 is_stmt 1 discriminator 3 view .LVU716
 2634 008e 0021     		movs	r1, #0
 2635 0090 9962     		str	r1, [r3, #40]
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2636              		.loc 1 2799 25 discriminator 3 view .LVU717
 2637 0092 1168     		ldr	r1, [r2]
 2638 0094 0139     		subs	r1, r1, #1
 2639 0096 1160     		str	r1, [r2]
 2640              	.LBE181:
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2641              		.loc 1 2799 70 discriminator 3 view .LVU718
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 157


 2642              	.LVL174:
 2643              	.L182:
2803:ThirdParty/FreeRTOS/tasks.c ****                     }
 2644              		.loc 1 2803 49 view .LVU719
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2645              		.loc 1 2808 21 view .LVU720
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2646              		.loc 1 2808 21 view .LVU721
 2647 0098 DA6A     		ldr	r2, [r3, #44]
 2648 009a 0121     		movs	r1, #1
 2649 009c 9140     		lsls	r1, r1, r2
 2650 009e 344E     		ldr	r6, .L196+36
 2651 00a0 3768     		ldr	r7, [r6]
 2652 00a2 3943     		orrs	r1, r1, r7
 2653 00a4 3160     		str	r1, [r6]
 2654              	.LBB182:
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2655              		.loc 1 2808 21 view .LVU722
 2656 00a6 3049     		ldr	r1, .L196+28
 2657 00a8 02EB8202 		add	r2, r2, r2, lsl #2
 2658 00ac 4FEA820C 		lsl	ip, r2, #2
 2659 00b0 8C44     		add	ip, ip, r1
 2660 00b2 DCF80420 		ldr	r2, [ip, #4]
 2661              	.LVL175:
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2662              		.loc 1 2808 21 view .LVU723
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2663              		.loc 1 2808 21 view .LVU724
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2664              		.loc 1 2808 21 view .LVU725
 2665 00b6 9A60     		str	r2, [r3, #8]
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2666              		.loc 1 2808 21 view .LVU726
 2667 00b8 9668     		ldr	r6, [r2, #8]
 2668 00ba DE60     		str	r6, [r3, #12]
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2669              		.loc 1 2808 21 view .LVU727
 2670 00bc 7560     		str	r5, [r6, #4]
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2671              		.loc 1 2808 21 view .LVU728
 2672 00be 9560     		str	r5, [r2, #8]
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2673              		.loc 1 2808 21 view .LVU729
 2674 00c0 DA6A     		ldr	r2, [r3, #44]
 2675              	.LVL176:
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2676              		.loc 1 2808 21 is_stmt 0 view .LVU730
 2677 00c2 02EB820C 		add	ip, r2, r2, lsl #2
 2678 00c6 4FEA8C05 		lsl	r5, ip, #2
 2679 00ca 6E18     		adds	r6, r5, r1
 2680 00cc 5E61     		str	r6, [r3, #20]
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2681              		.loc 1 2808 21 is_stmt 1 view .LVU731
 2682 00ce 4D59     		ldr	r5, [r1, r5]
 2683 00d0 0135     		adds	r5, r5, #1
 2684 00d2 4FEA8C0C 		lsl	ip, ip, #2
 2685 00d6 41F80C50 		str	r5, [r1, ip]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 158


 2686              	.LBE182:
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2687              		.loc 1 2808 21 view .LVU732
2808:ThirdParty/FreeRTOS/tasks.c **** 
 2688              		.loc 1 2808 51 view .LVU733
2822:ThirdParty/FreeRTOS/tasks.c ****                         {
 2689              		.loc 1 2822 25 view .LVU734
2822:ThirdParty/FreeRTOS/tasks.c ****                         {
 2690              		.loc 1 2822 34 is_stmt 0 view .LVU735
 2691 00da DA6A     		ldr	r2, [r3, #44]
2822:ThirdParty/FreeRTOS/tasks.c ****                         {
 2692              		.loc 1 2822 61 view .LVU736
 2693 00dc 214B     		ldr	r3, .L196+24
 2694              	.LVL177:
2822:ThirdParty/FreeRTOS/tasks.c ****                         {
 2695              		.loc 1 2822 61 view .LVU737
 2696 00de 1B68     		ldr	r3, [r3]
 2697 00e0 DB6A     		ldr	r3, [r3, #44]
2822:ThirdParty/FreeRTOS/tasks.c ****                         {
 2698              		.loc 1 2822 27 view .LVU738
 2699 00e2 9A42     		cmp	r2, r3
 2700 00e4 00D9     		bls	.L177
2824:ThirdParty/FreeRTOS/tasks.c ****                         }
 2701              		.loc 1 2824 45 view .LVU739
 2702 00e6 0120     		movs	r0, #1
 2703              	.LVL178:
 2704              	.L177:
2756:ThirdParty/FreeRTOS/tasks.c ****             {
 2705              		.loc 1 2756 13 is_stmt 1 view .LVU740
2758:ThirdParty/FreeRTOS/tasks.c ****                 {
 2706              		.loc 1 2758 17 view .LVU741
2758:ThirdParty/FreeRTOS/tasks.c ****                 {
 2707              		.loc 1 2758 21 is_stmt 0 view .LVU742
 2708 00e8 1A4B     		ldr	r3, .L196+8
 2709 00ea 1B68     		ldr	r3, [r3]
 2710 00ec 1B68     		ldr	r3, [r3]
2758:ThirdParty/FreeRTOS/tasks.c ****                 {
 2711              		.loc 1 2758 19 view .LVU743
 2712 00ee 002B     		cmp	r3, #0
 2713 00f0 C2D0     		beq	.L193
2774:ThirdParty/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2714              		.loc 1 2774 21 is_stmt 1 view .LVU744
2774:ThirdParty/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2715              		.loc 1 2774 29 is_stmt 0 view .LVU745
 2716 00f2 184B     		ldr	r3, .L196+8
 2717 00f4 1B68     		ldr	r3, [r3]
 2718 00f6 DB68     		ldr	r3, [r3, #12]
2774:ThirdParty/FreeRTOS/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2719              		.loc 1 2774 27 view .LVU746
 2720 00f8 DB68     		ldr	r3, [r3, #12]
 2721              	.LVL179:
2775:ThirdParty/FreeRTOS/tasks.c **** 
 2722              		.loc 1 2775 21 is_stmt 1 view .LVU747
2775:ThirdParty/FreeRTOS/tasks.c **** 
 2723              		.loc 1 2775 32 is_stmt 0 view .LVU748
 2724 00fa 5A68     		ldr	r2, [r3, #4]
 2725              	.LVL180:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 159


2777:ThirdParty/FreeRTOS/tasks.c ****                     {
 2726              		.loc 1 2777 21 is_stmt 1 view .LVU749
2777:ThirdParty/FreeRTOS/tasks.c ****                     {
 2727              		.loc 1 2777 23 is_stmt 0 view .LVU750
 2728 00fc 9442     		cmp	r4, r2
 2729 00fe C0D3     		bcc	.L194
2789:ThirdParty/FreeRTOS/tasks.c ****                     }
 2730              		.loc 1 2789 49 is_stmt 1 view .LVU751
 2731              	.LBB183:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2732              		.loc 1 2793 21 view .LVU752
 2733 0100 5A69     		ldr	r2, [r3, #20]
 2734              	.LVL181:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2735              		.loc 1 2793 21 view .LVU753
 2736 0102 9D68     		ldr	r5, [r3, #8]
 2737 0104 D968     		ldr	r1, [r3, #12]
 2738 0106 A960     		str	r1, [r5, #8]
 2739              	.LVL182:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2740              		.loc 1 2793 21 view .LVU754
 2741 0108 9D68     		ldr	r5, [r3, #8]
 2742 010a 4D60     		str	r5, [r1, #4]
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2743              		.loc 1 2793 21 view .LVU755
 2744 010c 5168     		ldr	r1, [r2, #4]
 2745 010e 1D1D     		adds	r5, r3, #4
 2746 0110 A942     		cmp	r1, r5
 2747 0112 B9D0     		beq	.L195
 2748              	.L181:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2749              		.loc 1 2793 21 discriminator 3 view .LVU756
 2750 0114 0021     		movs	r1, #0
 2751 0116 5961     		str	r1, [r3, #20]
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2752              		.loc 1 2793 21 discriminator 3 view .LVU757
 2753 0118 1168     		ldr	r1, [r2]
 2754 011a 0139     		subs	r1, r1, #1
 2755 011c 1160     		str	r1, [r2]
 2756              	.LBE183:
2793:ThirdParty/FreeRTOS/tasks.c **** 
 2757              		.loc 1 2793 66 discriminator 3 view .LVU758
2797:ThirdParty/FreeRTOS/tasks.c ****                     {
 2758              		.loc 1 2797 21 view .LVU759
2797:ThirdParty/FreeRTOS/tasks.c ****                     {
 2759              		.loc 1 2797 25 is_stmt 0 view .LVU760
 2760 011e 9A6A     		ldr	r2, [r3, #40]
 2761              	.LVL183:
2797:ThirdParty/FreeRTOS/tasks.c ****                     {
 2762              		.loc 1 2797 23 view .LVU761
 2763 0120 002A     		cmp	r2, #0
 2764 0122 B9D0     		beq	.L182
 2765              	.LBB184:
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2766              		.loc 1 2799 25 is_stmt 1 view .LVU762
 2767              	.LVL184:
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 160


 2768              		.loc 1 2799 25 view .LVU763
 2769 0124 DE69     		ldr	r6, [r3, #28]
 2770 0126 196A     		ldr	r1, [r3, #32]
 2771 0128 B160     		str	r1, [r6, #8]
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2772              		.loc 1 2799 25 view .LVU764
 2773 012a DE69     		ldr	r6, [r3, #28]
 2774 012c 4E60     		str	r6, [r1, #4]
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2775              		.loc 1 2799 25 view .LVU765
 2776 012e 5668     		ldr	r6, [r2, #4]
 2777 0130 03F11801 		add	r1, r3, #24
 2778 0134 8E42     		cmp	r6, r1
 2779 0136 AAD1     		bne	.L183
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2780              		.loc 1 2799 25 discriminator 1 view .LVU766
 2781 0138 196A     		ldr	r1, [r3, #32]
 2782 013a 5160     		str	r1, [r2, #4]
 2783 013c A7E7     		b	.L183
 2784              	.LVL185:
 2785              	.L173:
2799:ThirdParty/FreeRTOS/tasks.c ****                     }
 2786              		.loc 1 2799 25 is_stmt 0 discriminator 1 view .LVU767
 2787              	.LBE184:
 2788              	.LBE186:
2882:ThirdParty/FreeRTOS/tasks.c **** 
 2789              		.loc 1 2882 9 is_stmt 1 view .LVU768
 2790 013e 0D4A     		ldr	r2, .L196+40
 2791 0140 1368     		ldr	r3, [r2]
 2792 0142 0133     		adds	r3, r3, #1
 2793 0144 1360     		str	r3, [r2]
2724:ThirdParty/FreeRTOS/tasks.c **** 
 2794              		.loc 1 2724 16 is_stmt 0 view .LVU769
 2795 0146 0020     		movs	r0, #0
 2796              	.LVL186:
 2797              	.L172:
2894:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2798              		.loc 1 2894 1 view .LVU770
 2799 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2800              	.L197:
 2801 014a 00BF     		.align	2
 2802              	.L196:
 2803 014c 00000000 		.word	uxSchedulerSuspended
 2804 0150 00000000 		.word	xTickCount
 2805 0154 00000000 		.word	pxDelayedTaskList
 2806 0158 00000000 		.word	pxOverflowDelayedTaskList
 2807 015c 00000000 		.word	xNumOfOverflows
 2808 0160 00000000 		.word	xNextTaskUnblockTime
 2809 0164 00000000 		.word	pxCurrentTCB
 2810 0168 00000000 		.word	pxReadyTasksLists
 2811 016c 00000000 		.word	xYieldPending
 2812 0170 00000000 		.word	uxTopReadyPriority
 2813 0174 00000000 		.word	xPendedTicks
 2814              		.cfi_endproc
 2815              	.LFE27:
 2817              		.section	.text.xTaskResumeAll,"ax",%progbits
 2818              		.align	1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 161


 2819              		.global	xTaskResumeAll
 2820              		.syntax unified
 2821              		.thumb
 2822              		.thumb_func
 2824              	xTaskResumeAll:
 2825              	.LFB21:
2175:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxTCB = NULL;
 2826              		.loc 1 2175 1 is_stmt 1 view -0
 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 0
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 2830 0000 38B5     		push	{r3, r4, r5, lr}
 2831              	.LCFI24:
 2832              		.cfi_def_cfa_offset 16
 2833              		.cfi_offset 3, -16
 2834              		.cfi_offset 4, -12
 2835              		.cfi_offset 5, -8
 2836              		.cfi_offset 14, -4
2176:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2837              		.loc 1 2176 5 view .LVU772
 2838              	.LVL187:
2177:ThirdParty/FreeRTOS/tasks.c **** 
 2839              		.loc 1 2177 5 view .LVU773
2181:ThirdParty/FreeRTOS/tasks.c **** 
 2840              		.loc 1 2181 5 view .LVU774
 2841 0002 4A4B     		ldr	r3, .L218
 2842 0004 1B68     		ldr	r3, [r3]
 2843 0006 43B9     		cbnz	r3, .L199
2181:ThirdParty/FreeRTOS/tasks.c **** 
 2844              		.loc 1 2181 5 discriminator 1 view .LVU775
 2845              	.LBB187:
 2846              	.LBI187:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 2847              		.loc 2 196 34 view .LVU776
 2848              	.LBB188:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 2849              		.loc 2 198 9 view .LVU777
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 2850              		.loc 2 200 9 view .LVU778
 2851              		.syntax unified
 2852              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2853 0008 4FF05003 			mov r3, #80												
 2854 000c 83F31188 		msr basepri, r3											
 2855 0010 BFF36F8F 		isb														
 2856 0014 BFF34F8F 		dsb														
 2857              	
 2858              	@ 0 "" 2
 2859              		.thumb
 2860              		.syntax unified
 2861              	.L200:
 2862              	.LBE188:
 2863              	.LBE187:
2181:ThirdParty/FreeRTOS/tasks.c **** 
 2864              		.loc 1 2181 5 discriminator 3 view .LVU779
2181:ThirdParty/FreeRTOS/tasks.c **** 
 2865              		.loc 1 2181 5 discriminator 3 view .LVU780
 2866 0018 FEE7     		b	.L200
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 162


 2867              	.L199:
2181:ThirdParty/FreeRTOS/tasks.c **** 
 2868              		.loc 1 2181 41 discriminator 2 view .LVU781
2188:ThirdParty/FreeRTOS/tasks.c ****     {
 2869              		.loc 1 2188 5 view .LVU782
 2870 001a FFF7FEFF 		bl	vPortEnterCritical
 2871              	.LVL188:
2190:ThirdParty/FreeRTOS/tasks.c **** 
 2872              		.loc 1 2190 9 view .LVU783
 2873 001e 434B     		ldr	r3, .L218
 2874 0020 1A68     		ldr	r2, [r3]
 2875 0022 013A     		subs	r2, r2, #1
 2876 0024 1A60     		str	r2, [r3]
2192:ThirdParty/FreeRTOS/tasks.c ****         {
 2877              		.loc 1 2192 9 view .LVU784
2192:ThirdParty/FreeRTOS/tasks.c ****         {
 2878              		.loc 1 2192 34 is_stmt 0 view .LVU785
 2879 0026 1B68     		ldr	r3, [r3]
2192:ThirdParty/FreeRTOS/tasks.c ****         {
 2880              		.loc 1 2192 11 view .LVU786
 2881 0028 002B     		cmp	r3, #0
 2882 002a 7AD1     		bne	.L211
2194:ThirdParty/FreeRTOS/tasks.c ****             {
 2883              		.loc 1 2194 13 is_stmt 1 view .LVU787
2194:ThirdParty/FreeRTOS/tasks.c ****             {
 2884              		.loc 1 2194 40 is_stmt 0 view .LVU788
 2885 002c 404B     		ldr	r3, .L218+4
 2886 002e 1B68     		ldr	r3, [r3]
2194:ThirdParty/FreeRTOS/tasks.c ****             {
 2887              		.loc 1 2194 15 view .LVU789
 2888 0030 3BB9     		cbnz	r3, .L212
2177:ThirdParty/FreeRTOS/tasks.c **** 
 2889              		.loc 1 2177 16 view .LVU790
 2890 0032 0024     		movs	r4, #0
 2891 0034 76E0     		b	.L201
 2892              	.LVL189:
 2893              	.L215:
 2894              	.LBB189:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2895              		.loc 1 2201 21 is_stmt 1 discriminator 1 view .LVU791
 2896 0036 196A     		ldr	r1, [r3, #32]
 2897 0038 5160     		str	r1, [r2, #4]
 2898 003a 15E0     		b	.L203
 2899              	.LVL190:
 2900              	.L216:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2901              		.loc 1 2201 21 is_stmt 0 discriminator 1 view .LVU792
 2902              	.LBE189:
 2903              	.LBB190:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2904              		.loc 1 2203 21 is_stmt 1 discriminator 1 view .LVU793
 2905 003c D968     		ldr	r1, [r3, #12]
 2906 003e 5160     		str	r1, [r2, #4]
 2907 0040 21E0     		b	.L204
 2908              	.LVL191:
 2909              	.L212:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 163


 2910              		.loc 1 2203 21 is_stmt 0 discriminator 1 view .LVU794
 2911              	.LBE190:
2176:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
 2912              		.loc 1 2176 13 view .LVU795
 2913 0042 0023     		movs	r3, #0
 2914              	.LVL192:
 2915              	.L202:
2214:ThirdParty/FreeRTOS/tasks.c ****                     }
 2916              		.loc 1 2214 49 is_stmt 1 view .LVU796
2198:ThirdParty/FreeRTOS/tasks.c ****                 {
 2917              		.loc 1 2198 64 view .LVU797
2198:ThirdParty/FreeRTOS/tasks.c ****                 {
 2918              		.loc 1 2198 24 is_stmt 0 view .LVU798
 2919 0044 3B4A     		ldr	r2, .L218+8
 2920 0046 1268     		ldr	r2, [r2]
2198:ThirdParty/FreeRTOS/tasks.c ****                 {
 2921              		.loc 1 2198 64 view .LVU799
 2922 0048 002A     		cmp	r2, #0
 2923 004a 47D0     		beq	.L214
2200:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2924              		.loc 1 2200 21 is_stmt 1 view .LVU800
2200:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2925              		.loc 1 2200 29 is_stmt 0 view .LVU801
 2926 004c 394B     		ldr	r3, .L218+8
 2927              	.LVL193:
2200:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2928              		.loc 1 2200 29 view .LVU802
 2929 004e DB68     		ldr	r3, [r3, #12]
2200:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2930              		.loc 1 2200 27 view .LVU803
 2931 0050 DB68     		ldr	r3, [r3, #12]
 2932              	.LVL194:
 2933              	.LBB191:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2934              		.loc 1 2201 21 is_stmt 1 view .LVU804
 2935 0052 9A6A     		ldr	r2, [r3, #40]
 2936              	.LVL195:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2937              		.loc 1 2201 21 view .LVU805
 2938 0054 D869     		ldr	r0, [r3, #28]
 2939 0056 196A     		ldr	r1, [r3, #32]
 2940 0058 8160     		str	r1, [r0, #8]
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2941              		.loc 1 2201 21 view .LVU806
 2942 005a D869     		ldr	r0, [r3, #28]
 2943 005c 4860     		str	r0, [r1, #4]
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2944              		.loc 1 2201 21 view .LVU807
 2945 005e 5068     		ldr	r0, [r2, #4]
 2946 0060 03F11801 		add	r1, r3, #24
 2947 0064 8842     		cmp	r0, r1
 2948 0066 E6D0     		beq	.L215
 2949              	.L203:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2950              		.loc 1 2201 21 discriminator 3 view .LVU808
 2951 0068 0021     		movs	r1, #0
 2952 006a 9962     		str	r1, [r3, #40]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 164


2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2953              		.loc 1 2201 21 discriminator 3 view .LVU809
 2954 006c 1168     		ldr	r1, [r2]
 2955 006e 0139     		subs	r1, r1, #1
 2956 0070 1160     		str	r1, [r2]
 2957              	.LBE191:
2201:ThirdParty/FreeRTOS/tasks.c ****                     portMEMORY_BARRIER();
 2958              		.loc 1 2201 66 discriminator 3 view .LVU810
2202:ThirdParty/FreeRTOS/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2959              		.loc 1 2202 21 view .LVU811
 2960              	.LBB192:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2961              		.loc 1 2203 21 view .LVU812
 2962 0072 5A69     		ldr	r2, [r3, #20]
 2963              	.LVL196:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2964              		.loc 1 2203 21 view .LVU813
 2965 0074 9868     		ldr	r0, [r3, #8]
 2966 0076 D968     		ldr	r1, [r3, #12]
 2967 0078 8160     		str	r1, [r0, #8]
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2968              		.loc 1 2203 21 view .LVU814
 2969 007a 9868     		ldr	r0, [r3, #8]
 2970 007c 4860     		str	r0, [r1, #4]
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2971              		.loc 1 2203 21 view .LVU815
 2972 007e 5168     		ldr	r1, [r2, #4]
 2973 0080 181D     		adds	r0, r3, #4
 2974 0082 8142     		cmp	r1, r0
 2975 0084 DAD0     		beq	.L216
 2976              	.L204:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2977              		.loc 1 2203 21 discriminator 3 view .LVU816
 2978 0086 0021     		movs	r1, #0
 2979 0088 5961     		str	r1, [r3, #20]
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2980              		.loc 1 2203 21 discriminator 3 view .LVU817
 2981 008a 1168     		ldr	r1, [r2]
 2982 008c 0139     		subs	r1, r1, #1
 2983 008e 1160     		str	r1, [r2]
 2984              	.LBE192:
2203:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2985              		.loc 1 2203 66 discriminator 3 view .LVU818
2204:ThirdParty/FreeRTOS/tasks.c **** 
 2986              		.loc 1 2204 21 view .LVU819
2204:ThirdParty/FreeRTOS/tasks.c **** 
 2987              		.loc 1 2204 21 view .LVU820
 2988 0090 DA6A     		ldr	r2, [r3, #44]
 2989              	.LVL197:
2204:ThirdParty/FreeRTOS/tasks.c **** 
 2990              		.loc 1 2204 21 is_stmt 0 view .LVU821
 2991 0092 0121     		movs	r1, #1
 2992 0094 9140     		lsls	r1, r1, r2
 2993 0096 284C     		ldr	r4, .L218+12
 2994 0098 2568     		ldr	r5, [r4]
 2995 009a 2943     		orrs	r1, r1, r5
 2996 009c 2160     		str	r1, [r4]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 165


 2997              	.LBB193:
2204:ThirdParty/FreeRTOS/tasks.c **** 
 2998              		.loc 1 2204 21 is_stmt 1 view .LVU822
 2999 009e 2749     		ldr	r1, .L218+16
 3000 00a0 02EB8202 		add	r2, r2, r2, lsl #2
 3001 00a4 01EB8202 		add	r2, r1, r2, lsl #2
 3002 00a8 5268     		ldr	r2, [r2, #4]
 3003              	.LVL198:
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3004              		.loc 1 2204 21 view .LVU823
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3005              		.loc 1 2204 21 view .LVU824
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3006              		.loc 1 2204 21 view .LVU825
 3007 00aa 9A60     		str	r2, [r3, #8]
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3008              		.loc 1 2204 21 view .LVU826
 3009 00ac 9468     		ldr	r4, [r2, #8]
 3010 00ae DC60     		str	r4, [r3, #12]
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3011              		.loc 1 2204 21 view .LVU827
 3012 00b0 6060     		str	r0, [r4, #4]
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3013              		.loc 1 2204 21 view .LVU828
 3014 00b2 9060     		str	r0, [r2, #8]
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3015              		.loc 1 2204 21 view .LVU829
 3016 00b4 DA6A     		ldr	r2, [r3, #44]
 3017              	.LVL199:
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3018              		.loc 1 2204 21 is_stmt 0 view .LVU830
 3019 00b6 02EB8200 		add	r0, r2, r2, lsl #2
 3020 00ba 8400     		lsls	r4, r0, #2
 3021 00bc 01EB8000 		add	r0, r1, r0, lsl #2
 3022 00c0 5861     		str	r0, [r3, #20]
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3023              		.loc 1 2204 21 is_stmt 1 view .LVU831
 3024 00c2 0859     		ldr	r0, [r1, r4]
 3025 00c4 0130     		adds	r0, r0, #1
 3026 00c6 0851     		str	r0, [r1, r4]
 3027              	.LBE193:
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3028              		.loc 1 2204 21 view .LVU832
2204:ThirdParty/FreeRTOS/tasks.c **** 
 3029              		.loc 1 2204 51 view .LVU833
2208:ThirdParty/FreeRTOS/tasks.c ****                     {
 3030              		.loc 1 2208 21 view .LVU834
2208:ThirdParty/FreeRTOS/tasks.c ****                     {
 3031              		.loc 1 2208 30 is_stmt 0 view .LVU835
 3032 00c8 D96A     		ldr	r1, [r3, #44]
2208:ThirdParty/FreeRTOS/tasks.c ****                     {
 3033              		.loc 1 2208 58 view .LVU836
 3034 00ca 1D4A     		ldr	r2, .L218+20
 3035 00cc 1268     		ldr	r2, [r2]
 3036 00ce D26A     		ldr	r2, [r2, #44]
2208:ThirdParty/FreeRTOS/tasks.c ****                     {
 3037              		.loc 1 2208 23 view .LVU837
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 166


 3038 00d0 9142     		cmp	r1, r2
 3039 00d2 B7D3     		bcc	.L202
2210:ThirdParty/FreeRTOS/tasks.c ****                     }
 3040              		.loc 1 2210 25 is_stmt 1 view .LVU838
2210:ThirdParty/FreeRTOS/tasks.c ****                     }
 3041              		.loc 1 2210 39 is_stmt 0 view .LVU839
 3042 00d4 1B4A     		ldr	r2, .L218+24
 3043 00d6 0121     		movs	r1, #1
 3044 00d8 1160     		str	r1, [r2]
 3045 00da B3E7     		b	.L202
 3046              	.LVL200:
 3047              	.L214:
2218:ThirdParty/FreeRTOS/tasks.c ****                 {
 3048              		.loc 1 2218 17 is_stmt 1 view .LVU840
2218:ThirdParty/FreeRTOS/tasks.c ****                 {
 3049              		.loc 1 2218 19 is_stmt 0 view .LVU841
 3050 00dc 0BB1     		cbz	r3, .L207
2226:ThirdParty/FreeRTOS/tasks.c ****                 }
 3051              		.loc 1 2226 21 is_stmt 1 view .LVU842
 3052 00de FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3053              	.LVL201:
 3054              	.L207:
 3055              	.LBB194:
2234:ThirdParty/FreeRTOS/tasks.c **** 
 3056              		.loc 1 2234 21 view .LVU843
2234:ThirdParty/FreeRTOS/tasks.c **** 
 3057              		.loc 1 2234 32 is_stmt 0 view .LVU844
 3058 00e2 194B     		ldr	r3, .L218+28
 3059 00e4 1C68     		ldr	r4, [r3]
 3060              	.LVL202:
2236:ThirdParty/FreeRTOS/tasks.c ****                     {
 3061              		.loc 1 2236 21 is_stmt 1 view .LVU845
2236:ThirdParty/FreeRTOS/tasks.c ****                     {
 3062              		.loc 1 2236 23 is_stmt 0 view .LVU846
 3063 00e6 84B9     		cbnz	r4, .L210
 3064              	.L208:
2256:ThirdParty/FreeRTOS/tasks.c ****                     }
 3065              		.loc 1 2256 49 is_stmt 1 view .LVU847
 3066              	.LBE194:
2260:ThirdParty/FreeRTOS/tasks.c ****                 {
 3067              		.loc 1 2260 17 view .LVU848
2260:ThirdParty/FreeRTOS/tasks.c ****                 {
 3068              		.loc 1 2260 35 is_stmt 0 view .LVU849
 3069 00e8 164B     		ldr	r3, .L218+24
 3070 00ea 1C68     		ldr	r4, [r3]
 3071              	.LVL203:
2260:ThirdParty/FreeRTOS/tasks.c ****                 {
 3072              		.loc 1 2260 19 view .LVU850
 3073 00ec D4B1     		cbz	r4, .L201
2264:ThirdParty/FreeRTOS/tasks.c ****                     }
 3074              		.loc 1 2264 25 is_stmt 1 view .LVU851
 3075              	.LVL204:
2267:ThirdParty/FreeRTOS/tasks.c ****                 }
 3076              		.loc 1 2267 21 view .LVU852
 3077 00ee 4FF0E023 		mov	r3, #-536813568
 3078 00f2 4FF08052 		mov	r2, #268435456
 3079 00f6 C3F8042D 		str	r2, [r3, #3332]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 167


2267:ThirdParty/FreeRTOS/tasks.c ****                 }
 3080              		.loc 1 2267 21 view .LVU853
 3081              		.syntax unified
 3082              	@ 2267 "ThirdParty/FreeRTOS/tasks.c" 1
 3083 00fa BFF34F8F 		dsb
 3084              	@ 0 "" 2
2267:ThirdParty/FreeRTOS/tasks.c ****                 }
 3085              		.loc 1 2267 21 view .LVU854
 3086              	@ 2267 "ThirdParty/FreeRTOS/tasks.c" 1
 3087 00fe BFF36F8F 		isb
 3088              	@ 0 "" 2
2267:ThirdParty/FreeRTOS/tasks.c ****                 }
 3089              		.loc 1 2267 52 view .LVU855
2264:ThirdParty/FreeRTOS/tasks.c ****                     }
 3090              		.loc 1 2264 41 is_stmt 0 view .LVU856
 3091              		.thumb
 3092              		.syntax unified
 3093 0102 0124     		movs	r4, #1
 3094 0104 0EE0     		b	.L201
 3095              	.LVL205:
 3096              	.L209:
 3097              	.LBB195:
2246:ThirdParty/FreeRTOS/tasks.c ****                             }
 3098              		.loc 1 2246 57 is_stmt 1 view .LVU857
2249:ThirdParty/FreeRTOS/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3099              		.loc 1 2249 29 view .LVU858
2250:ThirdParty/FreeRTOS/tasks.c **** 
 3100              		.loc 1 2250 48 view .LVU859
 3101 0106 013C     		subs	r4, r4, #1
 3102              	.LVL206:
2250:ThirdParty/FreeRTOS/tasks.c **** 
 3103              		.loc 1 2250 48 is_stmt 0 view .LVU860
 3104 0108 07D0     		beq	.L217
 3105              	.L210:
2238:ThirdParty/FreeRTOS/tasks.c ****                         {
 3106              		.loc 1 2238 25 is_stmt 1 view .LVU861
2240:ThirdParty/FreeRTOS/tasks.c ****                             {
 3107              		.loc 1 2240 29 view .LVU862
2240:ThirdParty/FreeRTOS/tasks.c ****                             {
 3108              		.loc 1 2240 33 is_stmt 0 view .LVU863
 3109 010a FFF7FEFF 		bl	xTaskIncrementTick
 3110              	.LVL207:
2240:ThirdParty/FreeRTOS/tasks.c ****                             {
 3111              		.loc 1 2240 31 discriminator 1 view .LVU864
 3112 010e 0028     		cmp	r0, #0
 3113 0110 F9D0     		beq	.L209
2242:ThirdParty/FreeRTOS/tasks.c ****                             }
 3114              		.loc 1 2242 33 is_stmt 1 view .LVU865
2242:ThirdParty/FreeRTOS/tasks.c ****                             }
 3115              		.loc 1 2242 47 is_stmt 0 view .LVU866
 3116 0112 0C4B     		ldr	r3, .L218+24
 3117 0114 0122     		movs	r2, #1
 3118 0116 1A60     		str	r2, [r3]
 3119 0118 F5E7     		b	.L209
 3120              	.L217:
2252:ThirdParty/FreeRTOS/tasks.c ****                     }
 3121              		.loc 1 2252 25 is_stmt 1 view .LVU867
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 168


2252:ThirdParty/FreeRTOS/tasks.c ****                     }
 3122              		.loc 1 2252 38 is_stmt 0 view .LVU868
 3123 011a 0B4B     		ldr	r3, .L218+28
 3124 011c 0022     		movs	r2, #0
 3125 011e 1A60     		str	r2, [r3]
 3126 0120 E2E7     		b	.L208
 3127              	.LVL208:
 3128              	.L211:
2252:ThirdParty/FreeRTOS/tasks.c ****                     }
 3129              		.loc 1 2252 38 view .LVU869
 3130              	.LBE195:
2177:ThirdParty/FreeRTOS/tasks.c **** 
 3131              		.loc 1 2177 16 view .LVU870
 3132 0122 0024     		movs	r4, #0
 3133              	.LVL209:
 3134              	.L201:
2277:ThirdParty/FreeRTOS/tasks.c ****         }
 3135              		.loc 1 2277 37 is_stmt 1 view .LVU871
2280:ThirdParty/FreeRTOS/tasks.c **** 
 3136              		.loc 1 2280 5 view .LVU872
 3137 0124 FFF7FEFF 		bl	vPortExitCritical
 3138              	.LVL210:
2282:ThirdParty/FreeRTOS/tasks.c **** }
 3139              		.loc 1 2282 5 view .LVU873
2283:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3140              		.loc 1 2283 1 is_stmt 0 view .LVU874
 3141 0128 2046     		mov	r0, r4
 3142 012a 38BD     		pop	{r3, r4, r5, pc}
 3143              	.LVL211:
 3144              	.L219:
2283:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3145              		.loc 1 2283 1 view .LVU875
 3146              		.align	2
 3147              	.L218:
 3148 012c 00000000 		.word	uxSchedulerSuspended
 3149 0130 00000000 		.word	uxCurrentNumberOfTasks
 3150 0134 00000000 		.word	xPendingReadyList
 3151 0138 00000000 		.word	uxTopReadyPriority
 3152 013c 00000000 		.word	pxReadyTasksLists
 3153 0140 00000000 		.word	pxCurrentTCB
 3154 0144 00000000 		.word	xYieldPending
 3155 0148 00000000 		.word	xPendedTicks
 3156              		.cfi_endproc
 3157              	.LFE21:
 3159              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3160              		.align	1
 3161              		.global	xTaskDelayUntil
 3162              		.syntax unified
 3163              		.thumb
 3164              		.thumb_func
 3166              	xTaskDelayUntil:
 3167              	.LVL212:
 3168              	.LFB9:
1216:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 3169              		.loc 1 1216 5 is_stmt 1 view -0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 169


 3172              		@ frame_needed = 0, uses_anonymous_args = 0
1216:ThirdParty/FreeRTOS/tasks.c ****         TickType_t xTimeToWake;
 3173              		.loc 1 1216 5 is_stmt 0 view .LVU877
 3174 0000 38B5     		push	{r3, r4, r5, lr}
 3175              	.LCFI25:
 3176              		.cfi_def_cfa_offset 16
 3177              		.cfi_offset 3, -16
 3178              		.cfi_offset 4, -12
 3179              		.cfi_offset 5, -8
 3180              		.cfi_offset 14, -4
1217:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3181              		.loc 1 1217 9 is_stmt 1 view .LVU878
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3182              		.loc 1 1218 9 view .LVU879
 3183              	.LVL213:
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3184              		.loc 1 1220 9 view .LVU880
 3185 0002 58B1     		cbz	r0, .L236
 3186 0004 0C46     		mov	r4, r1
 3187 0006 0546     		mov	r5, r0
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3188              		.loc 1 1220 43 discriminator 2 view .LVU881
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3189              		.loc 1 1221 9 view .LVU882
 3190 0008 89B9     		cbnz	r1, .L223
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3191              		.loc 1 1221 9 discriminator 1 view .LVU883
 3192              	.LBB196:
 3193              	.LBI196:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3194              		.loc 2 196 34 view .LVU884
 3195              	.LBB197:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3196              		.loc 2 198 9 view .LVU885
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3197              		.loc 2 200 9 view .LVU886
 3198              		.syntax unified
 3199              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3200 000a 4FF05003 			mov r3, #80												
 3201 000e 83F31188 		msr basepri, r3											
 3202 0012 BFF36F8F 		isb														
 3203 0016 BFF34F8F 		dsb														
 3204              	
 3205              	@ 0 "" 2
 3206              		.thumb
 3207              		.syntax unified
 3208              	.L224:
 3209              	.LBE197:
 3210              	.LBE196:
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3211              		.loc 1 1221 9 discriminator 3 view .LVU887
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3212              		.loc 1 1221 9 discriminator 3 view .LVU888
 3213 001a FEE7     		b	.L224
 3214              	.L236:
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3215              		.loc 1 1220 9 discriminator 1 view .LVU889
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 170


 3216              	.LBB198:
 3217              	.LBI198:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3218              		.loc 2 196 34 view .LVU890
 3219              	.LBB199:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3220              		.loc 2 198 9 view .LVU891
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3221              		.loc 2 200 9 view .LVU892
 3222              		.syntax unified
 3223              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3224 001c 4FF05003 			mov r3, #80												
 3225 0020 83F31188 		msr basepri, r3											
 3226 0024 BFF36F8F 		isb														
 3227 0028 BFF34F8F 		dsb														
 3228              	
 3229              	@ 0 "" 2
 3230              		.thumb
 3231              		.syntax unified
 3232              	.L222:
 3233              	.LBE199:
 3234              	.LBE198:
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3235              		.loc 1 1220 9 discriminator 3 view .LVU893
1220:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
 3236              		.loc 1 1220 9 discriminator 3 view .LVU894
 3237 002c FEE7     		b	.L222
 3238              	.L223:
1221:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxSchedulerSuspended == 0 );
 3239              		.loc 1 1221 48 discriminator 2 view .LVU895
1222:ThirdParty/FreeRTOS/tasks.c **** 
 3240              		.loc 1 1222 9 view .LVU896
 3241 002e 1E4B     		ldr	r3, .L237
 3242 0030 1B68     		ldr	r3, [r3]
 3243 0032 43B1     		cbz	r3, .L225
1222:ThirdParty/FreeRTOS/tasks.c **** 
 3244              		.loc 1 1222 9 discriminator 1 view .LVU897
 3245              	.LBB200:
 3246              	.LBI200:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3247              		.loc 2 196 34 view .LVU898
 3248              	.LBB201:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3249              		.loc 2 198 9 view .LVU899
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3250              		.loc 2 200 9 view .LVU900
 3251              		.syntax unified
 3252              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3253 0034 4FF05003 			mov r3, #80												
 3254 0038 83F31188 		msr basepri, r3											
 3255 003c BFF36F8F 		isb														
 3256 0040 BFF34F8F 		dsb														
 3257              	
 3258              	@ 0 "" 2
 3259              		.thumb
 3260              		.syntax unified
 3261              	.L226:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 171


 3262              	.LBE201:
 3263              	.LBE200:
1222:ThirdParty/FreeRTOS/tasks.c **** 
 3264              		.loc 1 1222 9 discriminator 3 view .LVU901
1222:ThirdParty/FreeRTOS/tasks.c **** 
 3265              		.loc 1 1222 9 discriminator 3 view .LVU902
 3266 0044 FEE7     		b	.L226
 3267              	.L225:
1222:ThirdParty/FreeRTOS/tasks.c **** 
 3268              		.loc 1 1222 50 discriminator 2 view .LVU903
1224:ThirdParty/FreeRTOS/tasks.c ****         {
 3269              		.loc 1 1224 9 view .LVU904
 3270 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3271              	.LVL214:
 3272              	.LBB202:
1228:ThirdParty/FreeRTOS/tasks.c **** 
 3273              		.loc 1 1228 13 view .LVU905
1228:ThirdParty/FreeRTOS/tasks.c **** 
 3274              		.loc 1 1228 30 is_stmt 0 view .LVU906
 3275 004a 184B     		ldr	r3, .L237+4
 3276 004c 1868     		ldr	r0, [r3]
 3277              	.LVL215:
1231:ThirdParty/FreeRTOS/tasks.c **** 
 3278              		.loc 1 1231 13 is_stmt 1 view .LVU907
1231:ThirdParty/FreeRTOS/tasks.c **** 
 3279              		.loc 1 1231 27 is_stmt 0 view .LVU908
 3280 004e 2B68     		ldr	r3, [r5]
1231:ThirdParty/FreeRTOS/tasks.c **** 
 3281              		.loc 1 1231 25 view .LVU909
 3282 0050 1C44     		add	r4, r4, r3
 3283              	.LVL216:
1233:ThirdParty/FreeRTOS/tasks.c ****             {
 3284              		.loc 1 1233 13 is_stmt 1 view .LVU910
1233:ThirdParty/FreeRTOS/tasks.c ****             {
 3285              		.loc 1 1233 15 is_stmt 0 view .LVU911
 3286 0052 8342     		cmp	r3, r0
 3287 0054 0BD9     		bls	.L227
1240:ThirdParty/FreeRTOS/tasks.c ****                 {
 3288              		.loc 1 1240 17 is_stmt 1 view .LVU912
1240:ThirdParty/FreeRTOS/tasks.c ****                 {
 3289              		.loc 1 1240 19 is_stmt 0 view .LVU913
 3290 0056 A342     		cmp	r3, r4
 3291 0058 02D8     		bhi	.L228
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3292              		.loc 1 1265 13 is_stmt 1 view .LVU914
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3293              		.loc 1 1265 33 is_stmt 0 view .LVU915
 3294 005a 2C60     		str	r4, [r5]
1267:ThirdParty/FreeRTOS/tasks.c ****             {
 3295              		.loc 1 1267 13 is_stmt 1 view .LVU916
 3296              	.LBE202:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3297              		.loc 1 1218 37 is_stmt 0 view .LVU917
 3298 005c 0024     		movs	r4, #0
 3299              	.LVL217:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3300              		.loc 1 1218 37 view .LVU918
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 172


 3301 005e 10E0     		b	.L229
 3302              	.LVL218:
 3303              	.L228:
 3304              	.LBB203:
1240:ThirdParty/FreeRTOS/tasks.c ****                 {
 3305              		.loc 1 1240 59 discriminator 1 view .LVU919
 3306 0060 A042     		cmp	r0, r4
 3307 0062 02D3     		bcc	.L230
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3308              		.loc 1 1265 13 is_stmt 1 view .LVU920
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3309              		.loc 1 1265 33 is_stmt 0 view .LVU921
 3310 0064 2C60     		str	r4, [r5]
1267:ThirdParty/FreeRTOS/tasks.c ****             {
 3311              		.loc 1 1267 13 is_stmt 1 view .LVU922
 3312              	.LBE203:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3313              		.loc 1 1218 37 is_stmt 0 view .LVU923
 3314 0066 0024     		movs	r4, #0
 3315              	.LVL219:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3316              		.loc 1 1218 37 view .LVU924
 3317 0068 0BE0     		b	.L229
 3318              	.LVL220:
 3319              	.L230:
 3320              	.LBB204:
1242:ThirdParty/FreeRTOS/tasks.c ****                 }
 3321              		.loc 1 1242 21 is_stmt 1 view .LVU925
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3322              		.loc 1 1265 13 view .LVU926
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3323              		.loc 1 1265 33 is_stmt 0 view .LVU927
 3324 006a 2C60     		str	r4, [r5]
1267:ThirdParty/FreeRTOS/tasks.c ****             {
 3325              		.loc 1 1267 13 is_stmt 1 view .LVU928
 3326 006c 04E0     		b	.L231
 3327              	.LVL221:
 3328              	.L227:
1254:ThirdParty/FreeRTOS/tasks.c ****                 {
 3329              		.loc 1 1254 17 view .LVU929
1254:ThirdParty/FreeRTOS/tasks.c ****                 {
 3330              		.loc 1 1254 19 is_stmt 0 view .LVU930
 3331 006e A342     		cmp	r3, r4
 3332 0070 01D8     		bhi	.L232
1254:ThirdParty/FreeRTOS/tasks.c ****                 {
 3333              		.loc 1 1254 59 discriminator 1 view .LVU931
 3334 0072 A042     		cmp	r0, r4
 3335 0074 14D2     		bcs	.L233
 3336              	.L232:
1256:ThirdParty/FreeRTOS/tasks.c ****                 }
 3337              		.loc 1 1256 21 is_stmt 1 view .LVU932
 3338              	.LVL222:
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3339              		.loc 1 1265 13 view .LVU933
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3340              		.loc 1 1265 33 is_stmt 0 view .LVU934
 3341 0076 2C60     		str	r4, [r5]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 173


1267:ThirdParty/FreeRTOS/tasks.c ****             {
 3342              		.loc 1 1267 13 is_stmt 1 view .LVU935
 3343              	.L231:
1269:ThirdParty/FreeRTOS/tasks.c **** 
 3344              		.loc 1 1269 53 view .LVU936
1273:ThirdParty/FreeRTOS/tasks.c ****             }
 3345              		.loc 1 1273 17 view .LVU937
 3346 0078 0021     		movs	r1, #0
 3347 007a 201A     		subs	r0, r4, r0
 3348              	.LVL223:
1273:ThirdParty/FreeRTOS/tasks.c ****             }
 3349              		.loc 1 1273 17 is_stmt 0 view .LVU938
 3350 007c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3351              	.LVL224:
 3352 0080 0124     		movs	r4, #1
 3353              	.LVL225:
 3354              	.L229:
1277:ThirdParty/FreeRTOS/tasks.c ****             }
 3355              		.loc 1 1277 41 is_stmt 1 view .LVU939
 3356              	.LBE204:
1280:ThirdParty/FreeRTOS/tasks.c **** 
 3357              		.loc 1 1280 9 view .LVU940
1280:ThirdParty/FreeRTOS/tasks.c **** 
 3358              		.loc 1 1280 27 is_stmt 0 view .LVU941
 3359 0082 FFF7FEFF 		bl	xTaskResumeAll
 3360              	.LVL226:
1284:ThirdParty/FreeRTOS/tasks.c ****         {
 3361              		.loc 1 1284 9 is_stmt 1 view .LVU942
1284:ThirdParty/FreeRTOS/tasks.c ****         {
 3362              		.loc 1 1284 11 is_stmt 0 view .LVU943
 3363 0086 48B9     		cbnz	r0, .L220
1286:ThirdParty/FreeRTOS/tasks.c ****         }
 3364              		.loc 1 1286 13 is_stmt 1 view .LVU944
 3365 0088 4FF0E023 		mov	r3, #-536813568
 3366 008c 4FF08052 		mov	r2, #268435456
 3367 0090 C3F8042D 		str	r2, [r3, #3332]
1286:ThirdParty/FreeRTOS/tasks.c ****         }
 3368              		.loc 1 1286 13 view .LVU945
 3369              		.syntax unified
 3370              	@ 1286 "ThirdParty/FreeRTOS/tasks.c" 1
 3371 0094 BFF34F8F 		dsb
 3372              	@ 0 "" 2
1286:ThirdParty/FreeRTOS/tasks.c ****         }
 3373              		.loc 1 1286 13 view .LVU946
 3374              	@ 1286 "ThirdParty/FreeRTOS/tasks.c" 1
 3375 0098 BFF36F8F 		isb
 3376              	@ 0 "" 2
1286:ThirdParty/FreeRTOS/tasks.c ****         }
 3377              		.loc 1 1286 35 view .LVU947
1290:ThirdParty/FreeRTOS/tasks.c ****         }
 3378              		.loc 1 1290 37 view .LVU948
1293:ThirdParty/FreeRTOS/tasks.c ****     }
 3379              		.loc 1 1293 9 view .LVU949
 3380              		.thumb
 3381              		.syntax unified
 3382              	.L220:
1294:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 174


 3383              		.loc 1 1294 5 is_stmt 0 view .LVU950
 3384 009c 2046     		mov	r0, r4
 3385              	.LVL227:
1294:ThirdParty/FreeRTOS/tasks.c **** 
 3386              		.loc 1 1294 5 view .LVU951
 3387 009e 38BD     		pop	{r3, r4, r5, pc}
 3388              	.LVL228:
 3389              	.L233:
 3390              	.LBB205:
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3391              		.loc 1 1265 13 is_stmt 1 view .LVU952
1265:ThirdParty/FreeRTOS/tasks.c **** 
 3392              		.loc 1 1265 33 is_stmt 0 view .LVU953
 3393 00a0 2C60     		str	r4, [r5]
1267:ThirdParty/FreeRTOS/tasks.c ****             {
 3394              		.loc 1 1267 13 is_stmt 1 view .LVU954
 3395              	.LBE205:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3396              		.loc 1 1218 37 is_stmt 0 view .LVU955
 3397 00a2 0024     		movs	r4, #0
 3398              	.LVL229:
1218:ThirdParty/FreeRTOS/tasks.c **** 
 3399              		.loc 1 1218 37 view .LVU956
 3400 00a4 EDE7     		b	.L229
 3401              	.L238:
 3402 00a6 00BF     		.align	2
 3403              	.L237:
 3404 00a8 00000000 		.word	uxSchedulerSuspended
 3405 00ac 00000000 		.word	xTickCount
 3406              		.cfi_endproc
 3407              	.LFE9:
 3409              		.section	.text.vTaskDelay,"ax",%progbits
 3410              		.align	1
 3411              		.global	vTaskDelay
 3412              		.syntax unified
 3413              		.thumb
 3414              		.thumb_func
 3416              	vTaskDelay:
 3417              	.LVL230:
 3418              	.LFB10:
1302:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3419              		.loc 1 1302 5 is_stmt 1 view -0
 3420              		.cfi_startproc
 3421              		@ args = 0, pretend = 0, frame = 0
 3422              		@ frame_needed = 0, uses_anonymous_args = 0
1302:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 3423              		.loc 1 1302 5 is_stmt 0 view .LVU958
 3424 0000 10B5     		push	{r4, lr}
 3425              	.LCFI26:
 3426              		.cfi_def_cfa_offset 8
 3427              		.cfi_offset 4, -8
 3428              		.cfi_offset 14, -4
1303:ThirdParty/FreeRTOS/tasks.c **** 
 3429              		.loc 1 1303 9 is_stmt 1 view .LVU959
 3430              	.LVL231:
1306:ThirdParty/FreeRTOS/tasks.c ****         {
 3431              		.loc 1 1306 9 view .LVU960
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 175


1306:ThirdParty/FreeRTOS/tasks.c ****         {
 3432              		.loc 1 1306 11 is_stmt 0 view .LVU961
 3433 0002 A8B1     		cbz	r0, .L240
 3434 0004 0446     		mov	r4, r0
1308:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3435              		.loc 1 1308 13 is_stmt 1 view .LVU962
 3436 0006 104B     		ldr	r3, .L245
 3437 0008 1B68     		ldr	r3, [r3]
 3438 000a 43B1     		cbz	r3, .L241
1308:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3439              		.loc 1 1308 13 discriminator 1 view .LVU963
 3440              	.LBB206:
 3441              	.LBI206:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3442              		.loc 2 196 34 view .LVU964
 3443              	.LBB207:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3444              		.loc 2 198 9 view .LVU965
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3445              		.loc 2 200 9 view .LVU966
 3446              		.syntax unified
 3447              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3448 000c 4FF05003 			mov r3, #80												
 3449 0010 83F31188 		msr basepri, r3											
 3450 0014 BFF36F8F 		isb														
 3451 0018 BFF34F8F 		dsb														
 3452              	
 3453              	@ 0 "" 2
 3454              		.thumb
 3455              		.syntax unified
 3456              	.L242:
 3457              	.LBE207:
 3458              	.LBE206:
1308:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3459              		.loc 1 1308 13 discriminator 3 view .LVU967
1308:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3460              		.loc 1 1308 13 discriminator 3 view .LVU968
 3461 001c FEE7     		b	.L242
 3462              	.L241:
1308:ThirdParty/FreeRTOS/tasks.c ****             vTaskSuspendAll();
 3463              		.loc 1 1308 54 discriminator 2 view .LVU969
1309:ThirdParty/FreeRTOS/tasks.c ****             {
 3464              		.loc 1 1309 13 view .LVU970
 3465 001e FFF7FEFF 		bl	vTaskSuspendAll
 3466              	.LVL232:
1311:ThirdParty/FreeRTOS/tasks.c **** 
 3467              		.loc 1 1311 34 view .LVU971
1320:ThirdParty/FreeRTOS/tasks.c ****             }
 3468              		.loc 1 1320 17 view .LVU972
 3469 0022 0021     		movs	r1, #0
 3470 0024 2046     		mov	r0, r4
 3471 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3472              	.LVL233:
1322:ThirdParty/FreeRTOS/tasks.c ****         }
 3473              		.loc 1 1322 13 view .LVU973
1322:ThirdParty/FreeRTOS/tasks.c ****         }
 3474              		.loc 1 1322 31 is_stmt 0 view .LVU974
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 176


 3475 002a FFF7FEFF 		bl	xTaskResumeAll
 3476              	.LVL234:
1326:ThirdParty/FreeRTOS/tasks.c ****         }
 3477              		.loc 1 1326 37 is_stmt 1 view .LVU975
1331:ThirdParty/FreeRTOS/tasks.c ****         {
 3478              		.loc 1 1331 9 view .LVU976
1331:ThirdParty/FreeRTOS/tasks.c ****         {
 3479              		.loc 1 1331 11 is_stmt 0 view .LVU977
 3480 002e 48B9     		cbnz	r0, .L239
 3481              	.LVL235:
 3482              	.L240:
1333:ThirdParty/FreeRTOS/tasks.c ****         }
 3483              		.loc 1 1333 13 is_stmt 1 view .LVU978
 3484 0030 4FF0E023 		mov	r3, #-536813568
 3485 0034 4FF08052 		mov	r2, #268435456
 3486 0038 C3F8042D 		str	r2, [r3, #3332]
1333:ThirdParty/FreeRTOS/tasks.c ****         }
 3487              		.loc 1 1333 13 view .LVU979
 3488              		.syntax unified
 3489              	@ 1333 "ThirdParty/FreeRTOS/tasks.c" 1
 3490 003c BFF34F8F 		dsb
 3491              	@ 0 "" 2
1333:ThirdParty/FreeRTOS/tasks.c ****         }
 3492              		.loc 1 1333 13 view .LVU980
 3493              	@ 1333 "ThirdParty/FreeRTOS/tasks.c" 1
 3494 0040 BFF36F8F 		isb
 3495              	@ 0 "" 2
1333:ThirdParty/FreeRTOS/tasks.c ****         }
 3496              		.loc 1 1333 35 view .LVU981
1337:ThirdParty/FreeRTOS/tasks.c ****         }
 3497              		.loc 1 1337 37 view .LVU982
 3498              		.thumb
 3499              		.syntax unified
 3500              	.L239:
1339:ThirdParty/FreeRTOS/tasks.c **** 
 3501              		.loc 1 1339 5 is_stmt 0 view .LVU983
 3502 0044 10BD     		pop	{r4, pc}
 3503              	.L246:
 3504 0046 00BF     		.align	2
 3505              	.L245:
 3506 0048 00000000 		.word	uxSchedulerSuspended
 3507              		.cfi_endproc
 3508              	.LFE10:
 3510              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3511              		.align	1
 3512              		.global	xTaskCatchUpTicks
 3513              		.syntax unified
 3514              		.thumb
 3515              		.thumb_func
 3517              	xTaskCatchUpTicks:
 3518              	.LVL236:
 3519              	.LFB26:
2617:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3520              		.loc 1 2617 1 is_stmt 1 view -0
 3521              		.cfi_startproc
 3522              		@ args = 0, pretend = 0, frame = 0
 3523              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 177


2618:ThirdParty/FreeRTOS/tasks.c **** 
 3524              		.loc 1 2618 5 view .LVU985
2622:ThirdParty/FreeRTOS/tasks.c **** 
 3525              		.loc 1 2622 5 view .LVU986
 3526 0000 0D4B     		ldr	r3, .L252
 3527 0002 1B68     		ldr	r3, [r3]
 3528 0004 43B1     		cbz	r3, .L248
2622:ThirdParty/FreeRTOS/tasks.c **** 
 3529              		.loc 1 2622 5 discriminator 1 view .LVU987
 3530              	.LBB208:
 3531              	.LBI208:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3532              		.loc 2 196 34 view .LVU988
 3533              	.LBB209:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3534              		.loc 2 198 9 view .LVU989
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3535              		.loc 2 200 9 view .LVU990
 3536              		.syntax unified
 3537              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3538 0006 4FF05003 			mov r3, #80												
 3539 000a 83F31188 		msr basepri, r3											
 3540 000e BFF36F8F 		isb														
 3541 0012 BFF34F8F 		dsb														
 3542              	
 3543              	@ 0 "" 2
 3544              		.thumb
 3545              		.syntax unified
 3546              	.L249:
 3547              	.LBE209:
 3548              	.LBE208:
2622:ThirdParty/FreeRTOS/tasks.c **** 
 3549              		.loc 1 2622 5 discriminator 3 view .LVU991
2622:ThirdParty/FreeRTOS/tasks.c **** 
 3550              		.loc 1 2622 5 discriminator 3 view .LVU992
 3551 0016 FEE7     		b	.L249
 3552              	.L248:
2617:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xYieldOccurred;
 3553              		.loc 1 2617 1 is_stmt 0 view .LVU993
 3554 0018 10B5     		push	{r4, lr}
 3555              	.LCFI27:
 3556              		.cfi_def_cfa_offset 8
 3557              		.cfi_offset 4, -8
 3558              		.cfi_offset 14, -4
 3559 001a 0446     		mov	r4, r0
2622:ThirdParty/FreeRTOS/tasks.c **** 
 3560              		.loc 1 2622 46 is_stmt 1 discriminator 2 view .LVU994
2626:ThirdParty/FreeRTOS/tasks.c **** 
 3561              		.loc 1 2626 5 view .LVU995
 3562 001c FFF7FEFF 		bl	vTaskSuspendAll
 3563              	.LVL237:
2629:ThirdParty/FreeRTOS/tasks.c ****     {
 3564              		.loc 1 2629 5 view .LVU996
 3565 0020 FFF7FEFF 		bl	vPortEnterCritical
 3566              	.LVL238:
2631:ThirdParty/FreeRTOS/tasks.c ****     }
 3567              		.loc 1 2631 9 view .LVU997
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 178


2631:ThirdParty/FreeRTOS/tasks.c ****     }
 3568              		.loc 1 2631 22 is_stmt 0 view .LVU998
 3569 0024 054A     		ldr	r2, .L252+4
 3570 0026 1368     		ldr	r3, [r2]
 3571 0028 2344     		add	r3, r3, r4
 3572 002a 1360     		str	r3, [r2]
2633:ThirdParty/FreeRTOS/tasks.c ****     xYieldOccurred = xTaskResumeAll();
 3573              		.loc 1 2633 5 is_stmt 1 view .LVU999
 3574 002c FFF7FEFF 		bl	vPortExitCritical
 3575              	.LVL239:
2634:ThirdParty/FreeRTOS/tasks.c **** 
 3576              		.loc 1 2634 5 view .LVU1000
2634:ThirdParty/FreeRTOS/tasks.c **** 
 3577              		.loc 1 2634 22 is_stmt 0 view .LVU1001
 3578 0030 FFF7FEFF 		bl	xTaskResumeAll
 3579              	.LVL240:
2636:ThirdParty/FreeRTOS/tasks.c **** }
 3580              		.loc 1 2636 5 is_stmt 1 view .LVU1002
2637:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3581              		.loc 1 2637 1 is_stmt 0 view .LVU1003
 3582 0034 10BD     		pop	{r4, pc}
 3583              	.LVL241:
 3584              	.L253:
2637:ThirdParty/FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 3585              		.loc 1 2637 1 view .LVU1004
 3586 0036 00BF     		.align	2
 3587              	.L252:
 3588 0038 00000000 		.word	uxSchedulerSuspended
 3589 003c 00000000 		.word	xPendedTicks
 3590              		.cfi_endproc
 3591              	.LFE26:
 3593              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3594              		.align	1
 3595              		.global	vTaskSwitchContext
 3596              		.syntax unified
 3597              		.thumb
 3598              		.thumb_func
 3600              	vTaskSwitchContext:
 3601              	.LFB28:
3010:ThirdParty/FreeRTOS/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3602              		.loc 1 3010 1 is_stmt 1 view -0
 3603              		.cfi_startproc
 3604              		@ args = 0, pretend = 0, frame = 0
 3605              		@ frame_needed = 0, uses_anonymous_args = 0
 3606              		@ link register save eliminated.
3011:ThirdParty/FreeRTOS/tasks.c ****     {
 3607              		.loc 1 3011 5 view .LVU1006
3011:ThirdParty/FreeRTOS/tasks.c ****     {
 3608              		.loc 1 3011 30 is_stmt 0 view .LVU1007
 3609 0000 204B     		ldr	r3, .L261
 3610 0002 1B68     		ldr	r3, [r3]
3011:ThirdParty/FreeRTOS/tasks.c ****     {
 3611              		.loc 1 3011 7 view .LVU1008
 3612 0004 1BB1     		cbz	r3, .L255
3015:ThirdParty/FreeRTOS/tasks.c ****     }
 3613              		.loc 1 3015 9 is_stmt 1 view .LVU1009
3015:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 179


 3614              		.loc 1 3015 23 is_stmt 0 view .LVU1010
 3615 0006 204B     		ldr	r3, .L261+4
 3616 0008 0122     		movs	r2, #1
 3617 000a 1A60     		str	r2, [r3]
 3618 000c 7047     		bx	lr
 3619              	.L255:
3019:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3620              		.loc 1 3019 9 is_stmt 1 view .LVU1011
3019:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_OUT();
 3621              		.loc 1 3019 23 is_stmt 0 view .LVU1012
 3622 000e 1E4B     		ldr	r3, .L261+4
 3623 0010 0022     		movs	r2, #0
 3624 0012 1A60     		str	r2, [r3]
3020:ThirdParty/FreeRTOS/tasks.c **** 
 3625              		.loc 1 3020 33 is_stmt 1 view .LVU1013
3051:ThirdParty/FreeRTOS/tasks.c **** 
 3626              		.loc 1 3051 39 view .LVU1014
 3627              	.LBB210:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3628              		.loc 1 3062 9 view .LVU1015
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3629              		.loc 1 3062 9 view .LVU1016
 3630 0014 1D4B     		ldr	r3, .L261+8
 3631 0016 1B68     		ldr	r3, [r3]
 3632              	.LVL242:
 3633              	.LBB211:
 3634              	.LBI211:
 132:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         {
 3635              		.loc 2 132 66 view .LVU1017
 3636              	.LBB212:
 134:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3637              		.loc 2 134 13 view .LVU1018
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3638              		.loc 2 136 13 view .LVU1019
 3639              		.syntax unified
 3640              	@ 136 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3641 0018 B3FA83F3 		clz r3, r3
 3642              	@ 0 "" 2
 3643              	.LVL243:
 136:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3644              		.loc 2 136 13 is_stmt 0 view .LVU1020
 3645              		.thumb
 3646              		.syntax unified
 3647 001c DBB2     		uxtb	r3, r3
 3648              	.LVL244:
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 3649              		.loc 2 138 13 is_stmt 1 view .LVU1021
 138:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         }
 3650              		.loc 2 138 13 is_stmt 0 view .LVU1022
 3651              	.LBE212:
 3652              	.LBE211:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3653              		.loc 1 3062 9 discriminator 1 view .LVU1023
 3654 001e C3F11F03 		rsb	r3, r3, #31
 3655              	.LVL245:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3656              		.loc 1 3062 9 is_stmt 1 discriminator 1 view .LVU1024
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 180


 3657 0022 03EB8301 		add	r1, r3, r3, lsl #2
 3658 0026 8A00     		lsls	r2, r1, #2
 3659 0028 1949     		ldr	r1, .L261+12
 3660 002a 8A58     		ldr	r2, [r1, r2]
 3661 002c 42B9     		cbnz	r2, .L257
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3662              		.loc 1 3062 9 discriminator 1 view .LVU1025
 3663              	.LBB213:
 3664              	.LBI213:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3665              		.loc 2 196 34 view .LVU1026
 3666              	.LBB214:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3667              		.loc 2 198 9 view .LVU1027
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3668              		.loc 2 200 9 view .LVU1028
 3669              		.syntax unified
 3670              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3671 002e 4FF05003 			mov r3, #80												
 3672 0032 83F31188 		msr basepri, r3											
 3673 0036 BFF36F8F 		isb														
 3674 003a BFF34F8F 		dsb														
 3675              	
 3676              	@ 0 "" 2
 3677              	.LVL246:
 3678              		.thumb
 3679              		.syntax unified
 3680              	.L258:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3681              		.loc 2 200 9 is_stmt 0 view .LVU1029
 3682              	.LBE214:
 3683              	.LBE213:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3684              		.loc 1 3062 9 is_stmt 1 discriminator 3 view .LVU1030
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3685              		.loc 1 3062 9 discriminator 3 view .LVU1031
 3686 003e FEE7     		b	.L258
 3687              	.LVL247:
 3688              	.L257:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3689              		.loc 1 3062 9 discriminator 2 view .LVU1032
 3690              	.LBB215:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3691              		.loc 1 3062 9 discriminator 2 view .LVU1033
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3692              		.loc 1 3062 9 discriminator 2 view .LVU1034
 3693 0040 1348     		ldr	r0, .L261+12
 3694 0042 03EB8301 		add	r1, r3, r3, lsl #2
 3695 0046 8A00     		lsls	r2, r1, #2
 3696 0048 0244     		add	r2, r2, r0
 3697 004a 5168     		ldr	r1, [r2, #4]
 3698 004c 4968     		ldr	r1, [r1, #4]
 3699 004e 5160     		str	r1, [r2, #4]
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3700              		.loc 1 3062 9 discriminator 2 view .LVU1035
 3701 0050 03EB830C 		add	ip, r3, r3, lsl #2
 3702 0054 4FEA8C02 		lsl	r2, ip, #2
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 181


 3703 0058 0832     		adds	r2, r2, #8
 3704 005a 0244     		add	r2, r2, r0
 3705 005c 9142     		cmp	r1, r2
 3706 005e 09D0     		beq	.L260
 3707              	.L259:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3708              		.loc 1 3062 9 discriminator 6 view .LVU1036
 3709 0060 03EB8303 		add	r3, r3, r3, lsl #2
 3710              	.LVL248:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3711              		.loc 1 3062 9 is_stmt 0 discriminator 6 view .LVU1037
 3712 0064 9A00     		lsls	r2, r3, #2
 3713 0066 0A4B     		ldr	r3, .L261+12
 3714 0068 1344     		add	r3, r3, r2
 3715 006a 5B68     		ldr	r3, [r3, #4]
 3716 006c DA68     		ldr	r2, [r3, #12]
 3717 006e 094B     		ldr	r3, .L261+16
 3718 0070 1A60     		str	r2, [r3]
 3719              	.LBE215:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3720              		.loc 1 3062 9 is_stmt 1 discriminator 7 view .LVU1038
 3721              	.LBE210:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3722              		.loc 1 3062 43 discriminator 7 view .LVU1039
3063:ThirdParty/FreeRTOS/tasks.c **** 
 3723              		.loc 1 3063 32 view .LVU1040
3080:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3724              		.loc 1 3080 1 is_stmt 0 view .LVU1041
 3725 0072 7047     		bx	lr
 3726              	.LVL249:
 3727              	.L260:
 3728              	.LBB217:
 3729              	.LBB216:
3062:ThirdParty/FreeRTOS/tasks.c ****         traceTASK_SWITCHED_IN();
 3730              		.loc 1 3062 9 is_stmt 1 discriminator 4 view .LVU1042
 3731 0074 4868     		ldr	r0, [r1, #4]
 3732 0076 6246     		mov	r2, ip
 3733 0078 9100     		lsls	r1, r2, #2
 3734 007a 054A     		ldr	r2, .L261+12
 3735 007c 0A44     		add	r2, r2, r1
 3736 007e 5060     		str	r0, [r2, #4]
 3737 0080 EEE7     		b	.L259
 3738              	.L262:
 3739 0082 00BF     		.align	2
 3740              	.L261:
 3741 0084 00000000 		.word	uxSchedulerSuspended
 3742 0088 00000000 		.word	xYieldPending
 3743 008c 00000000 		.word	uxTopReadyPriority
 3744 0090 00000000 		.word	pxReadyTasksLists
 3745 0094 00000000 		.word	pxCurrentTCB
 3746              	.LBE216:
 3747              	.LBE217:
 3748              		.cfi_endproc
 3749              	.LFE28:
 3751              		.section	.text.vTaskSuspend,"ax",%progbits
 3752              		.align	1
 3753              		.global	vTaskSuspend
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 182


 3754              		.syntax unified
 3755              		.thumb
 3756              		.thumb_func
 3758              	vTaskSuspend:
 3759              	.LVL250:
 3760              	.LFB14:
1674:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3761              		.loc 1 1674 5 view -0
 3762              		.cfi_startproc
 3763              		@ args = 0, pretend = 0, frame = 0
 3764              		@ frame_needed = 0, uses_anonymous_args = 0
1674:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 3765              		.loc 1 1674 5 is_stmt 0 view .LVU1044
 3766 0000 38B5     		push	{r3, r4, r5, lr}
 3767              	.LCFI28:
 3768              		.cfi_def_cfa_offset 16
 3769              		.cfi_offset 3, -16
 3770              		.cfi_offset 4, -12
 3771              		.cfi_offset 5, -8
 3772              		.cfi_offset 14, -4
 3773 0002 0446     		mov	r4, r0
1675:ThirdParty/FreeRTOS/tasks.c **** 
 3774              		.loc 1 1675 9 is_stmt 1 view .LVU1045
1677:ThirdParty/FreeRTOS/tasks.c ****         {
 3775              		.loc 1 1677 9 view .LVU1046
 3776 0004 FFF7FEFF 		bl	vPortEnterCritical
 3777              	.LVL251:
1681:ThirdParty/FreeRTOS/tasks.c **** 
 3778              		.loc 1 1681 13 view .LVU1047
1681:ThirdParty/FreeRTOS/tasks.c **** 
 3779              		.loc 1 1681 21 is_stmt 0 view .LVU1048
 3780 0008 54B3     		cbz	r4, .L277
 3781              	.LVL252:
 3782              	.L264:
1683:ThirdParty/FreeRTOS/tasks.c **** 
 3783              		.loc 1 1683 39 is_stmt 1 view .LVU1049
1687:ThirdParty/FreeRTOS/tasks.c ****             {
 3784              		.loc 1 1687 13 view .LVU1050
1687:ThirdParty/FreeRTOS/tasks.c ****             {
 3785              		.loc 1 1687 17 is_stmt 0 view .LVU1051
 3786 000a 251D     		adds	r5, r4, #4
 3787 000c 2846     		mov	r0, r5
 3788 000e FFF7FEFF 		bl	uxListRemove
 3789              	.LVL253:
1687:ThirdParty/FreeRTOS/tasks.c ****             {
 3790              		.loc 1 1687 15 discriminator 1 view .LVU1052
 3791 0012 70B9     		cbnz	r0, .L265
1689:ThirdParty/FreeRTOS/tasks.c ****             }
 3792              		.loc 1 1689 17 is_stmt 1 view .LVU1053
 3793 0014 E26A     		ldr	r2, [r4, #44]
 3794 0016 02EB8203 		add	r3, r2, r2, lsl #2
 3795 001a 9B00     		lsls	r3, r3, #2
 3796 001c 2F49     		ldr	r1, .L281
 3797 001e CB58     		ldr	r3, [r1, r3]
 3798 0020 3BB9     		cbnz	r3, .L265
1689:ThirdParty/FreeRTOS/tasks.c ****             }
 3799              		.loc 1 1689 17 discriminator 1 view .LVU1054
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 183


 3800 0022 0123     		movs	r3, #1
 3801 0024 03FA02F2 		lsl	r2, r3, r2
 3802 0028 2D49     		ldr	r1, .L281+4
 3803 002a 0B68     		ldr	r3, [r1]
 3804 002c 23EA0203 		bic	r3, r3, r2
 3805 0030 0B60     		str	r3, [r1]
 3806              	.L265:
1693:ThirdParty/FreeRTOS/tasks.c ****             }
 3807              		.loc 1 1693 41 view .LVU1055
1697:ThirdParty/FreeRTOS/tasks.c ****             {
 3808              		.loc 1 1697 13 view .LVU1056
1697:ThirdParty/FreeRTOS/tasks.c ****             {
 3809              		.loc 1 1697 17 is_stmt 0 view .LVU1057
 3810 0032 A36A     		ldr	r3, [r4, #40]
1697:ThirdParty/FreeRTOS/tasks.c ****             {
 3811              		.loc 1 1697 15 view .LVU1058
 3812 0034 1BB1     		cbz	r3, .L266
1699:ThirdParty/FreeRTOS/tasks.c ****             }
 3813              		.loc 1 1699 17 is_stmt 1 view .LVU1059
1699:ThirdParty/FreeRTOS/tasks.c ****             }
 3814              		.loc 1 1699 26 is_stmt 0 view .LVU1060
 3815 0036 04F11800 		add	r0, r4, #24
 3816 003a FFF7FEFF 		bl	uxListRemove
 3817              	.LVL254:
 3818              	.L266:
1703:ThirdParty/FreeRTOS/tasks.c ****             }
 3819              		.loc 1 1703 41 is_stmt 1 view .LVU1061
1706:ThirdParty/FreeRTOS/tasks.c **** 
 3820              		.loc 1 1706 13 view .LVU1062
 3821 003e 2946     		mov	r1, r5
 3822 0040 2848     		ldr	r0, .L281+8
 3823 0042 FFF7FEFF 		bl	vListInsertEnd
 3824              	.LVL255:
 3825              	.LBB218:
1710:ThirdParty/FreeRTOS/tasks.c **** 
 3826              		.loc 1 1710 17 view .LVU1063
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 3827              		.loc 1 1712 17 view .LVU1064
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 3828              		.loc 1 1712 24 is_stmt 0 view .LVU1065
 3829 0046 0023     		movs	r3, #0
 3830              	.LVL256:
 3831              	.L267:
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 3832              		.loc 1 1712 31 is_stmt 1 discriminator 1 view .LVU1066
 3833 0048 002B     		cmp	r3, #0
 3834 004a 0CDD     		ble	.L269
 3835              	.LBE218:
1724:ThirdParty/FreeRTOS/tasks.c **** 
 3836              		.loc 1 1724 9 view .LVU1067
 3837 004c FFF7FEFF 		bl	vPortExitCritical
 3838              	.LVL257:
1726:ThirdParty/FreeRTOS/tasks.c ****         {
 3839              		.loc 1 1726 9 view .LVU1068
1726:ThirdParty/FreeRTOS/tasks.c ****         {
 3840              		.loc 1 1726 31 is_stmt 0 view .LVU1069
 3841 0050 254B     		ldr	r3, .L281+12
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 184


 3842 0052 1B68     		ldr	r3, [r3]
1726:ThirdParty/FreeRTOS/tasks.c ****         {
 3843              		.loc 1 1726 11 view .LVU1070
 3844 0054 A3B9     		cbnz	r3, .L278
 3845              	.L270:
1738:ThirdParty/FreeRTOS/tasks.c ****         }
 3846              		.loc 1 1738 37 is_stmt 1 view .LVU1071
1741:ThirdParty/FreeRTOS/tasks.c ****         {
 3847              		.loc 1 1741 9 view .LVU1072
1741:ThirdParty/FreeRTOS/tasks.c ****         {
 3848              		.loc 1 1741 19 is_stmt 0 view .LVU1073
 3849 0056 254B     		ldr	r3, .L281+16
 3850 0058 1B68     		ldr	r3, [r3]
1741:ThirdParty/FreeRTOS/tasks.c ****         {
 3851              		.loc 1 1741 11 view .LVU1074
 3852 005a A342     		cmp	r3, r4
 3853 005c 17D0     		beq	.L279
 3854              	.L263:
1772:ThirdParty/FreeRTOS/tasks.c **** 
 3855              		.loc 1 1772 5 view .LVU1075
 3856 005e 38BD     		pop	{r3, r4, r5, pc}
 3857              	.LVL258:
 3858              	.L277:
1681:ThirdParty/FreeRTOS/tasks.c **** 
 3859              		.loc 1 1681 21 discriminator 1 view .LVU1076
 3860 0060 224B     		ldr	r3, .L281+16
 3861 0062 1C68     		ldr	r4, [r3]
 3862              	.LVL259:
1681:ThirdParty/FreeRTOS/tasks.c **** 
 3863              		.loc 1 1681 21 discriminator 1 view .LVU1077
 3864 0064 D1E7     		b	.L264
 3865              	.LVL260:
 3866              	.L269:
 3867              	.LBB219:
1714:ThirdParty/FreeRTOS/tasks.c ****                     {
 3868              		.loc 1 1714 21 is_stmt 1 view .LVU1078
1714:ThirdParty/FreeRTOS/tasks.c ****                     {
 3869              		.loc 1 1714 45 is_stmt 0 view .LVU1079
 3870 0066 E218     		adds	r2, r4, r3
 3871 0068 92F84420 		ldrb	r2, [r2, #68]	@ zero_extendqisi2
 3872 006c D2B2     		uxtb	r2, r2
1714:ThirdParty/FreeRTOS/tasks.c ****                     {
 3873              		.loc 1 1714 23 view .LVU1080
 3874 006e 012A     		cmp	r2, #1
 3875 0070 01D0     		beq	.L280
 3876              	.L268:
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 3877              		.loc 1 1712 73 is_stmt 1 discriminator 2 view .LVU1081
 3878 0072 0133     		adds	r3, r3, #1
 3879              	.LVL261:
1712:ThirdParty/FreeRTOS/tasks.c ****                 {
 3880              		.loc 1 1712 73 is_stmt 0 discriminator 2 view .LVU1082
 3881 0074 E8E7     		b	.L267
 3882              	.L280:
1718:ThirdParty/FreeRTOS/tasks.c ****                     }
 3883              		.loc 1 1718 25 is_stmt 1 view .LVU1083
1718:ThirdParty/FreeRTOS/tasks.c ****                     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 185


 3884              		.loc 1 1718 51 is_stmt 0 view .LVU1084
 3885 0076 E218     		adds	r2, r4, r3
 3886 0078 0021     		movs	r1, #0
 3887 007a 82F84410 		strb	r1, [r2, #68]
 3888 007e F8E7     		b	.L268
 3889              	.LVL262:
 3890              	.L278:
1718:ThirdParty/FreeRTOS/tasks.c ****                     }
 3891              		.loc 1 1718 51 view .LVU1085
 3892              	.LBE219:
1730:ThirdParty/FreeRTOS/tasks.c ****             {
 3893              		.loc 1 1730 13 is_stmt 1 view .LVU1086
 3894 0080 FFF7FEFF 		bl	vPortEnterCritical
 3895              	.LVL263:
1732:ThirdParty/FreeRTOS/tasks.c ****             }
 3896              		.loc 1 1732 17 view .LVU1087
 3897 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3898              	.LVL264:
1734:ThirdParty/FreeRTOS/tasks.c ****         }
 3899              		.loc 1 1734 13 view .LVU1088
 3900 0088 FFF7FEFF 		bl	vPortExitCritical
 3901              	.LVL265:
 3902 008c E3E7     		b	.L270
 3903              	.L279:
1743:ThirdParty/FreeRTOS/tasks.c ****             {
 3904              		.loc 1 1743 13 view .LVU1089
1743:ThirdParty/FreeRTOS/tasks.c ****             {
 3905              		.loc 1 1743 35 is_stmt 0 view .LVU1090
 3906 008e 164B     		ldr	r3, .L281+12
 3907 0090 1B68     		ldr	r3, [r3]
1743:ThirdParty/FreeRTOS/tasks.c ****             {
 3908              		.loc 1 1743 15 view .LVU1091
 3909 0092 B3B1     		cbz	r3, .L272
1746:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3910              		.loc 1 1746 17 is_stmt 1 view .LVU1092
 3911 0094 164B     		ldr	r3, .L281+20
 3912 0096 1B68     		ldr	r3, [r3]
 3913 0098 43B1     		cbz	r3, .L273
1746:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3914              		.loc 1 1746 17 discriminator 1 view .LVU1093
 3915              	.LBB220:
 3916              	.LBI220:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 3917              		.loc 2 196 34 view .LVU1094
 3918              	.LBB221:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 3919              		.loc 2 198 9 view .LVU1095
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 3920              		.loc 2 200 9 view .LVU1096
 3921              		.syntax unified
 3922              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 3923 009a 4FF05003 			mov r3, #80												
 3924 009e 83F31188 		msr basepri, r3											
 3925 00a2 BFF36F8F 		isb														
 3926 00a6 BFF34F8F 		dsb														
 3927              	
 3928              	@ 0 "" 2
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 186


 3929              		.thumb
 3930              		.syntax unified
 3931              	.L274:
 3932              	.LBE221:
 3933              	.LBE220:
1746:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3934              		.loc 1 1746 17 discriminator 3 view .LVU1097
1746:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3935              		.loc 1 1746 17 discriminator 3 view .LVU1098
 3936 00aa FEE7     		b	.L274
 3937              	.L273:
1746:ThirdParty/FreeRTOS/tasks.c ****                 portYIELD_WITHIN_API();
 3938              		.loc 1 1746 58 discriminator 2 view .LVU1099
1747:ThirdParty/FreeRTOS/tasks.c ****             }
 3939              		.loc 1 1747 17 view .LVU1100
 3940 00ac 4FF0E023 		mov	r3, #-536813568
 3941 00b0 4FF08052 		mov	r2, #268435456
 3942 00b4 C3F8042D 		str	r2, [r3, #3332]
1747:ThirdParty/FreeRTOS/tasks.c ****             }
 3943              		.loc 1 1747 17 view .LVU1101
 3944              		.syntax unified
 3945              	@ 1747 "ThirdParty/FreeRTOS/tasks.c" 1
 3946 00b8 BFF34F8F 		dsb
 3947              	@ 0 "" 2
1747:ThirdParty/FreeRTOS/tasks.c ****             }
 3948              		.loc 1 1747 17 view .LVU1102
 3949              	@ 1747 "ThirdParty/FreeRTOS/tasks.c" 1
 3950 00bc BFF36F8F 		isb
 3951              	@ 0 "" 2
1747:ThirdParty/FreeRTOS/tasks.c ****             }
 3952              		.loc 1 1747 39 view .LVU1103
 3953              		.thumb
 3954              		.syntax unified
 3955 00c0 CDE7     		b	.L263
 3956              	.L272:
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 3957              		.loc 1 1754 17 view .LVU1104
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 3958              		.loc 1 1754 21 is_stmt 0 view .LVU1105
 3959 00c2 084B     		ldr	r3, .L281+8
 3960 00c4 1A68     		ldr	r2, [r3]
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 3961              		.loc 1 1754 68 view .LVU1106
 3962 00c6 0B4B     		ldr	r3, .L281+24
 3963 00c8 1B68     		ldr	r3, [r3]
1754:ThirdParty/FreeRTOS/tasks.c ****                 {
 3964              		.loc 1 1754 19 view .LVU1107
 3965 00ca 9A42     		cmp	r2, r3
 3966 00cc 03D1     		bne	.L275
1760:ThirdParty/FreeRTOS/tasks.c ****                 }
 3967              		.loc 1 1760 21 is_stmt 1 view .LVU1108
1760:ThirdParty/FreeRTOS/tasks.c ****                 }
 3968              		.loc 1 1760 34 is_stmt 0 view .LVU1109
 3969 00ce 074B     		ldr	r3, .L281+16
 3970 00d0 0022     		movs	r2, #0
 3971 00d2 1A60     		str	r2, [r3]
 3972 00d4 C3E7     		b	.L263
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 187


 3973              	.L275:
1764:ThirdParty/FreeRTOS/tasks.c ****                 }
 3974              		.loc 1 1764 21 is_stmt 1 view .LVU1110
 3975 00d6 FFF7FEFF 		bl	vTaskSwitchContext
 3976              	.LVL266:
1770:ThirdParty/FreeRTOS/tasks.c ****         }
 3977              		.loc 1 1770 37 view .LVU1111
1772:ThirdParty/FreeRTOS/tasks.c **** 
 3978              		.loc 1 1772 5 is_stmt 0 view .LVU1112
 3979 00da C0E7     		b	.L263
 3980              	.L282:
 3981              		.align	2
 3982              	.L281:
 3983 00dc 00000000 		.word	pxReadyTasksLists
 3984 00e0 00000000 		.word	uxTopReadyPriority
 3985 00e4 00000000 		.word	xSuspendedTaskList
 3986 00e8 00000000 		.word	xSchedulerRunning
 3987 00ec 00000000 		.word	pxCurrentTCB
 3988 00f0 00000000 		.word	uxSchedulerSuspended
 3989 00f4 00000000 		.word	uxCurrentNumberOfTasks
 3990              		.cfi_endproc
 3991              	.LFE14:
 3993              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3994              		.align	1
 3995              		.global	vTaskPlaceOnEventList
 3996              		.syntax unified
 3997              		.thumb
 3998              		.thumb_func
 4000              	vTaskPlaceOnEventList:
 4001              	.LVL267:
 4002              	.LFB29:
3085:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4003              		.loc 1 3085 1 is_stmt 1 view -0
 4004              		.cfi_startproc
 4005              		@ args = 0, pretend = 0, frame = 0
 4006              		@ frame_needed = 0, uses_anonymous_args = 0
3086:ThirdParty/FreeRTOS/tasks.c **** 
 4007              		.loc 1 3086 5 view .LVU1114
 4008 0000 58B1     		cbz	r0, .L288
3085:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4009              		.loc 1 3085 1 is_stmt 0 view .LVU1115
 4010 0002 10B5     		push	{r4, lr}
 4011              	.LCFI29:
 4012              		.cfi_def_cfa_offset 8
 4013              		.cfi_offset 4, -8
 4014              		.cfi_offset 14, -4
 4015 0004 0C46     		mov	r4, r1
3086:ThirdParty/FreeRTOS/tasks.c **** 
 4016              		.loc 1 3086 32 is_stmt 1 discriminator 2 view .LVU1116
3102:ThirdParty/FreeRTOS/tasks.c **** 
 4017              		.loc 1 3102 5 view .LVU1117
3102:ThirdParty/FreeRTOS/tasks.c **** 
 4018              		.loc 1 3102 46 is_stmt 0 view .LVU1118
 4019 0006 094A     		ldr	r2, .L289
 4020 0008 1168     		ldr	r1, [r2]
 4021              	.LVL268:
3102:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 188


 4022              		.loc 1 3102 5 view .LVU1119
 4023 000a 1831     		adds	r1, r1, #24
 4024 000c FFF7FEFF 		bl	vListInsert
 4025              	.LVL269:
3104:ThirdParty/FreeRTOS/tasks.c **** }
 4026              		.loc 1 3104 5 is_stmt 1 view .LVU1120
 4027 0010 0121     		movs	r1, #1
 4028 0012 2046     		mov	r0, r4
 4029 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4030              	.LVL270:
3105:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4031              		.loc 1 3105 1 is_stmt 0 view .LVU1121
 4032 0018 10BD     		pop	{r4, pc}
 4033              	.LVL271:
 4034              	.L288:
 4035              	.LCFI30:
 4036              		.cfi_def_cfa_offset 0
 4037              		.cfi_restore 4
 4038              		.cfi_restore 14
3086:ThirdParty/FreeRTOS/tasks.c **** 
 4039              		.loc 1 3086 5 is_stmt 1 discriminator 1 view .LVU1122
 4040              	.LBB222:
 4041              	.LBI222:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4042              		.loc 2 196 34 view .LVU1123
 4043              	.LBB223:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4044              		.loc 2 198 9 view .LVU1124
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4045              		.loc 2 200 9 view .LVU1125
 4046              		.syntax unified
 4047              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4048 001a 4FF05003 			mov r3, #80												
 4049 001e 83F31188 		msr basepri, r3											
 4050 0022 BFF36F8F 		isb														
 4051 0026 BFF34F8F 		dsb														
 4052              	
 4053              	@ 0 "" 2
 4054              		.thumb
 4055              		.syntax unified
 4056              	.L285:
 4057              	.LBE223:
 4058              	.LBE222:
3086:ThirdParty/FreeRTOS/tasks.c **** 
 4059              		.loc 1 3086 5 discriminator 3 view .LVU1126
3086:ThirdParty/FreeRTOS/tasks.c **** 
 4060              		.loc 1 3086 5 discriminator 3 view .LVU1127
 4061 002a FEE7     		b	.L285
 4062              	.L290:
 4063              		.align	2
 4064              	.L289:
 4065 002c 00000000 		.word	pxCurrentTCB
 4066              		.cfi_endproc
 4067              	.LFE29:
 4069              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4070              		.align	1
 4071              		.global	vTaskPlaceOnUnorderedEventList
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 189


 4072              		.syntax unified
 4073              		.thumb
 4074              		.thumb_func
 4076              	vTaskPlaceOnUnorderedEventList:
 4077              	.LVL272:
 4078              	.LFB30:
3111:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4079              		.loc 1 3111 1 view -0
 4080              		.cfi_startproc
 4081              		@ args = 0, pretend = 0, frame = 0
 4082              		@ frame_needed = 0, uses_anonymous_args = 0
3111:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxEventList );
 4083              		.loc 1 3111 1 is_stmt 0 view .LVU1129
 4084 0000 38B5     		push	{r3, r4, r5, lr}
 4085              	.LCFI31:
 4086              		.cfi_def_cfa_offset 16
 4087              		.cfi_offset 3, -16
 4088              		.cfi_offset 4, -12
 4089              		.cfi_offset 5, -8
 4090              		.cfi_offset 14, -4
3112:ThirdParty/FreeRTOS/tasks.c **** 
 4091              		.loc 1 3112 5 is_stmt 1 view .LVU1130
 4092 0002 60B1     		cbz	r0, .L297
 4093 0004 0346     		mov	r3, r0
3112:ThirdParty/FreeRTOS/tasks.c **** 
 4094              		.loc 1 3112 32 discriminator 2 view .LVU1131
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4095              		.loc 1 3116 5 view .LVU1132
 4096 0006 1848     		ldr	r0, .L298
 4097              	.LVL273:
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4098              		.loc 1 3116 5 is_stmt 0 view .LVU1133
 4099 0008 0068     		ldr	r0, [r0]
 4100 000a 88B9     		cbnz	r0, .L294
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4101              		.loc 1 3116 5 is_stmt 1 discriminator 1 view .LVU1134
 4102              	.LBB224:
 4103              	.LBI224:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4104              		.loc 2 196 34 view .LVU1135
 4105              	.LBB225:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4106              		.loc 2 198 9 view .LVU1136
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4107              		.loc 2 200 9 view .LVU1137
 4108              		.syntax unified
 4109              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4110 000c 4FF05003 			mov r3, #80												
 4111 0010 83F31188 		msr basepri, r3											
 4112 0014 BFF36F8F 		isb														
 4113 0018 BFF34F8F 		dsb														
 4114              	
 4115              	@ 0 "" 2
 4116              	.LVL274:
 4117              		.thumb
 4118              		.syntax unified
 4119              	.L295:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 190


 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4120              		.loc 2 200 9 is_stmt 0 view .LVU1138
 4121              	.LBE225:
 4122              	.LBE224:
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4123              		.loc 1 3116 5 is_stmt 1 discriminator 3 view .LVU1139
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4124              		.loc 1 3116 5 discriminator 3 view .LVU1140
 4125 001c FEE7     		b	.L295
 4126              	.LVL275:
 4127              	.L297:
3112:ThirdParty/FreeRTOS/tasks.c **** 
 4128              		.loc 1 3112 5 discriminator 1 view .LVU1141
 4129              	.LBB226:
 4130              	.LBI226:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4131              		.loc 2 196 34 view .LVU1142
 4132              	.LBB227:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4133              		.loc 2 198 9 view .LVU1143
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4134              		.loc 2 200 9 view .LVU1144
 4135              		.syntax unified
 4136              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4137 001e 4FF05003 			mov r3, #80												
 4138 0022 83F31188 		msr basepri, r3											
 4139 0026 BFF36F8F 		isb														
 4140 002a BFF34F8F 		dsb														
 4141              	
 4142              	@ 0 "" 2
 4143              		.thumb
 4144              		.syntax unified
 4145              	.L293:
 4146              	.LBE227:
 4147              	.LBE226:
3112:ThirdParty/FreeRTOS/tasks.c **** 
 4148              		.loc 1 3112 5 discriminator 3 view .LVU1145
3112:ThirdParty/FreeRTOS/tasks.c **** 
 4149              		.loc 1 3112 5 discriminator 3 view .LVU1146
 4150 002e FEE7     		b	.L293
 4151              	.LVL276:
 4152              	.L294:
3116:ThirdParty/FreeRTOS/tasks.c **** 
 4153              		.loc 1 3116 46 discriminator 2 view .LVU1147
3121:ThirdParty/FreeRTOS/tasks.c **** 
 4154              		.loc 1 3121 5 view .LVU1148
 4155 0030 0E48     		ldr	r0, .L298+4
 4156 0032 0468     		ldr	r4, [r0]
 4157 0034 41F00041 		orr	r1, r1, #-2147483648
 4158              	.LVL277:
3121:ThirdParty/FreeRTOS/tasks.c **** 
 4159              		.loc 1 3121 5 is_stmt 0 view .LVU1149
 4160 0038 A161     		str	r1, [r4, #24]
 4161              	.LBB228:
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4162              		.loc 1 3128 5 is_stmt 1 view .LVU1150
 4163 003a 5968     		ldr	r1, [r3, #4]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 191


 4164              	.LVL278:
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4165              		.loc 1 3128 5 view .LVU1151
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4166              		.loc 1 3128 5 view .LVU1152
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4167              		.loc 1 3128 5 view .LVU1153
 4168 003c 0468     		ldr	r4, [r0]
 4169 003e E161     		str	r1, [r4, #28]
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4170              		.loc 1 3128 5 view .LVU1154
 4171 0040 0568     		ldr	r5, [r0]
 4172 0042 8C68     		ldr	r4, [r1, #8]
 4173 0044 2C62     		str	r4, [r5, #32]
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4174              		.loc 1 3128 5 view .LVU1155
 4175 0046 0568     		ldr	r5, [r0]
 4176 0048 1835     		adds	r5, r5, #24
 4177 004a 6560     		str	r5, [r4, #4]
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4178              		.loc 1 3128 5 view .LVU1156
 4179 004c 0468     		ldr	r4, [r0]
 4180 004e 1834     		adds	r4, r4, #24
 4181 0050 8C60     		str	r4, [r1, #8]
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4182              		.loc 1 3128 5 view .LVU1157
 4183 0052 0168     		ldr	r1, [r0]
 4184              	.LVL279:
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4185              		.loc 1 3128 5 is_stmt 0 view .LVU1158
 4186 0054 8B62     		str	r3, [r1, #40]
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4187              		.loc 1 3128 5 is_stmt 1 view .LVU1159
 4188 0056 1968     		ldr	r1, [r3]
 4189 0058 0131     		adds	r1, r1, #1
 4190 005a 1960     		str	r1, [r3]
 4191              	.LBE228:
3128:ThirdParty/FreeRTOS/tasks.c **** 
 4192              		.loc 1 3128 69 view .LVU1160
3130:ThirdParty/FreeRTOS/tasks.c **** }
 4193              		.loc 1 3130 5 view .LVU1161
 4194 005c 0121     		movs	r1, #1
 4195 005e 1046     		mov	r0, r2
 4196 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4197              	.LVL280:
3131:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4198              		.loc 1 3131 1 is_stmt 0 view .LVU1162
 4199 0064 38BD     		pop	{r3, r4, r5, pc}
 4200              	.L299:
 4201 0066 00BF     		.align	2
 4202              	.L298:
 4203 0068 00000000 		.word	uxSchedulerSuspended
 4204 006c 00000000 		.word	pxCurrentTCB
 4205              		.cfi_endproc
 4206              	.LFE30:
 4208              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4209              		.align	1
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 192


 4210              		.global	xTaskRemoveFromEventList
 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4215              	xTaskRemoveFromEventList:
 4216              	.LVL281:
 4217              	.LFB31:
3170:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4218              		.loc 1 3170 1 is_stmt 1 view -0
 4219              		.cfi_startproc
 4220              		@ args = 0, pretend = 0, frame = 0
 4221              		@ frame_needed = 0, uses_anonymous_args = 0
 4222              		@ link register save eliminated.
3171:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4223              		.loc 1 3171 5 view .LVU1164
3172:ThirdParty/FreeRTOS/tasks.c **** 
 4224              		.loc 1 3172 5 view .LVU1165
3187:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4225              		.loc 1 3187 5 view .LVU1166
3187:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4226              		.loc 1 3187 22 is_stmt 0 view .LVU1167
 4227 0000 C368     		ldr	r3, [r0, #12]
3187:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4228              		.loc 1 3187 20 view .LVU1168
 4229 0002 DB68     		ldr	r3, [r3, #12]
 4230              	.LVL282:
3188:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4231              		.loc 1 3188 5 is_stmt 1 view .LVU1169
 4232 0004 002B     		cmp	r3, #0
 4233 0006 4AD0     		beq	.L311
3170:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4234              		.loc 1 3170 1 is_stmt 0 view .LVU1170
 4235 0008 30B4     		push	{r4, r5}
 4236              	.LCFI32:
 4237              		.cfi_def_cfa_offset 8
 4238              		.cfi_offset 4, -8
 4239              		.cfi_offset 5, -4
3188:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4240              		.loc 1 3188 35 is_stmt 1 discriminator 2 view .LVU1171
 4241              	.LBB229:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4242              		.loc 1 3189 5 view .LVU1172
 4243 000a 9A6A     		ldr	r2, [r3, #40]
 4244              	.LVL283:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4245              		.loc 1 3189 5 view .LVU1173
 4246 000c D869     		ldr	r0, [r3, #28]
 4247              	.LVL284:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4248              		.loc 1 3189 5 is_stmt 0 view .LVU1174
 4249 000e 196A     		ldr	r1, [r3, #32]
 4250 0010 8160     		str	r1, [r0, #8]
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4251              		.loc 1 3189 5 is_stmt 1 view .LVU1175
 4252 0012 D869     		ldr	r0, [r3, #28]
 4253 0014 4860     		str	r0, [r1, #4]
3189:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 193


 4254              		.loc 1 3189 5 view .LVU1176
 4255 0016 5168     		ldr	r1, [r2, #4]
 4256 0018 03F11800 		add	r0, r3, #24
 4257 001c 8142     		cmp	r1, r0
 4258 001e 47D0     		beq	.L312
 4259              	.L303:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4260              		.loc 1 3189 5 discriminator 3 view .LVU1177
 4261 0020 0021     		movs	r1, #0
 4262 0022 9962     		str	r1, [r3, #40]
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4263              		.loc 1 3189 5 discriminator 3 view .LVU1178
 4264 0024 1168     		ldr	r1, [r2]
 4265 0026 0139     		subs	r1, r1, #1
 4266 0028 1160     		str	r1, [r2]
 4267              	.LBE229:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4268              		.loc 1 3189 59 discriminator 3 view .LVU1179
3191:ThirdParty/FreeRTOS/tasks.c ****     {
 4269              		.loc 1 3191 5 view .LVU1180
3191:ThirdParty/FreeRTOS/tasks.c ****     {
 4270              		.loc 1 3191 30 is_stmt 0 view .LVU1181
 4271 002a 2B4A     		ldr	r2, .L314
 4272              	.LVL285:
3191:ThirdParty/FreeRTOS/tasks.c ****     {
 4273              		.loc 1 3191 30 view .LVU1182
 4274 002c 1268     		ldr	r2, [r2]
3191:ThirdParty/FreeRTOS/tasks.c ****     {
 4275              		.loc 1 3191 7 view .LVU1183
 4276 002e 002A     		cmp	r2, #0
 4277 0030 44D1     		bne	.L304
 4278              	.LBB230:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4279              		.loc 1 3193 9 is_stmt 1 view .LVU1184
 4280 0032 5A69     		ldr	r2, [r3, #20]
 4281              	.LVL286:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4282              		.loc 1 3193 9 view .LVU1185
 4283 0034 9868     		ldr	r0, [r3, #8]
 4284 0036 D968     		ldr	r1, [r3, #12]
 4285 0038 8160     		str	r1, [r0, #8]
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4286              		.loc 1 3193 9 view .LVU1186
 4287 003a 9868     		ldr	r0, [r3, #8]
 4288 003c 4860     		str	r0, [r1, #4]
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4289              		.loc 1 3193 9 view .LVU1187
 4290 003e 5168     		ldr	r1, [r2, #4]
 4291 0040 181D     		adds	r0, r3, #4
 4292 0042 8142     		cmp	r1, r0
 4293 0044 37D0     		beq	.L313
 4294              	.L305:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4295              		.loc 1 3193 9 discriminator 3 view .LVU1188
 4296 0046 0021     		movs	r1, #0
 4297 0048 5961     		str	r1, [r3, #20]
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 194


 4298              		.loc 1 3193 9 discriminator 3 view .LVU1189
 4299 004a 1168     		ldr	r1, [r2]
 4300 004c 0139     		subs	r1, r1, #1
 4301 004e 1160     		str	r1, [r2]
 4302              	.LBE230:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4303              		.loc 1 3193 63 discriminator 3 view .LVU1190
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4304              		.loc 1 3194 9 view .LVU1191
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4305              		.loc 1 3194 9 view .LVU1192
 4306 0050 DA6A     		ldr	r2, [r3, #44]
 4307              	.LVL287:
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4308              		.loc 1 3194 9 is_stmt 0 view .LVU1193
 4309 0052 0121     		movs	r1, #1
 4310 0054 9140     		lsls	r1, r1, r2
 4311 0056 214C     		ldr	r4, .L314+4
 4312 0058 2568     		ldr	r5, [r4]
 4313 005a 2943     		orrs	r1, r1, r5
 4314 005c 2160     		str	r1, [r4]
 4315              	.LBB231:
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4316              		.loc 1 3194 9 is_stmt 1 view .LVU1194
 4317 005e 2049     		ldr	r1, .L314+8
 4318 0060 02EB8202 		add	r2, r2, r2, lsl #2
 4319 0064 01EB8202 		add	r2, r1, r2, lsl #2
 4320 0068 5268     		ldr	r2, [r2, #4]
 4321              	.LVL288:
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4322              		.loc 1 3194 9 view .LVU1195
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4323              		.loc 1 3194 9 view .LVU1196
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4324              		.loc 1 3194 9 view .LVU1197
 4325 006a 9A60     		str	r2, [r3, #8]
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4326              		.loc 1 3194 9 view .LVU1198
 4327 006c 9468     		ldr	r4, [r2, #8]
 4328 006e DC60     		str	r4, [r3, #12]
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4329              		.loc 1 3194 9 view .LVU1199
 4330 0070 6060     		str	r0, [r4, #4]
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4331              		.loc 1 3194 9 view .LVU1200
 4332 0072 9060     		str	r0, [r2, #8]
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4333              		.loc 1 3194 9 view .LVU1201
 4334 0074 DA6A     		ldr	r2, [r3, #44]
 4335              	.LVL289:
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4336              		.loc 1 3194 9 is_stmt 0 view .LVU1202
 4337 0076 02EB8200 		add	r0, r2, r2, lsl #2
 4338 007a 8400     		lsls	r4, r0, #2
 4339 007c 01EB8000 		add	r0, r1, r0, lsl #2
 4340 0080 5861     		str	r0, [r3, #20]
3194:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 195


 4341              		.loc 1 3194 9 is_stmt 1 view .LVU1203
 4342 0082 0859     		ldr	r0, [r1, r4]
 4343 0084 0130     		adds	r0, r0, #1
 4344 0086 0851     		str	r0, [r1, r4]
 4345              	.LBE231:
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4346              		.loc 1 3194 9 view .LVU1204
3194:ThirdParty/FreeRTOS/tasks.c **** 
 4347              		.loc 1 3194 48 view .LVU1205
 4348              	.LVL290:
 4349              	.L306:
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4350              		.loc 1 3214 86 discriminator 1 view .LVU1206
3217:ThirdParty/FreeRTOS/tasks.c ****     {
 4351              		.loc 1 3217 5 view .LVU1207
3217:ThirdParty/FreeRTOS/tasks.c ****     {
 4352              		.loc 1 3217 23 is_stmt 0 view .LVU1208
 4353 0088 DA6A     		ldr	r2, [r3, #44]
3217:ThirdParty/FreeRTOS/tasks.c ****     {
 4354              		.loc 1 3217 50 view .LVU1209
 4355 008a 164B     		ldr	r3, .L314+12
 4356              	.LVL291:
3217:ThirdParty/FreeRTOS/tasks.c ****     {
 4357              		.loc 1 3217 50 view .LVU1210
 4358 008c 1B68     		ldr	r3, [r3]
 4359 008e DB6A     		ldr	r3, [r3, #44]
3217:ThirdParty/FreeRTOS/tasks.c ****     {
 4360              		.loc 1 3217 7 view .LVU1211
 4361 0090 9A42     		cmp	r2, r3
 4362 0092 1FD9     		bls	.L308
3222:ThirdParty/FreeRTOS/tasks.c **** 
 4363              		.loc 1 3222 9 is_stmt 1 view .LVU1212
 4364              	.LVL292:
3226:ThirdParty/FreeRTOS/tasks.c ****     }
 4365              		.loc 1 3226 9 view .LVU1213
3226:ThirdParty/FreeRTOS/tasks.c ****     }
 4366              		.loc 1 3226 23 is_stmt 0 view .LVU1214
 4367 0094 0120     		movs	r0, #1
 4368 0096 144B     		ldr	r3, .L314+16
 4369 0098 1860     		str	r0, [r3]
 4370              	.LVL293:
 4371              	.L300:
3234:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4372              		.loc 1 3234 1 view .LVU1215
 4373 009a 30BC     		pop	{r4, r5}
 4374              	.LCFI33:
 4375              		.cfi_restore 5
 4376              		.cfi_restore 4
 4377              		.cfi_def_cfa_offset 0
 4378 009c 7047     		bx	lr
 4379              	.LVL294:
 4380              	.L311:
3188:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4381              		.loc 1 3188 5 is_stmt 1 discriminator 1 view .LVU1216
 4382              	.LBB232:
 4383              	.LBI232:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 196


 4384              		.loc 2 196 34 view .LVU1217
 4385              	.LBB233:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4386              		.loc 2 198 9 view .LVU1218
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4387              		.loc 2 200 9 view .LVU1219
 4388              		.syntax unified
 4389              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4390 009e 4FF05003 			mov r3, #80												
 4391 00a2 83F31188 		msr basepri, r3											
 4392 00a6 BFF36F8F 		isb														
 4393 00aa BFF34F8F 		dsb														
 4394              	
 4395              	@ 0 "" 2
 4396              	.LVL295:
 4397              		.thumb
 4398              		.syntax unified
 4399              	.L302:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4400              		.loc 2 200 9 is_stmt 0 view .LVU1220
 4401              	.LBE233:
 4402              	.LBE232:
3188:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4403              		.loc 1 3188 5 is_stmt 1 discriminator 3 view .LVU1221
3188:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 4404              		.loc 1 3188 5 discriminator 3 view .LVU1222
 4405 00ae FEE7     		b	.L302
 4406              	.LVL296:
 4407              	.L312:
 4408              	.LCFI34:
 4409              		.cfi_def_cfa_offset 8
 4410              		.cfi_offset 4, -8
 4411              		.cfi_offset 5, -4
 4412              	.LBB234:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4413              		.loc 1 3189 5 discriminator 1 view .LVU1223
 4414 00b0 196A     		ldr	r1, [r3, #32]
 4415 00b2 5160     		str	r1, [r2, #4]
 4416 00b4 B4E7     		b	.L303
 4417              	.LVL297:
 4418              	.L313:
3189:ThirdParty/FreeRTOS/tasks.c **** 
 4419              		.loc 1 3189 5 is_stmt 0 discriminator 1 view .LVU1224
 4420              	.LBE234:
 4421              	.LBB235:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4422              		.loc 1 3193 9 is_stmt 1 discriminator 1 view .LVU1225
 4423 00b6 D968     		ldr	r1, [r3, #12]
 4424 00b8 5160     		str	r1, [r2, #4]
 4425 00ba C4E7     		b	.L305
 4426              	.LVL298:
 4427              	.L304:
3193:ThirdParty/FreeRTOS/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4428              		.loc 1 3193 9 is_stmt 0 discriminator 1 view .LVU1226
 4429              	.LBE235:
 4430              	.LBB236:
3214:ThirdParty/FreeRTOS/tasks.c ****     }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 197


 4431              		.loc 1 3214 9 is_stmt 1 view .LVU1227
 4432 00bc 0B4A     		ldr	r2, .L314+20
 4433 00be 5168     		ldr	r1, [r2, #4]
 4434              	.LVL299:
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4435              		.loc 1 3214 9 view .LVU1228
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4436              		.loc 1 3214 9 view .LVU1229
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4437              		.loc 1 3214 9 view .LVU1230
 4438 00c0 D961     		str	r1, [r3, #28]
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4439              		.loc 1 3214 9 view .LVU1231
 4440 00c2 8C68     		ldr	r4, [r1, #8]
 4441 00c4 1C62     		str	r4, [r3, #32]
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4442              		.loc 1 3214 9 view .LVU1232
 4443 00c6 6060     		str	r0, [r4, #4]
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4444              		.loc 1 3214 9 view .LVU1233
 4445 00c8 8860     		str	r0, [r1, #8]
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4446              		.loc 1 3214 9 view .LVU1234
 4447 00ca 9A62     		str	r2, [r3, #40]
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4448              		.loc 1 3214 9 view .LVU1235
 4449 00cc 1168     		ldr	r1, [r2]
 4450              	.LVL300:
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4451              		.loc 1 3214 9 is_stmt 0 view .LVU1236
 4452 00ce 0131     		adds	r1, r1, #1
 4453 00d0 1160     		str	r1, [r2]
 4454 00d2 D9E7     		b	.L306
 4455              	.LVL301:
 4456              	.L308:
3214:ThirdParty/FreeRTOS/tasks.c ****     }
 4457              		.loc 1 3214 9 view .LVU1237
 4458              	.LBE236:
3230:ThirdParty/FreeRTOS/tasks.c ****     }
 4459              		.loc 1 3230 17 view .LVU1238
 4460 00d4 0020     		movs	r0, #0
 4461              	.LVL302:
3233:ThirdParty/FreeRTOS/tasks.c **** }
 4462              		.loc 1 3233 5 is_stmt 1 view .LVU1239
3233:ThirdParty/FreeRTOS/tasks.c **** }
 4463              		.loc 1 3233 12 is_stmt 0 view .LVU1240
 4464 00d6 E0E7     		b	.L300
 4465              	.L315:
 4466              		.align	2
 4467              	.L314:
 4468 00d8 00000000 		.word	uxSchedulerSuspended
 4469 00dc 00000000 		.word	uxTopReadyPriority
 4470 00e0 00000000 		.word	pxReadyTasksLists
 4471 00e4 00000000 		.word	pxCurrentTCB
 4472 00e8 00000000 		.word	xYieldPending
 4473 00ec 00000000 		.word	xPendingReadyList
 4474              		.cfi_endproc
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 198


 4475              	.LFE31:
 4477              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4478              		.align	1
 4479              		.global	vTaskRemoveFromUnorderedEventList
 4480              		.syntax unified
 4481              		.thumb
 4482              		.thumb_func
 4484              	vTaskRemoveFromUnorderedEventList:
 4485              	.LVL303:
 4486              	.LFB32:
3239:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4487              		.loc 1 3239 1 is_stmt 1 view -0
 4488              		.cfi_startproc
 4489              		@ args = 0, pretend = 0, frame = 0
 4490              		@ frame_needed = 0, uses_anonymous_args = 0
 4491              		@ link register save eliminated.
3240:ThirdParty/FreeRTOS/tasks.c **** 
 4492              		.loc 1 3240 5 view .LVU1242
3244:ThirdParty/FreeRTOS/tasks.c **** 
 4493              		.loc 1 3244 5 view .LVU1243
 4494 0000 324B     		ldr	r3, .L329
 4495 0002 1B68     		ldr	r3, [r3]
 4496 0004 43B9     		cbnz	r3, .L317
3244:ThirdParty/FreeRTOS/tasks.c **** 
 4497              		.loc 1 3244 5 discriminator 1 view .LVU1244
 4498              	.LBB237:
 4499              	.LBI237:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4500              		.loc 2 196 34 view .LVU1245
 4501              	.LBB238:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4502              		.loc 2 198 9 view .LVU1246
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4503              		.loc 2 200 9 view .LVU1247
 4504              		.syntax unified
 4505              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4506 0006 4FF05003 			mov r3, #80												
 4507 000a 83F31188 		msr basepri, r3											
 4508 000e BFF36F8F 		isb														
 4509 0012 BFF34F8F 		dsb														
 4510              	
 4511              	@ 0 "" 2
 4512              		.thumb
 4513              		.syntax unified
 4514              	.L318:
 4515              	.LBE238:
 4516              	.LBE237:
3244:ThirdParty/FreeRTOS/tasks.c **** 
 4517              		.loc 1 3244 5 discriminator 3 view .LVU1248
3244:ThirdParty/FreeRTOS/tasks.c **** 
 4518              		.loc 1 3244 5 discriminator 3 view .LVU1249
 4519 0016 FEE7     		b	.L318
 4520              	.L317:
3244:ThirdParty/FreeRTOS/tasks.c **** 
 4521              		.loc 1 3244 52 discriminator 2 view .LVU1250
3247:ThirdParty/FreeRTOS/tasks.c **** 
 4522              		.loc 1 3247 5 view .LVU1251
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 199


 4523 0018 41F00041 		orr	r1, r1, #-2147483648
 4524              	.LVL304:
3247:ThirdParty/FreeRTOS/tasks.c **** 
 4525              		.loc 1 3247 5 is_stmt 0 view .LVU1252
 4526 001c 0160     		str	r1, [r0]
3251:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4527              		.loc 1 3251 5 is_stmt 1 view .LVU1253
3251:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxUnblockedTCB );
 4528              		.loc 1 3251 20 is_stmt 0 view .LVU1254
 4529 001e C268     		ldr	r2, [r0, #12]
 4530              	.LVL305:
3252:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4531              		.loc 1 3252 5 is_stmt 1 view .LVU1255
 4532 0020 002A     		cmp	r2, #0
 4533 0022 44D0     		beq	.L326
3239:ThirdParty/FreeRTOS/tasks.c ****     TCB_t * pxUnblockedTCB;
 4534              		.loc 1 3239 1 is_stmt 0 view .LVU1256
 4535 0024 30B4     		push	{r4, r5}
 4536              	.LCFI35:
 4537              		.cfi_def_cfa_offset 8
 4538              		.cfi_offset 4, -8
 4539              		.cfi_offset 5, -4
3252:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4540              		.loc 1 3252 35 is_stmt 1 discriminator 2 view .LVU1257
 4541              	.LBB239:
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4542              		.loc 1 3253 5 view .LVU1258
 4543 0026 0369     		ldr	r3, [r0, #16]
 4544              	.LVL306:
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4545              		.loc 1 3253 5 view .LVU1259
 4546 0028 4468     		ldr	r4, [r0, #4]
 4547 002a 8168     		ldr	r1, [r0, #8]
 4548 002c A160     		str	r1, [r4, #8]
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4549              		.loc 1 3253 5 view .LVU1260
 4550 002e 4468     		ldr	r4, [r0, #4]
 4551 0030 4C60     		str	r4, [r1, #4]
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4552              		.loc 1 3253 5 view .LVU1261
 4553 0032 5968     		ldr	r1, [r3, #4]
 4554 0034 8142     		cmp	r1, r0
 4555 0036 43D0     		beq	.L327
 4556              	.L321:
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4557              		.loc 1 3253 5 discriminator 3 view .LVU1262
 4558 0038 0021     		movs	r1, #0
 4559 003a 0161     		str	r1, [r0, #16]
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4560              		.loc 1 3253 5 discriminator 3 view .LVU1263
 4561 003c 1968     		ldr	r1, [r3]
 4562 003e 0139     		subs	r1, r1, #1
 4563 0040 1960     		str	r1, [r3]
 4564              	.LBE239:
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4565              		.loc 1 3253 39 discriminator 3 view .LVU1264
 4566              	.LBB240:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 200


3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4567              		.loc 1 3272 5 view .LVU1265
 4568 0042 5369     		ldr	r3, [r2, #20]
 4569              	.LVL307:
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4570              		.loc 1 3272 5 view .LVU1266
 4571 0044 9068     		ldr	r0, [r2, #8]
 4572              	.LVL308:
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4573              		.loc 1 3272 5 is_stmt 0 view .LVU1267
 4574 0046 D168     		ldr	r1, [r2, #12]
 4575 0048 8160     		str	r1, [r0, #8]
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4576              		.loc 1 3272 5 is_stmt 1 view .LVU1268
 4577 004a 9068     		ldr	r0, [r2, #8]
 4578 004c 4860     		str	r0, [r1, #4]
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4579              		.loc 1 3272 5 view .LVU1269
 4580 004e 5968     		ldr	r1, [r3, #4]
 4581 0050 101D     		adds	r0, r2, #4
 4582 0052 8142     		cmp	r1, r0
 4583 0054 37D0     		beq	.L328
 4584              	.L322:
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4585              		.loc 1 3272 5 discriminator 3 view .LVU1270
 4586 0056 0021     		movs	r1, #0
 4587 0058 5161     		str	r1, [r2, #20]
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4588              		.loc 1 3272 5 discriminator 3 view .LVU1271
 4589 005a 1968     		ldr	r1, [r3]
 4590 005c 0139     		subs	r1, r1, #1
 4591 005e 1960     		str	r1, [r3]
 4592              	.LBE240:
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4593              		.loc 1 3272 59 discriminator 3 view .LVU1272
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4594              		.loc 1 3273 5 view .LVU1273
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4595              		.loc 1 3273 5 view .LVU1274
 4596 0060 D36A     		ldr	r3, [r2, #44]
 4597              	.LVL309:
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4598              		.loc 1 3273 5 is_stmt 0 view .LVU1275
 4599 0062 0121     		movs	r1, #1
 4600 0064 9940     		lsls	r1, r1, r3
 4601 0066 1A4C     		ldr	r4, .L329+4
 4602 0068 2568     		ldr	r5, [r4]
 4603 006a 2943     		orrs	r1, r1, r5
 4604 006c 2160     		str	r1, [r4]
 4605              	.LBB241:
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4606              		.loc 1 3273 5 is_stmt 1 view .LVU1276
 4607 006e 1949     		ldr	r1, .L329+8
 4608 0070 03EB8303 		add	r3, r3, r3, lsl #2
 4609 0074 01EB8303 		add	r3, r1, r3, lsl #2
 4610 0078 5B68     		ldr	r3, [r3, #4]
 4611              	.LVL310:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 201


3273:ThirdParty/FreeRTOS/tasks.c **** 
 4612              		.loc 1 3273 5 view .LVU1277
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4613              		.loc 1 3273 5 view .LVU1278
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4614              		.loc 1 3273 5 view .LVU1279
 4615 007a 9360     		str	r3, [r2, #8]
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4616              		.loc 1 3273 5 view .LVU1280
 4617 007c 9C68     		ldr	r4, [r3, #8]
 4618 007e D460     		str	r4, [r2, #12]
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4619              		.loc 1 3273 5 view .LVU1281
 4620 0080 6060     		str	r0, [r4, #4]
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4621              		.loc 1 3273 5 view .LVU1282
 4622 0082 9860     		str	r0, [r3, #8]
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4623              		.loc 1 3273 5 view .LVU1283
 4624 0084 D36A     		ldr	r3, [r2, #44]
 4625              	.LVL311:
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4626              		.loc 1 3273 5 is_stmt 0 view .LVU1284
 4627 0086 03EB8300 		add	r0, r3, r3, lsl #2
 4628 008a 8400     		lsls	r4, r0, #2
 4629 008c 01EB8000 		add	r0, r1, r0, lsl #2
 4630 0090 5061     		str	r0, [r2, #20]
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4631              		.loc 1 3273 5 is_stmt 1 view .LVU1285
 4632 0092 0859     		ldr	r0, [r1, r4]
 4633 0094 0130     		adds	r0, r0, #1
 4634 0096 0851     		str	r0, [r1, r4]
 4635              	.LBE241:
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4636              		.loc 1 3273 5 view .LVU1286
3273:ThirdParty/FreeRTOS/tasks.c **** 
 4637              		.loc 1 3273 44 view .LVU1287
3275:ThirdParty/FreeRTOS/tasks.c ****     {
 4638              		.loc 1 3275 5 view .LVU1288
3275:ThirdParty/FreeRTOS/tasks.c ****     {
 4639              		.loc 1 3275 23 is_stmt 0 view .LVU1289
 4640 0098 D26A     		ldr	r2, [r2, #44]
 4641              	.LVL312:
3275:ThirdParty/FreeRTOS/tasks.c ****     {
 4642              		.loc 1 3275 50 view .LVU1290
 4643 009a 0F4B     		ldr	r3, .L329+12
 4644 009c 1B68     		ldr	r3, [r3]
 4645 009e DB6A     		ldr	r3, [r3, #44]
3275:ThirdParty/FreeRTOS/tasks.c ****     {
 4646              		.loc 1 3275 7 view .LVU1291
 4647 00a0 9A42     		cmp	r2, r3
 4648 00a2 02D9     		bls	.L316
3281:ThirdParty/FreeRTOS/tasks.c ****     }
 4649              		.loc 1 3281 9 is_stmt 1 view .LVU1292
3281:ThirdParty/FreeRTOS/tasks.c ****     }
 4650              		.loc 1 3281 23 is_stmt 0 view .LVU1293
 4651 00a4 0D4B     		ldr	r3, .L329+16
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 202


 4652 00a6 0122     		movs	r2, #1
 4653 00a8 1A60     		str	r2, [r3]
 4654              	.L316:
3283:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4655              		.loc 1 3283 1 view .LVU1294
 4656 00aa 30BC     		pop	{r4, r5}
 4657              	.LCFI36:
 4658              		.cfi_restore 5
 4659              		.cfi_restore 4
 4660              		.cfi_def_cfa_offset 0
 4661 00ac 7047     		bx	lr
 4662              	.LVL313:
 4663              	.L326:
3252:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4664              		.loc 1 3252 5 is_stmt 1 discriminator 1 view .LVU1295
 4665              	.LBB242:
 4666              	.LBI242:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4667              		.loc 2 196 34 view .LVU1296
 4668              	.LBB243:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4669              		.loc 2 198 9 view .LVU1297
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4670              		.loc 2 200 9 view .LVU1298
 4671              		.syntax unified
 4672              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4673 00ae 4FF05003 			mov r3, #80												
 4674 00b2 83F31188 		msr basepri, r3											
 4675 00b6 BFF36F8F 		isb														
 4676 00ba BFF34F8F 		dsb														
 4677              	
 4678              	@ 0 "" 2
 4679              		.thumb
 4680              		.syntax unified
 4681              	.L320:
 4682              	.LBE243:
 4683              	.LBE242:
3252:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4684              		.loc 1 3252 5 discriminator 3 view .LVU1299
3252:ThirdParty/FreeRTOS/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
 4685              		.loc 1 3252 5 discriminator 3 view .LVU1300
 4686 00be FEE7     		b	.L320
 4687              	.LVL314:
 4688              	.L327:
 4689              	.LCFI37:
 4690              		.cfi_def_cfa_offset 8
 4691              		.cfi_offset 4, -8
 4692              		.cfi_offset 5, -4
 4693              	.LBB244:
3253:ThirdParty/FreeRTOS/tasks.c **** 
 4694              		.loc 1 3253 5 discriminator 1 view .LVU1301
 4695 00c0 8168     		ldr	r1, [r0, #8]
 4696 00c2 5960     		str	r1, [r3, #4]
 4697 00c4 B8E7     		b	.L321
 4698              	.LVL315:
 4699              	.L328:
3253:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 203


 4700              		.loc 1 3253 5 is_stmt 0 discriminator 1 view .LVU1302
 4701              	.LBE244:
 4702              	.LBB245:
3272:ThirdParty/FreeRTOS/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4703              		.loc 1 3272 5 is_stmt 1 discriminator 1 view .LVU1303
 4704 00c6 D168     		ldr	r1, [r2, #12]
 4705 00c8 5960     		str	r1, [r3, #4]
 4706 00ca C4E7     		b	.L322
 4707              	.L330:
 4708              		.align	2
 4709              	.L329:
 4710 00cc 00000000 		.word	uxSchedulerSuspended
 4711 00d0 00000000 		.word	uxTopReadyPriority
 4712 00d4 00000000 		.word	pxReadyTasksLists
 4713 00d8 00000000 		.word	pxCurrentTCB
 4714 00dc 00000000 		.word	xYieldPending
 4715              	.LBE245:
 4716              		.cfi_endproc
 4717              	.LFE32:
 4719              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4720              		.align	1
 4721              		.global	vTaskSetTimeOutState
 4722              		.syntax unified
 4723              		.thumb
 4724              		.thumb_func
 4726              	vTaskSetTimeOutState:
 4727              	.LVL316:
 4728              	.LFB33:
3287:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4729              		.loc 1 3287 1 view -0
 4730              		.cfi_startproc
 4731              		@ args = 0, pretend = 0, frame = 0
 4732              		@ frame_needed = 0, uses_anonymous_args = 0
3288:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4733              		.loc 1 3288 5 view .LVU1305
 4734 0000 60B1     		cbz	r0, .L336
3287:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTimeOut );
 4735              		.loc 1 3287 1 is_stmt 0 view .LVU1306
 4736 0002 10B5     		push	{r4, lr}
 4737              	.LCFI38:
 4738              		.cfi_def_cfa_offset 8
 4739              		.cfi_offset 4, -8
 4740              		.cfi_offset 14, -4
 4741 0004 0446     		mov	r4, r0
3288:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4742              		.loc 1 3288 30 is_stmt 1 discriminator 2 view .LVU1307
3289:ThirdParty/FreeRTOS/tasks.c ****     {
 4743              		.loc 1 3289 5 view .LVU1308
 4744 0006 FFF7FEFF 		bl	vPortEnterCritical
 4745              	.LVL317:
3291:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4746              		.loc 1 3291 9 view .LVU1309
3291:ThirdParty/FreeRTOS/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4747              		.loc 1 3291 35 is_stmt 0 view .LVU1310
 4748 000a 094B     		ldr	r3, .L337
 4749 000c 1B68     		ldr	r3, [r3]
 4750 000e 2360     		str	r3, [r4]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 204


3292:ThirdParty/FreeRTOS/tasks.c ****     }
 4751              		.loc 1 3292 9 is_stmt 1 view .LVU1311
3292:ThirdParty/FreeRTOS/tasks.c ****     }
 4752              		.loc 1 3292 36 is_stmt 0 view .LVU1312
 4753 0010 084B     		ldr	r3, .L337+4
 4754 0012 1B68     		ldr	r3, [r3]
 4755 0014 6360     		str	r3, [r4, #4]
3294:ThirdParty/FreeRTOS/tasks.c **** }
 4756              		.loc 1 3294 5 is_stmt 1 view .LVU1313
 4757 0016 FFF7FEFF 		bl	vPortExitCritical
 4758              	.LVL318:
3295:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4759              		.loc 1 3295 1 is_stmt 0 view .LVU1314
 4760 001a 10BD     		pop	{r4, pc}
 4761              	.LVL319:
 4762              	.L336:
 4763              	.LCFI39:
 4764              		.cfi_def_cfa_offset 0
 4765              		.cfi_restore 4
 4766              		.cfi_restore 14
3288:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4767              		.loc 1 3288 5 is_stmt 1 discriminator 1 view .LVU1315
 4768              	.LBB246:
 4769              	.LBI246:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4770              		.loc 2 196 34 view .LVU1316
 4771              	.LBB247:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4772              		.loc 2 198 9 view .LVU1317
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4773              		.loc 2 200 9 view .LVU1318
 4774              		.syntax unified
 4775              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4776 001c 4FF05003 			mov r3, #80												
 4777 0020 83F31188 		msr basepri, r3											
 4778 0024 BFF36F8F 		isb														
 4779 0028 BFF34F8F 		dsb														
 4780              	
 4781              	@ 0 "" 2
 4782              		.thumb
 4783              		.syntax unified
 4784              	.L333:
 4785              	.LBE247:
 4786              	.LBE246:
3288:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4787              		.loc 1 3288 5 discriminator 3 view .LVU1319
3288:ThirdParty/FreeRTOS/tasks.c ****     taskENTER_CRITICAL();
 4788              		.loc 1 3288 5 discriminator 3 view .LVU1320
 4789 002c FEE7     		b	.L333
 4790              	.L338:
 4791 002e 00BF     		.align	2
 4792              	.L337:
 4793 0030 00000000 		.word	xNumOfOverflows
 4794 0034 00000000 		.word	xTickCount
 4795              		.cfi_endproc
 4796              	.LFE33:
 4798              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 205


 4799              		.align	1
 4800              		.global	vTaskInternalSetTimeOutState
 4801              		.syntax unified
 4802              		.thumb
 4803              		.thumb_func
 4805              	vTaskInternalSetTimeOutState:
 4806              	.LVL320:
 4807              	.LFB34:
3299:ThirdParty/FreeRTOS/tasks.c ****     /* For internal use only as it does not use a critical section. */
 4808              		.loc 1 3299 1 view -0
 4809              		.cfi_startproc
 4810              		@ args = 0, pretend = 0, frame = 0
 4811              		@ frame_needed = 0, uses_anonymous_args = 0
 4812              		@ link register save eliminated.
3301:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4813              		.loc 1 3301 5 view .LVU1322
3301:ThirdParty/FreeRTOS/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4814              		.loc 1 3301 31 is_stmt 0 view .LVU1323
 4815 0000 034B     		ldr	r3, .L340
 4816 0002 1B68     		ldr	r3, [r3]
 4817 0004 0360     		str	r3, [r0]
3302:ThirdParty/FreeRTOS/tasks.c **** }
 4818              		.loc 1 3302 5 is_stmt 1 view .LVU1324
3302:ThirdParty/FreeRTOS/tasks.c **** }
 4819              		.loc 1 3302 32 is_stmt 0 view .LVU1325
 4820 0006 034B     		ldr	r3, .L340+4
 4821 0008 1B68     		ldr	r3, [r3]
 4822 000a 4360     		str	r3, [r0, #4]
3303:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4823              		.loc 1 3303 1 view .LVU1326
 4824 000c 7047     		bx	lr
 4825              	.L341:
 4826 000e 00BF     		.align	2
 4827              	.L340:
 4828 0010 00000000 		.word	xNumOfOverflows
 4829 0014 00000000 		.word	xTickCount
 4830              		.cfi_endproc
 4831              	.LFE34:
 4833              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4834              		.align	1
 4835              		.global	xTaskCheckForTimeOut
 4836              		.syntax unified
 4837              		.thumb
 4838              		.thumb_func
 4840              	xTaskCheckForTimeOut:
 4841              	.LVL321:
 4842              	.LFB35:
3308:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4843              		.loc 1 3308 1 is_stmt 1 view -0
 4844              		.cfi_startproc
 4845              		@ args = 0, pretend = 0, frame = 0
 4846              		@ frame_needed = 0, uses_anonymous_args = 0
3309:ThirdParty/FreeRTOS/tasks.c **** 
 4847              		.loc 1 3309 5 view .LVU1328
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4848              		.loc 1 3311 5 view .LVU1329
 4849 0000 C8B1     		cbz	r0, .L353
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 206


3308:ThirdParty/FreeRTOS/tasks.c ****     BaseType_t xReturn;
 4850              		.loc 1 3308 1 is_stmt 0 view .LVU1330
 4851 0002 70B5     		push	{r4, r5, r6, lr}
 4852              	.LCFI40:
 4853              		.cfi_def_cfa_offset 16
 4854              		.cfi_offset 4, -16
 4855              		.cfi_offset 5, -12
 4856              		.cfi_offset 6, -8
 4857              		.cfi_offset 14, -4
 4858 0004 0C46     		mov	r4, r1
 4859 0006 0546     		mov	r5, r0
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4860              		.loc 1 3311 30 is_stmt 1 discriminator 2 view .LVU1331
3312:ThirdParty/FreeRTOS/tasks.c **** 
 4861              		.loc 1 3312 5 view .LVU1332
 4862 0008 F1B1     		cbz	r1, .L354
3312:ThirdParty/FreeRTOS/tasks.c **** 
 4863              		.loc 1 3312 34 discriminator 2 view .LVU1333
3314:ThirdParty/FreeRTOS/tasks.c ****     {
 4864              		.loc 1 3314 5 view .LVU1334
 4865 000a FFF7FEFF 		bl	vPortEnterCritical
 4866              	.LVL322:
 4867              	.LBB248:
3317:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4868              		.loc 1 3317 9 view .LVU1335
3317:ThirdParty/FreeRTOS/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4869              		.loc 1 3317 26 is_stmt 0 view .LVU1336
 4870 000e 1C4B     		ldr	r3, .L356
 4871 0010 1968     		ldr	r1, [r3]
 4872              	.LVL323:
3318:ThirdParty/FreeRTOS/tasks.c **** 
 4873              		.loc 1 3318 9 is_stmt 1 view .LVU1337
3318:ThirdParty/FreeRTOS/tasks.c **** 
 4874              		.loc 1 3318 68 is_stmt 0 view .LVU1338
 4875 0012 6B68     		ldr	r3, [r5, #4]
3318:ThirdParty/FreeRTOS/tasks.c **** 
 4876              		.loc 1 3318 26 view .LVU1339
 4877 0014 C81A     		subs	r0, r1, r3
 4878              	.LVL324:
3332:ThirdParty/FreeRTOS/tasks.c ****             {
 4879              		.loc 1 3332 13 is_stmt 1 view .LVU1340
3332:ThirdParty/FreeRTOS/tasks.c ****             {
 4880              		.loc 1 3332 17 is_stmt 0 view .LVU1341
 4881 0016 2268     		ldr	r2, [r4]
3332:ThirdParty/FreeRTOS/tasks.c ****             {
 4882              		.loc 1 3332 15 view .LVU1342
 4883 0018 B2F1FF3F 		cmp	r2, #-1
 4884 001c 2BD0     		beq	.L350
3342:ThirdParty/FreeRTOS/tasks.c ****         {
 4885              		.loc 1 3342 9 is_stmt 1 view .LVU1343
3342:ThirdParty/FreeRTOS/tasks.c ****         {
 4886              		.loc 1 3342 31 is_stmt 0 view .LVU1344
 4887 001e 194E     		ldr	r6, .L356+4
 4888 0020 3668     		ldr	r6, [r6]
3342:ThirdParty/FreeRTOS/tasks.c ****         {
 4889              		.loc 1 3342 11 view .LVU1345
 4890 0022 D5F800C0 		ldr	ip, [r5]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 207


 4891 0026 B445     		cmp	ip, r6
 4892 0028 17D0     		beq	.L348
3342:ThirdParty/FreeRTOS/tasks.c ****         {
 4893              		.loc 1 3342 62 discriminator 1 view .LVU1346
 4894 002a 8B42     		cmp	r3, r1
 4895 002c 15D8     		bhi	.L348
3349:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4896              		.loc 1 3349 13 is_stmt 1 view .LVU1347
 4897              	.LVL325:
3350:ThirdParty/FreeRTOS/tasks.c ****         }
 4898              		.loc 1 3350 13 view .LVU1348
3350:ThirdParty/FreeRTOS/tasks.c ****         }
 4899              		.loc 1 3350 28 is_stmt 0 view .LVU1349
 4900 002e 0023     		movs	r3, #0
 4901 0030 2360     		str	r3, [r4]
3349:ThirdParty/FreeRTOS/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 4902              		.loc 1 3349 21 view .LVU1350
 4903 0032 0124     		movs	r4, #1
 4904              	.LVL326:
3350:ThirdParty/FreeRTOS/tasks.c ****         }
 4905              		.loc 1 3350 28 view .LVU1351
 4906 0034 20E0     		b	.L347
 4907              	.LVL327:
 4908              	.L353:
 4909              	.LCFI41:
 4910              		.cfi_def_cfa_offset 0
 4911              		.cfi_restore 4
 4912              		.cfi_restore 5
 4913              		.cfi_restore 6
 4914              		.cfi_restore 14
3350:ThirdParty/FreeRTOS/tasks.c ****         }
 4915              		.loc 1 3350 28 view .LVU1352
 4916              	.LBE248:
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4917              		.loc 1 3311 5 is_stmt 1 discriminator 1 view .LVU1353
 4918              	.LBB249:
 4919              	.LBI249:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4920              		.loc 2 196 34 view .LVU1354
 4921              	.LBB250:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4922              		.loc 2 198 9 view .LVU1355
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4923              		.loc 2 200 9 view .LVU1356
 4924              		.syntax unified
 4925              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4926 0036 4FF05003 			mov r3, #80												
 4927 003a 83F31188 		msr basepri, r3											
 4928 003e BFF36F8F 		isb														
 4929 0042 BFF34F8F 		dsb														
 4930              	
 4931              	@ 0 "" 2
 4932              		.thumb
 4933              		.syntax unified
 4934              	.L344:
 4935              	.LBE250:
 4936              	.LBE249:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 208


3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4937              		.loc 1 3311 5 discriminator 3 view .LVU1357
3311:ThirdParty/FreeRTOS/tasks.c ****     configASSERT( pxTicksToWait );
 4938              		.loc 1 3311 5 discriminator 3 view .LVU1358
 4939 0046 FEE7     		b	.L344
 4940              	.L354:
 4941              	.LCFI42:
 4942              		.cfi_def_cfa_offset 16
 4943              		.cfi_offset 4, -16
 4944              		.cfi_offset 5, -12
 4945              		.cfi_offset 6, -8
 4946              		.cfi_offset 14, -4
3312:ThirdParty/FreeRTOS/tasks.c **** 
 4947              		.loc 1 3312 5 discriminator 1 view .LVU1359
 4948              	.LBB251:
 4949              	.LBI251:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 4950              		.loc 2 196 34 view .LVU1360
 4951              	.LBB252:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 4952              		.loc 2 198 9 view .LVU1361
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 4953              		.loc 2 200 9 view .LVU1362
 4954              		.syntax unified
 4955              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 4956 0048 4FF05003 			mov r3, #80												
 4957 004c 83F31188 		msr basepri, r3											
 4958 0050 BFF36F8F 		isb														
 4959 0054 BFF34F8F 		dsb														
 4960              	
 4961              	@ 0 "" 2
 4962              		.thumb
 4963              		.syntax unified
 4964              	.L346:
 4965              	.LBE252:
 4966              	.LBE251:
3312:ThirdParty/FreeRTOS/tasks.c **** 
 4967              		.loc 1 3312 5 discriminator 3 view .LVU1363
3312:ThirdParty/FreeRTOS/tasks.c **** 
 4968              		.loc 1 3312 5 discriminator 3 view .LVU1364
 4969 0058 FEE7     		b	.L346
 4970              	.LVL328:
 4971              	.L348:
 4972              	.LBB253:
3352:ThirdParty/FreeRTOS/tasks.c ****         {
 4973              		.loc 1 3352 14 view .LVU1365
3352:ThirdParty/FreeRTOS/tasks.c ****         {
 4974              		.loc 1 3352 16 is_stmt 0 view .LVU1366
 4975 005a 8242     		cmp	r2, r0
 4976 005c 03D8     		bhi	.L355
3361:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4977              		.loc 1 3361 13 is_stmt 1 view .LVU1367
3361:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdTRUE;
 4978              		.loc 1 3361 28 is_stmt 0 view .LVU1368
 4979 005e 0023     		movs	r3, #0
 4980 0060 2360     		str	r3, [r4]
3362:ThirdParty/FreeRTOS/tasks.c ****         }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 209


 4981              		.loc 1 3362 13 is_stmt 1 view .LVU1369
 4982              	.LVL329:
3362:ThirdParty/FreeRTOS/tasks.c ****         }
 4983              		.loc 1 3362 21 is_stmt 0 view .LVU1370
 4984 0062 0124     		movs	r4, #1
 4985              	.LVL330:
3362:ThirdParty/FreeRTOS/tasks.c ****         }
 4986              		.loc 1 3362 21 view .LVU1371
 4987 0064 08E0     		b	.L347
 4988              	.LVL331:
 4989              	.L355:
3355:ThirdParty/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4990              		.loc 1 3355 13 is_stmt 1 view .LVU1372
3355:ThirdParty/FreeRTOS/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4991              		.loc 1 3355 28 is_stmt 0 view .LVU1373
 4992 0066 5B1A     		subs	r3, r3, r1
 4993 0068 1344     		add	r3, r3, r2
 4994 006a 2360     		str	r3, [r4]
3356:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4995              		.loc 1 3356 13 is_stmt 1 view .LVU1374
 4996 006c 2846     		mov	r0, r5
 4997              	.LVL332:
3356:ThirdParty/FreeRTOS/tasks.c ****             xReturn = pdFALSE;
 4998              		.loc 1 3356 13 is_stmt 0 view .LVU1375
 4999 006e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 5000              	.LVL333:
3357:ThirdParty/FreeRTOS/tasks.c ****         }
 5001              		.loc 1 3357 13 is_stmt 1 view .LVU1376
3357:ThirdParty/FreeRTOS/tasks.c ****         }
 5002              		.loc 1 3357 21 is_stmt 0 view .LVU1377
 5003 0072 0024     		movs	r4, #0
 5004              	.LVL334:
3357:ThirdParty/FreeRTOS/tasks.c ****         }
 5005              		.loc 1 3357 21 view .LVU1378
 5006 0074 00E0     		b	.L347
 5007              	.LVL335:
 5008              	.L350:
3337:ThirdParty/FreeRTOS/tasks.c ****             }
 5009              		.loc 1 3337 25 view .LVU1379
 5010 0076 0024     		movs	r4, #0
 5011              	.LVL336:
 5012              	.L347:
3337:ThirdParty/FreeRTOS/tasks.c ****             }
 5013              		.loc 1 3337 25 view .LVU1380
 5014              	.LBE253:
3365:ThirdParty/FreeRTOS/tasks.c **** 
 5015              		.loc 1 3365 5 is_stmt 1 view .LVU1381
 5016 0078 FFF7FEFF 		bl	vPortExitCritical
 5017              	.LVL337:
3367:ThirdParty/FreeRTOS/tasks.c **** }
 5018              		.loc 1 3367 5 view .LVU1382
3368:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5019              		.loc 1 3368 1 is_stmt 0 view .LVU1383
 5020 007c 2046     		mov	r0, r4
 5021 007e 70BD     		pop	{r4, r5, r6, pc}
 5022              	.LVL338:
 5023              	.L357:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 210


3368:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5024              		.loc 1 3368 1 view .LVU1384
 5025              		.align	2
 5026              	.L356:
 5027 0080 00000000 		.word	xTickCount
 5028 0084 00000000 		.word	xNumOfOverflows
 5029              		.cfi_endproc
 5030              	.LFE35:
 5032              		.section	.text.vTaskMissedYield,"ax",%progbits
 5033              		.align	1
 5034              		.global	vTaskMissedYield
 5035              		.syntax unified
 5036              		.thumb
 5037              		.thumb_func
 5039              	vTaskMissedYield:
 5040              	.LFB36:
3372:ThirdParty/FreeRTOS/tasks.c ****     xYieldPending = pdTRUE;
 5041              		.loc 1 3372 1 is_stmt 1 view -0
 5042              		.cfi_startproc
 5043              		@ args = 0, pretend = 0, frame = 0
 5044              		@ frame_needed = 0, uses_anonymous_args = 0
 5045              		@ link register save eliminated.
3373:ThirdParty/FreeRTOS/tasks.c **** }
 5046              		.loc 1 3373 5 view .LVU1386
3373:ThirdParty/FreeRTOS/tasks.c **** }
 5047              		.loc 1 3373 19 is_stmt 0 view .LVU1387
 5048 0000 014B     		ldr	r3, .L359
 5049 0002 0122     		movs	r2, #1
 5050 0004 1A60     		str	r2, [r3]
3374:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5051              		.loc 1 3374 1 view .LVU1388
 5052 0006 7047     		bx	lr
 5053              	.L360:
 5054              		.align	2
 5055              	.L359:
 5056 0008 00000000 		.word	xYieldPending
 5057              		.cfi_endproc
 5058              	.LFE36:
 5060              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5061              		.align	1
 5062              		.global	xTaskGetCurrentTaskHandle
 5063              		.syntax unified
 5064              		.thumb
 5065              		.thumb_func
 5067              	xTaskGetCurrentTaskHandle:
 5068              	.LFB42:
4023:ThirdParty/FreeRTOS/tasks.c ****         TaskHandle_t xReturn;
 5069              		.loc 1 4023 5 is_stmt 1 view -0
 5070              		.cfi_startproc
 5071              		@ args = 0, pretend = 0, frame = 0
 5072              		@ frame_needed = 0, uses_anonymous_args = 0
 5073              		@ link register save eliminated.
4024:ThirdParty/FreeRTOS/tasks.c **** 
 5074              		.loc 1 4024 9 view .LVU1390
4029:ThirdParty/FreeRTOS/tasks.c **** 
 5075              		.loc 1 4029 9 view .LVU1391
4029:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 211


 5076              		.loc 1 4029 17 is_stmt 0 view .LVU1392
 5077 0000 014B     		ldr	r3, .L362
 5078 0002 1868     		ldr	r0, [r3]
 5079              	.LVL339:
4031:ThirdParty/FreeRTOS/tasks.c ****     }
 5080              		.loc 1 4031 9 is_stmt 1 view .LVU1393
4032:ThirdParty/FreeRTOS/tasks.c **** 
 5081              		.loc 1 4032 5 is_stmt 0 view .LVU1394
 5082 0004 7047     		bx	lr
 5083              	.L363:
 5084 0006 00BF     		.align	2
 5085              	.L362:
 5086 0008 00000000 		.word	pxCurrentTCB
 5087              		.cfi_endproc
 5088              	.LFE42:
 5090              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5091              		.align	1
 5092              		.global	uxTaskResetEventItemValue
 5093              		.syntax unified
 5094              		.thumb
 5095              		.thumb_func
 5097              	uxTaskResetEventItemValue:
 5098              	.LFB43:
4659:ThirdParty/FreeRTOS/tasks.c ****     TickType_t uxReturn;
 5099              		.loc 1 4659 1 is_stmt 1 view -0
 5100              		.cfi_startproc
 5101              		@ args = 0, pretend = 0, frame = 0
 5102              		@ frame_needed = 0, uses_anonymous_args = 0
 5103              		@ link register save eliminated.
4660:ThirdParty/FreeRTOS/tasks.c **** 
 5104              		.loc 1 4660 5 view .LVU1396
4662:ThirdParty/FreeRTOS/tasks.c **** 
 5105              		.loc 1 4662 5 view .LVU1397
4662:ThirdParty/FreeRTOS/tasks.c **** 
 5106              		.loc 1 4662 16 is_stmt 0 view .LVU1398
 5107 0000 044A     		ldr	r2, .L365
 5108 0002 1368     		ldr	r3, [r2]
4662:ThirdParty/FreeRTOS/tasks.c **** 
 5109              		.loc 1 4662 14 view .LVU1399
 5110 0004 9869     		ldr	r0, [r3, #24]
 5111              	.LVL340:
4666:ThirdParty/FreeRTOS/tasks.c **** 
 5112              		.loc 1 4666 5 is_stmt 1 view .LVU1400
 5113 0006 1368     		ldr	r3, [r2]
 5114 0008 DB6A     		ldr	r3, [r3, #44]
 5115 000a 1268     		ldr	r2, [r2]
 5116 000c C3F10503 		rsb	r3, r3, #5
 5117 0010 9361     		str	r3, [r2, #24]
4668:ThirdParty/FreeRTOS/tasks.c **** }
 5118              		.loc 1 4668 5 view .LVU1401
4669:ThirdParty/FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 5119              		.loc 1 4669 1 is_stmt 0 view .LVU1402
 5120 0012 7047     		bx	lr
 5121              	.L366:
 5122              		.align	2
 5123              	.L365:
 5124 0014 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 212


 5125              		.cfi_endproc
 5126              	.LFE43:
 5128              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 5129              		.align	1
 5130              		.global	ulTaskGenericNotifyTake
 5131              		.syntax unified
 5132              		.thumb
 5133              		.thumb_func
 5135              	ulTaskGenericNotifyTake:
 5136              	.LVL341:
 5137              	.LFB44:
4694:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5138              		.loc 1 4694 5 is_stmt 1 view -0
 5139              		.cfi_startproc
 5140              		@ args = 0, pretend = 0, frame = 0
 5141              		@ frame_needed = 0, uses_anonymous_args = 0
4695:ThirdParty/FreeRTOS/tasks.c **** 
 5142              		.loc 1 4695 9 view .LVU1404
4697:ThirdParty/FreeRTOS/tasks.c **** 
 5143              		.loc 1 4697 9 view .LVU1405
 5144 0000 40B1     		cbz	r0, .L368
4697:ThirdParty/FreeRTOS/tasks.c **** 
 5145              		.loc 1 4697 9 discriminator 1 view .LVU1406
 5146              	.LBB254:
 5147              	.LBI254:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5148              		.loc 2 196 34 view .LVU1407
 5149              	.LBB255:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5150              		.loc 2 198 9 view .LVU1408
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5151              		.loc 2 200 9 view .LVU1409
 5152              		.syntax unified
 5153              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5154 0002 4FF05003 			mov r3, #80												
 5155 0006 83F31188 		msr basepri, r3											
 5156 000a BFF36F8F 		isb														
 5157 000e BFF34F8F 		dsb														
 5158              	
 5159              	@ 0 "" 2
 5160              		.thumb
 5161              		.syntax unified
 5162              	.L369:
 5163              	.LBE255:
 5164              	.LBE254:
4697:ThirdParty/FreeRTOS/tasks.c **** 
 5165              		.loc 1 4697 9 discriminator 3 view .LVU1410
4697:ThirdParty/FreeRTOS/tasks.c **** 
 5166              		.loc 1 4697 9 discriminator 3 view .LVU1411
 5167 0012 FEE7     		b	.L369
 5168              	.L368:
4694:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 5169              		.loc 1 4694 5 is_stmt 0 view .LVU1412
 5170 0014 70B5     		push	{r4, r5, r6, lr}
 5171              	.LCFI43:
 5172              		.cfi_def_cfa_offset 16
 5173              		.cfi_offset 4, -16
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 213


 5174              		.cfi_offset 5, -12
 5175              		.cfi_offset 6, -8
 5176              		.cfi_offset 14, -4
 5177 0016 0D46     		mov	r5, r1
 5178 0018 1446     		mov	r4, r2
 5179 001a 0646     		mov	r6, r0
4697:ThirdParty/FreeRTOS/tasks.c **** 
 5180              		.loc 1 4697 78 is_stmt 1 discriminator 2 view .LVU1413
4699:ThirdParty/FreeRTOS/tasks.c ****         {
 5181              		.loc 1 4699 9 view .LVU1414
 5182 001c FFF7FEFF 		bl	vPortEnterCritical
 5183              	.LVL342:
4702:ThirdParty/FreeRTOS/tasks.c ****             {
 5184              		.loc 1 4702 13 view .LVU1415
4702:ThirdParty/FreeRTOS/tasks.c ****             {
 5185              		.loc 1 4702 29 is_stmt 0 view .LVU1416
 5186 0020 204B     		ldr	r3, .L376
 5187 0022 1B68     		ldr	r3, [r3]
4702:ThirdParty/FreeRTOS/tasks.c ****             {
 5188              		.loc 1 4702 46 view .LVU1417
 5189 0024 06F11002 		add	r2, r6, #16
 5190 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
4702:ThirdParty/FreeRTOS/tasks.c ****             {
 5191              		.loc 1 4702 15 view .LVU1418
 5192 002c 33B9     		cbnz	r3, .L370
4705:ThirdParty/FreeRTOS/tasks.c **** 
 5193              		.loc 1 4705 17 is_stmt 1 view .LVU1419
4705:ThirdParty/FreeRTOS/tasks.c **** 
 5194              		.loc 1 4705 29 is_stmt 0 view .LVU1420
 5195 002e 1D4B     		ldr	r3, .L376
 5196 0030 1B68     		ldr	r3, [r3]
4705:ThirdParty/FreeRTOS/tasks.c **** 
 5197              		.loc 1 4705 62 view .LVU1421
 5198 0032 3344     		add	r3, r3, r6
 5199 0034 0122     		movs	r2, #1
 5200 0036 83F84420 		strb	r2, [r3, #68]
4707:ThirdParty/FreeRTOS/tasks.c ****                 {
 5201              		.loc 1 4707 17 is_stmt 1 view .LVU1422
4707:ThirdParty/FreeRTOS/tasks.c ****                 {
 5202              		.loc 1 4707 19 is_stmt 0 view .LVU1423
 5203 003a E4B9     		cbnz	r4, .L375
 5204              	.L370:
4725:ThirdParty/FreeRTOS/tasks.c ****             }
 5205              		.loc 1 4725 41 is_stmt 1 view .LVU1424
4728:ThirdParty/FreeRTOS/tasks.c **** 
 5206              		.loc 1 4728 9 view .LVU1425
 5207 003c FFF7FEFF 		bl	vPortExitCritical
 5208              	.LVL343:
4730:ThirdParty/FreeRTOS/tasks.c ****         {
 5209              		.loc 1 4730 9 view .LVU1426
 5210 0040 FFF7FEFF 		bl	vPortEnterCritical
 5211              	.LVL344:
4732:ThirdParty/FreeRTOS/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 5212              		.loc 1 4732 51 view .LVU1427
4733:ThirdParty/FreeRTOS/tasks.c **** 
 5213              		.loc 1 4733 13 view .LVU1428
4733:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 214


 5214              		.loc 1 4733 36 is_stmt 0 view .LVU1429
 5215 0044 174B     		ldr	r3, .L376
 5216 0046 1B68     		ldr	r3, [r3]
4733:ThirdParty/FreeRTOS/tasks.c **** 
 5217              		.loc 1 4733 22 view .LVU1430
 5218 0048 06F11002 		add	r2, r6, #16
 5219 004c 53F82240 		ldr	r4, [r3, r2, lsl #2]
 5220              	.LVL345:
4735:ThirdParty/FreeRTOS/tasks.c ****             {
 5221              		.loc 1 4735 13 is_stmt 1 view .LVU1431
4735:ThirdParty/FreeRTOS/tasks.c ****             {
 5222              		.loc 1 4735 15 is_stmt 0 view .LVU1432
 5223 0050 3CB1     		cbz	r4, .L371
4737:ThirdParty/FreeRTOS/tasks.c ****                 {
 5224              		.loc 1 4737 17 is_stmt 1 view .LVU1433
4737:ThirdParty/FreeRTOS/tasks.c ****                 {
 5225              		.loc 1 4737 19 is_stmt 0 view .LVU1434
 5226 0052 FDB1     		cbz	r5, .L372
4739:ThirdParty/FreeRTOS/tasks.c ****                 }
 5227              		.loc 1 4739 21 is_stmt 1 view .LVU1435
4739:ThirdParty/FreeRTOS/tasks.c ****                 }
 5228              		.loc 1 4739 33 is_stmt 0 view .LVU1436
 5229 0054 134B     		ldr	r3, .L376
 5230 0056 1A68     		ldr	r2, [r3]
4739:ThirdParty/FreeRTOS/tasks.c ****                 }
 5231              		.loc 1 4739 68 view .LVU1437
 5232 0058 06F11003 		add	r3, r6, #16
 5233 005c 0021     		movs	r1, #0
 5234 005e 42F82310 		str	r1, [r2, r3, lsl #2]
 5235              	.L371:
4748:ThirdParty/FreeRTOS/tasks.c ****             }
 5236              		.loc 1 4748 41 is_stmt 1 view .LVU1438
4751:ThirdParty/FreeRTOS/tasks.c ****         }
 5237              		.loc 1 4751 13 view .LVU1439
4751:ThirdParty/FreeRTOS/tasks.c ****         }
 5238              		.loc 1 4751 25 is_stmt 0 view .LVU1440
 5239 0062 104B     		ldr	r3, .L376
 5240 0064 1B68     		ldr	r3, [r3]
4751:ThirdParty/FreeRTOS/tasks.c ****         }
 5241              		.loc 1 4751 58 view .LVU1441
 5242 0066 3344     		add	r3, r3, r6
 5243 0068 0022     		movs	r2, #0
 5244 006a 83F84420 		strb	r2, [r3, #68]
4753:ThirdParty/FreeRTOS/tasks.c **** 
 5245              		.loc 1 4753 9 is_stmt 1 view .LVU1442
 5246 006e FFF7FEFF 		bl	vPortExitCritical
 5247              	.LVL346:
4755:ThirdParty/FreeRTOS/tasks.c ****     }
 5248              		.loc 1 4755 9 view .LVU1443
4756:ThirdParty/FreeRTOS/tasks.c **** 
 5249              		.loc 1 4756 5 is_stmt 0 view .LVU1444
 5250 0072 2046     		mov	r0, r4
 5251 0074 70BD     		pop	{r4, r5, r6, pc}
 5252              	.LVL347:
 5253              	.L375:
4709:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 5254              		.loc 1 4709 21 is_stmt 1 view .LVU1445
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 215


 5255 0076 1146     		mov	r1, r2
 5256 0078 2046     		mov	r0, r4
 5257 007a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5258              	.LVL348:
4710:ThirdParty/FreeRTOS/tasks.c **** 
 5259              		.loc 1 4710 65 view .LVU1446
4716:ThirdParty/FreeRTOS/tasks.c ****                 }
 5260              		.loc 1 4716 21 view .LVU1447
 5261 007e 4FF0E023 		mov	r3, #-536813568
 5262 0082 4FF08052 		mov	r2, #268435456
 5263 0086 C3F8042D 		str	r2, [r3, #3332]
4716:ThirdParty/FreeRTOS/tasks.c ****                 }
 5264              		.loc 1 4716 21 view .LVU1448
 5265              		.syntax unified
 5266              	@ 4716 "ThirdParty/FreeRTOS/tasks.c" 1
 5267 008a BFF34F8F 		dsb
 5268              	@ 0 "" 2
4716:ThirdParty/FreeRTOS/tasks.c ****                 }
 5269              		.loc 1 4716 21 view .LVU1449
 5270              	@ 4716 "ThirdParty/FreeRTOS/tasks.c" 1
 5271 008e BFF36F8F 		isb
 5272              	@ 0 "" 2
4716:ThirdParty/FreeRTOS/tasks.c ****                 }
 5273              		.loc 1 4716 43 view .LVU1450
 5274              		.thumb
 5275              		.syntax unified
 5276 0092 D3E7     		b	.L370
 5277              	.LVL349:
 5278              	.L372:
4743:ThirdParty/FreeRTOS/tasks.c ****                 }
 5279              		.loc 1 4743 21 view .LVU1451
4743:ThirdParty/FreeRTOS/tasks.c ****                 }
 5280              		.loc 1 4743 33 is_stmt 0 view .LVU1452
 5281 0094 034B     		ldr	r3, .L376
 5282 0096 1A68     		ldr	r2, [r3]
4743:ThirdParty/FreeRTOS/tasks.c ****                 }
 5283              		.loc 1 4743 79 view .LVU1453
 5284 0098 631E     		subs	r3, r4, #1
4743:ThirdParty/FreeRTOS/tasks.c ****                 }
 5285              		.loc 1 4743 68 view .LVU1454
 5286 009a 06F11001 		add	r1, r6, #16
 5287 009e 42F82130 		str	r3, [r2, r1, lsl #2]
 5288 00a2 DEE7     		b	.L371
 5289              	.L377:
 5290              		.align	2
 5291              	.L376:
 5292 00a4 00000000 		.word	pxCurrentTCB
 5293              		.cfi_endproc
 5294              	.LFE44:
 5296              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 5297              		.align	1
 5298              		.global	xTaskGenericNotifyWait
 5299              		.syntax unified
 5300              		.thumb
 5301              		.thumb_func
 5303              	xTaskGenericNotifyWait:
 5304              	.LVL350:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 216


 5305              	.LFB45:
4768:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5306              		.loc 1 4768 5 is_stmt 1 view -0
 5307              		.cfi_startproc
 5308              		@ args = 4, pretend = 0, frame = 0
 5309              		@ frame_needed = 0, uses_anonymous_args = 0
4768:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 5310              		.loc 1 4768 5 is_stmt 0 view .LVU1456
 5311 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5312              	.LCFI44:
 5313              		.cfi_def_cfa_offset 24
 5314              		.cfi_offset 3, -24
 5315              		.cfi_offset 4, -20
 5316              		.cfi_offset 5, -16
 5317              		.cfi_offset 6, -12
 5318              		.cfi_offset 7, -8
 5319              		.cfi_offset 14, -4
4769:ThirdParty/FreeRTOS/tasks.c **** 
 5320              		.loc 1 4769 9 is_stmt 1 view .LVU1457
4771:ThirdParty/FreeRTOS/tasks.c **** 
 5321              		.loc 1 4771 9 view .LVU1458
 5322 0002 40B1     		cbz	r0, .L379
4771:ThirdParty/FreeRTOS/tasks.c **** 
 5323              		.loc 1 4771 9 discriminator 1 view .LVU1459
 5324              	.LBB256:
 5325              	.LBI256:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5326              		.loc 2 196 34 view .LVU1460
 5327              	.LBB257:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5328              		.loc 2 198 9 view .LVU1461
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5329              		.loc 2 200 9 view .LVU1462
 5330              		.syntax unified
 5331              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5332 0004 4FF05003 			mov r3, #80												
 5333 0008 83F31188 		msr basepri, r3											
 5334 000c BFF36F8F 		isb														
 5335 0010 BFF34F8F 		dsb														
 5336              	
 5337              	@ 0 "" 2
 5338              	.LVL351:
 5339              		.thumb
 5340              		.syntax unified
 5341              	.L380:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5342              		.loc 2 200 9 is_stmt 0 view .LVU1463
 5343              	.LBE257:
 5344              	.LBE256:
4771:ThirdParty/FreeRTOS/tasks.c **** 
 5345              		.loc 1 4771 9 is_stmt 1 discriminator 3 view .LVU1464
4771:ThirdParty/FreeRTOS/tasks.c **** 
 5346              		.loc 1 4771 9 discriminator 3 view .LVU1465
 5347 0014 FEE7     		b	.L380
 5348              	.LVL352:
 5349              	.L379:
4771:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 217


 5350              		.loc 1 4771 9 is_stmt 0 discriminator 3 view .LVU1466
 5351 0016 0D46     		mov	r5, r1
 5352 0018 1646     		mov	r6, r2
 5353 001a 1C46     		mov	r4, r3
 5354 001c 0746     		mov	r7, r0
4771:ThirdParty/FreeRTOS/tasks.c **** 
 5355              		.loc 1 4771 78 is_stmt 1 discriminator 2 view .LVU1467
4773:ThirdParty/FreeRTOS/tasks.c ****         {
 5356              		.loc 1 4773 9 view .LVU1468
 5357 001e FFF7FEFF 		bl	vPortEnterCritical
 5358              	.LVL353:
4776:ThirdParty/FreeRTOS/tasks.c ****             {
 5359              		.loc 1 4776 13 view .LVU1469
4776:ThirdParty/FreeRTOS/tasks.c ****             {
 5360              		.loc 1 4776 29 is_stmt 0 view .LVU1470
 5361 0022 294B     		ldr	r3, .L388
 5362 0024 1B68     		ldr	r3, [r3]
4776:ThirdParty/FreeRTOS/tasks.c ****             {
 5363              		.loc 1 4776 44 view .LVU1471
 5364 0026 3B44     		add	r3, r3, r7
 5365 0028 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 5366 002c DBB2     		uxtb	r3, r3
4776:ThirdParty/FreeRTOS/tasks.c ****             {
 5367              		.loc 1 4776 15 view .LVU1472
 5368 002e 022B     		cmp	r3, #2
 5369 0030 10D0     		beq	.L381
4781:ThirdParty/FreeRTOS/tasks.c **** 
 5370              		.loc 1 4781 17 is_stmt 1 view .LVU1473
4781:ThirdParty/FreeRTOS/tasks.c **** 
 5371              		.loc 1 4781 29 is_stmt 0 view .LVU1474
 5372 0032 254A     		ldr	r2, .L388
 5373 0034 1168     		ldr	r1, [r2]
4781:ThirdParty/FreeRTOS/tasks.c **** 
 5374              		.loc 1 4781 46 view .LVU1475
 5375 0036 07F11000 		add	r0, r7, #16
 5376 003a 51F82030 		ldr	r3, [r1, r0, lsl #2]
4781:ThirdParty/FreeRTOS/tasks.c **** 
 5377              		.loc 1 4781 64 view .LVU1476
 5378 003e 23EA0503 		bic	r3, r3, r5
 5379 0042 41F82030 		str	r3, [r1, r0, lsl #2]
4784:ThirdParty/FreeRTOS/tasks.c **** 
 5380              		.loc 1 4784 17 is_stmt 1 view .LVU1477
4784:ThirdParty/FreeRTOS/tasks.c **** 
 5381              		.loc 1 4784 29 is_stmt 0 view .LVU1478
 5382 0046 1368     		ldr	r3, [r2]
4784:ThirdParty/FreeRTOS/tasks.c **** 
 5383              		.loc 1 4784 62 view .LVU1479
 5384 0048 3B44     		add	r3, r3, r7
 5385 004a 0122     		movs	r2, #1
 5386 004c 83F84420 		strb	r2, [r3, #68]
4786:ThirdParty/FreeRTOS/tasks.c ****                 {
 5387              		.loc 1 4786 17 is_stmt 1 view .LVU1480
4786:ThirdParty/FreeRTOS/tasks.c ****                 {
 5388              		.loc 1 4786 19 is_stmt 0 view .LVU1481
 5389 0050 069B     		ldr	r3, [sp, #24]
 5390 0052 F3B9     		cbnz	r3, .L386
 5391              	.LVL354:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 218


 5392              	.L381:
4804:ThirdParty/FreeRTOS/tasks.c ****             }
 5393              		.loc 1 4804 41 is_stmt 1 view .LVU1482
4807:ThirdParty/FreeRTOS/tasks.c **** 
 5394              		.loc 1 4807 9 view .LVU1483
 5395 0054 FFF7FEFF 		bl	vPortExitCritical
 5396              	.LVL355:
4809:ThirdParty/FreeRTOS/tasks.c ****         {
 5397              		.loc 1 4809 9 view .LVU1484
 5398 0058 FFF7FEFF 		bl	vPortEnterCritical
 5399              	.LVL356:
4811:ThirdParty/FreeRTOS/tasks.c **** 
 5400              		.loc 1 4811 51 view .LVU1485
4813:ThirdParty/FreeRTOS/tasks.c ****             {
 5401              		.loc 1 4813 13 view .LVU1486
4813:ThirdParty/FreeRTOS/tasks.c ****             {
 5402              		.loc 1 4813 15 is_stmt 0 view .LVU1487
 5403 005c 34B1     		cbz	r4, .L382
4817:ThirdParty/FreeRTOS/tasks.c ****             }
 5404              		.loc 1 4817 17 is_stmt 1 view .LVU1488
4817:ThirdParty/FreeRTOS/tasks.c ****             }
 5405              		.loc 1 4817 53 is_stmt 0 view .LVU1489
 5406 005e 1A4B     		ldr	r3, .L388
 5407 0060 1B68     		ldr	r3, [r3]
4817:ThirdParty/FreeRTOS/tasks.c ****             }
 5408              		.loc 1 4817 70 view .LVU1490
 5409 0062 07F11002 		add	r2, r7, #16
 5410 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
4817:ThirdParty/FreeRTOS/tasks.c ****             }
 5411              		.loc 1 4817 39 view .LVU1491
 5412 006a 2360     		str	r3, [r4]
 5413              	.L382:
4824:ThirdParty/FreeRTOS/tasks.c ****             {
 5414              		.loc 1 4824 13 is_stmt 1 view .LVU1492
4824:ThirdParty/FreeRTOS/tasks.c ****             {
 5415              		.loc 1 4824 29 is_stmt 0 view .LVU1493
 5416 006c 164B     		ldr	r3, .L388
 5417 006e 1B68     		ldr	r3, [r3]
4824:ThirdParty/FreeRTOS/tasks.c ****             {
 5418              		.loc 1 4824 44 view .LVU1494
 5419 0070 3B44     		add	r3, r3, r7
 5420 0072 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 5421 0076 DBB2     		uxtb	r3, r3
4824:ThirdParty/FreeRTOS/tasks.c ****             {
 5422              		.loc 1 4824 15 view .LVU1495
 5423 0078 022B     		cmp	r3, #2
 5424 007a 19D0     		beq	.L387
4827:ThirdParty/FreeRTOS/tasks.c ****             }
 5425              		.loc 1 4827 25 view .LVU1496
 5426 007c 0024     		movs	r4, #0
 5427              	.LVL357:
 5428              	.L383:
4837:ThirdParty/FreeRTOS/tasks.c ****         }
 5429              		.loc 1 4837 13 is_stmt 1 view .LVU1497
4837:ThirdParty/FreeRTOS/tasks.c ****         }
 5430              		.loc 1 4837 25 is_stmt 0 view .LVU1498
 5431 007e 124B     		ldr	r3, .L388
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 219


 5432 0080 1B68     		ldr	r3, [r3]
4837:ThirdParty/FreeRTOS/tasks.c ****         }
 5433              		.loc 1 4837 58 view .LVU1499
 5434 0082 3B44     		add	r3, r3, r7
 5435 0084 0022     		movs	r2, #0
 5436 0086 83F84420 		strb	r2, [r3, #68]
4839:ThirdParty/FreeRTOS/tasks.c **** 
 5437              		.loc 1 4839 9 is_stmt 1 view .LVU1500
 5438 008a FFF7FEFF 		bl	vPortExitCritical
 5439              	.LVL358:
4841:ThirdParty/FreeRTOS/tasks.c ****     }
 5440              		.loc 1 4841 9 view .LVU1501
4842:ThirdParty/FreeRTOS/tasks.c **** 
 5441              		.loc 1 4842 5 is_stmt 0 view .LVU1502
 5442 008e 2046     		mov	r0, r4
 5443 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5444              	.LVL359:
 5445              	.L386:
4788:ThirdParty/FreeRTOS/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 5446              		.loc 1 4788 21 is_stmt 1 view .LVU1503
 5447 0092 1146     		mov	r1, r2
 5448 0094 1846     		mov	r0, r3
 5449 0096 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5450              	.LVL360:
4789:ThirdParty/FreeRTOS/tasks.c **** 
 5451              		.loc 1 4789 65 view .LVU1504
4795:ThirdParty/FreeRTOS/tasks.c ****                 }
 5452              		.loc 1 4795 21 view .LVU1505
 5453 009a 4FF0E023 		mov	r3, #-536813568
 5454 009e 4FF08052 		mov	r2, #268435456
 5455 00a2 C3F8042D 		str	r2, [r3, #3332]
 5456              	.LVL361:
4795:ThirdParty/FreeRTOS/tasks.c ****                 }
 5457              		.loc 1 4795 21 view .LVU1506
 5458              		.syntax unified
 5459              	@ 4795 "ThirdParty/FreeRTOS/tasks.c" 1
 5460 00a6 BFF34F8F 		dsb
 5461              	@ 0 "" 2
4795:ThirdParty/FreeRTOS/tasks.c ****                 }
 5462              		.loc 1 4795 21 view .LVU1507
 5463              	@ 4795 "ThirdParty/FreeRTOS/tasks.c" 1
 5464 00aa BFF36F8F 		isb
 5465              	@ 0 "" 2
4795:ThirdParty/FreeRTOS/tasks.c ****                 }
 5466              		.loc 1 4795 43 view .LVU1508
 5467              		.thumb
 5468              		.syntax unified
 5469 00ae D1E7     		b	.L381
 5470              	.L387:
4833:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5471              		.loc 1 4833 17 view .LVU1509
4833:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5472              		.loc 1 4833 29 is_stmt 0 view .LVU1510
 5473 00b0 054B     		ldr	r3, .L388
 5474 00b2 1A68     		ldr	r2, [r3]
4833:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5475              		.loc 1 4833 46 view .LVU1511
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 220


 5476 00b4 07F11001 		add	r1, r7, #16
 5477 00b8 52F82130 		ldr	r3, [r2, r1, lsl #2]
4833:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdTRUE;
 5478              		.loc 1 4833 64 view .LVU1512
 5479 00bc 23EA0603 		bic	r3, r3, r6
 5480 00c0 42F82130 		str	r3, [r2, r1, lsl #2]
4834:ThirdParty/FreeRTOS/tasks.c ****             }
 5481              		.loc 1 4834 17 is_stmt 1 view .LVU1513
 5482              	.LVL362:
4834:ThirdParty/FreeRTOS/tasks.c ****             }
 5483              		.loc 1 4834 25 is_stmt 0 view .LVU1514
 5484 00c4 0124     		movs	r4, #1
 5485              	.LVL363:
4834:ThirdParty/FreeRTOS/tasks.c ****             }
 5486              		.loc 1 4834 25 view .LVU1515
 5487 00c6 DAE7     		b	.L383
 5488              	.L389:
 5489              		.align	2
 5490              	.L388:
 5491 00c8 00000000 		.word	pxCurrentTCB
 5492              		.cfi_endproc
 5493              	.LFE45:
 5495              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5496              		.align	1
 5497              		.global	xTaskGenericNotify
 5498              		.syntax unified
 5499              		.thumb
 5500              		.thumb_func
 5502              	xTaskGenericNotify:
 5503              	.LVL364:
 5504              	.LFB46:
4854:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5505              		.loc 1 4854 5 is_stmt 1 view -0
 5506              		.cfi_startproc
 5507              		@ args = 4, pretend = 0, frame = 0
 5508              		@ frame_needed = 0, uses_anonymous_args = 0
4854:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5509              		.loc 1 4854 5 is_stmt 0 view .LVU1517
 5510 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5511              	.LCFI45:
 5512              		.cfi_def_cfa_offset 24
 5513              		.cfi_offset 3, -24
 5514              		.cfi_offset 4, -20
 5515              		.cfi_offset 5, -16
 5516              		.cfi_offset 6, -12
 5517              		.cfi_offset 7, -8
 5518              		.cfi_offset 14, -4
4855:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 5519              		.loc 1 4855 9 is_stmt 1 view .LVU1518
4856:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5520              		.loc 1 4856 9 view .LVU1519
 5521              	.LVL365:
4857:ThirdParty/FreeRTOS/tasks.c **** 
 5522              		.loc 1 4857 9 view .LVU1520
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5523              		.loc 1 4859 9 view .LVU1521
 5524 0002 41B1     		cbz	r1, .L391
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 221


4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5525              		.loc 1 4859 9 discriminator 1 view .LVU1522
 5526              	.LBB258:
 5527              	.LBI258:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5528              		.loc 2 196 34 view .LVU1523
 5529              	.LBB259:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5530              		.loc 2 198 9 view .LVU1524
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5531              		.loc 2 200 9 view .LVU1525
 5532              		.syntax unified
 5533              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5534 0004 4FF05003 			mov r3, #80												
 5535 0008 83F31188 		msr basepri, r3											
 5536 000c BFF36F8F 		isb														
 5537 0010 BFF34F8F 		dsb														
 5538              	
 5539              	@ 0 "" 2
 5540              	.LVL366:
 5541              		.thumb
 5542              		.syntax unified
 5543              	.L392:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5544              		.loc 2 200 9 is_stmt 0 view .LVU1526
 5545              	.LBE259:
 5546              	.LBE258:
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5547              		.loc 1 4859 9 is_stmt 1 discriminator 3 view .LVU1527
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5548              		.loc 1 4859 9 discriminator 3 view .LVU1528
 5549 0014 FEE7     		b	.L392
 5550              	.LVL367:
 5551              	.L391:
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5552              		.loc 1 4859 9 is_stmt 0 discriminator 3 view .LVU1529
 5553 0016 0446     		mov	r4, r0
 5554 0018 1746     		mov	r7, r2
 5555 001a 1E46     		mov	r6, r3
 5556 001c 0D46     		mov	r5, r1
4859:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( xTaskToNotify );
 5557              		.loc 1 4859 80 is_stmt 1 discriminator 2 view .LVU1530
4860:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5558              		.loc 1 4860 9 view .LVU1531
 5559 001e B8B1     		cbz	r0, .L413
4860:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5560              		.loc 1 4860 38 discriminator 2 view .LVU1532
4861:ThirdParty/FreeRTOS/tasks.c **** 
 5561              		.loc 1 4861 9 view .LVU1533
 5562              	.LVL368:
4863:ThirdParty/FreeRTOS/tasks.c ****         {
 5563              		.loc 1 4863 9 view .LVU1534
 5564 0020 FFF7FEFF 		bl	vPortEnterCritical
 5565              	.LVL369:
4865:ThirdParty/FreeRTOS/tasks.c ****             {
 5566              		.loc 1 4865 13 view .LVU1535
4865:ThirdParty/FreeRTOS/tasks.c ****             {
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 222


 5567              		.loc 1 4865 15 is_stmt 0 view .LVU1536
 5568 0024 069B     		ldr	r3, [sp, #24]
 5569 0026 2BB1     		cbz	r3, .L395
4867:ThirdParty/FreeRTOS/tasks.c ****             }
 5570              		.loc 1 4867 17 is_stmt 1 view .LVU1537
4867:ThirdParty/FreeRTOS/tasks.c ****             }
 5571              		.loc 1 4867 71 is_stmt 0 view .LVU1538
 5572 0028 05F11003 		add	r3, r5, #16
 5573 002c 54F82330 		ldr	r3, [r4, r3, lsl #2]
4867:ThirdParty/FreeRTOS/tasks.c ****             }
 5574              		.loc 1 4867 47 view .LVU1539
 5575 0030 069A     		ldr	r2, [sp, #24]
 5576 0032 1360     		str	r3, [r2]
 5577              	.L395:
4870:ThirdParty/FreeRTOS/tasks.c **** 
 5578              		.loc 1 4870 13 is_stmt 1 view .LVU1540
4870:ThirdParty/FreeRTOS/tasks.c **** 
 5579              		.loc 1 4870 35 is_stmt 0 view .LVU1541
 5580 0034 6219     		adds	r2, r4, r5
 5581 0036 92F84430 		ldrb	r3, [r2, #68]	@ zero_extendqisi2
 5582 003a DBB2     		uxtb	r3, r3
 5583              	.LVL370:
4872:ThirdParty/FreeRTOS/tasks.c **** 
 5584              		.loc 1 4872 13 is_stmt 1 view .LVU1542
4872:ThirdParty/FreeRTOS/tasks.c **** 
 5585              		.loc 1 4872 53 is_stmt 0 view .LVU1543
 5586 003c 0221     		movs	r1, #2
 5587 003e 82F84410 		strb	r1, [r2, #68]
4874:ThirdParty/FreeRTOS/tasks.c ****             {
 5588              		.loc 1 4874 13 is_stmt 1 view .LVU1544
 5589 0042 042E     		cmp	r6, #4
 5590 0044 2BD8     		bhi	.L396
 5591 0046 DFE806F0 		tbb	[pc, r6]
 5592              	.L398:
 5593 004a 12       		.byte	(.L402-.L398)/2
 5594 004b 0C       		.byte	(.L401-.L398)/2
 5595 004c 19       		.byte	(.L400-.L398)/2
 5596 004d 20       		.byte	(.L399-.L398)/2
 5597 004e 24       		.byte	(.L397-.L398)/2
 5598              	.LVL371:
 5599 004f 00       		.p2align 1
 5600              	.L413:
4860:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5601              		.loc 1 4860 9 discriminator 1 view .LVU1545
 5602              	.LBB260:
 5603              	.LBI260:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5604              		.loc 2 196 34 view .LVU1546
 5605              	.LBB261:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5606              		.loc 2 198 9 view .LVU1547
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5607              		.loc 2 200 9 view .LVU1548
 5608              		.syntax unified
 5609              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5610 0050 4FF05003 			mov r3, #80												
 5611 0054 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 223


 5612 0058 BFF36F8F 		isb														
 5613 005c BFF34F8F 		dsb														
 5614              	
 5615              	@ 0 "" 2
 5616              	.LVL372:
 5617              		.thumb
 5618              		.syntax unified
 5619              	.L394:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5620              		.loc 2 200 9 is_stmt 0 view .LVU1549
 5621              	.LBE261:
 5622              	.LBE260:
4860:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5623              		.loc 1 4860 9 is_stmt 1 discriminator 3 view .LVU1550
4860:ThirdParty/FreeRTOS/tasks.c ****         pxTCB = xTaskToNotify;
 5624              		.loc 1 4860 9 discriminator 3 view .LVU1551
 5625 0060 FEE7     		b	.L394
 5626              	.LVL373:
 5627              	.L401:
4877:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5628              		.loc 1 4877 21 view .LVU1552
4877:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5629              		.loc 1 4877 43 is_stmt 0 view .LVU1553
 5630 0062 1035     		adds	r5, r5, #16
 5631              	.LVL374:
4877:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5632              		.loc 1 4877 43 view .LVU1554
 5633 0064 54F82520 		ldr	r2, [r4, r5, lsl #2]
4877:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5634              		.loc 1 4877 63 view .LVU1555
 5635 0068 3A43     		orrs	r2, r2, r7
 5636 006a 44F82520 		str	r2, [r4, r5, lsl #2]
4878:ThirdParty/FreeRTOS/tasks.c **** 
 5637              		.loc 1 4878 21 is_stmt 1 view .LVU1556
 5638              	.LVL375:
 5639              	.L402:
4918:ThirdParty/FreeRTOS/tasks.c **** 
 5640              		.loc 1 4918 48 view .LVU1557
4922:ThirdParty/FreeRTOS/tasks.c ****             {
 5641              		.loc 1 4922 13 view .LVU1558
4922:ThirdParty/FreeRTOS/tasks.c ****             {
 5642              		.loc 1 4922 15 is_stmt 0 view .LVU1559
 5643 006e 012B     		cmp	r3, #1
 5644 0070 22D0     		beq	.L414
 5645 0072 0124     		movs	r4, #1
 5646              	.LVL376:
 5647              	.L403:
4959:ThirdParty/FreeRTOS/tasks.c ****             }
 5648              		.loc 1 4959 41 is_stmt 1 view .LVU1560
4962:ThirdParty/FreeRTOS/tasks.c **** 
 5649              		.loc 1 4962 9 view .LVU1561
 5650 0074 FFF7FEFF 		bl	vPortExitCritical
 5651              	.LVL377:
4964:ThirdParty/FreeRTOS/tasks.c ****     }
 5652              		.loc 1 4964 9 view .LVU1562
4965:ThirdParty/FreeRTOS/tasks.c **** 
 5653              		.loc 1 4965 5 is_stmt 0 view .LVU1563
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 224


 5654 0078 2046     		mov	r0, r4
 5655 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5656              	.LVL378:
 5657              	.L400:
4881:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5658              		.loc 1 4881 21 is_stmt 1 view .LVU1564
4881:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5659              		.loc 1 4881 45 is_stmt 0 view .LVU1565
 5660 007c 1035     		adds	r5, r5, #16
 5661              	.LVL379:
4881:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5662              		.loc 1 4881 45 view .LVU1566
 5663 007e 54F82520 		ldr	r2, [r4, r5, lsl #2]
4881:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5664              		.loc 1 4881 66 view .LVU1567
 5665 0082 0132     		adds	r2, r2, #1
 5666 0084 44F82520 		str	r2, [r4, r5, lsl #2]
4882:ThirdParty/FreeRTOS/tasks.c **** 
 5667              		.loc 1 4882 21 is_stmt 1 view .LVU1568
 5668 0088 F1E7     		b	.L402
 5669              	.LVL380:
 5670              	.L399:
4885:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5671              		.loc 1 4885 21 view .LVU1569
4885:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5672              		.loc 1 4885 63 is_stmt 0 view .LVU1570
 5673 008a 1035     		adds	r5, r5, #16
 5674              	.LVL381:
4885:ThirdParty/FreeRTOS/tasks.c ****                     break;
 5675              		.loc 1 4885 63 view .LVU1571
 5676 008c 44F82570 		str	r7, [r4, r5, lsl #2]
4886:ThirdParty/FreeRTOS/tasks.c **** 
 5677              		.loc 1 4886 21 is_stmt 1 view .LVU1572
 5678 0090 EDE7     		b	.L402
 5679              	.LVL382:
 5680              	.L397:
4890:ThirdParty/FreeRTOS/tasks.c ****                     {
 5681              		.loc 1 4890 21 view .LVU1573
4890:ThirdParty/FreeRTOS/tasks.c ****                     {
 5682              		.loc 1 4890 23 is_stmt 0 view .LVU1574
 5683 0092 022B     		cmp	r3, #2
 5684 0094 5BD0     		beq	.L408
4892:ThirdParty/FreeRTOS/tasks.c ****                     }
 5685              		.loc 1 4892 25 is_stmt 1 view .LVU1575
4892:ThirdParty/FreeRTOS/tasks.c ****                     }
 5686              		.loc 1 4892 67 is_stmt 0 view .LVU1576
 5687 0096 1035     		adds	r5, r5, #16
 5688              	.LVL383:
4892:ThirdParty/FreeRTOS/tasks.c ****                     }
 5689              		.loc 1 4892 67 view .LVU1577
 5690 0098 44F82570 		str	r7, [r4, r5, lsl #2]
 5691 009c E7E7     		b	.L402
 5692              	.LVL384:
 5693              	.L396:
4913:ThirdParty/FreeRTOS/tasks.c **** 
 5694              		.loc 1 4913 21 is_stmt 1 view .LVU1578
 5695 009e 2E4A     		ldr	r2, .L416
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 225


 5696 00a0 1268     		ldr	r2, [r2]
 5697 00a2 002A     		cmp	r2, #0
 5698 00a4 E3D0     		beq	.L402
4913:ThirdParty/FreeRTOS/tasks.c **** 
 5699              		.loc 1 4913 21 discriminator 1 view .LVU1579
 5700              	.LBB262:
 5701              	.LBI262:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5702              		.loc 2 196 34 view .LVU1580
 5703              	.LBB263:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5704              		.loc 2 198 9 view .LVU1581
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5705              		.loc 2 200 9 view .LVU1582
 5706              		.syntax unified
 5707              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5708 00a6 4FF05003 			mov r3, #80												
 5709 00aa 83F31188 		msr basepri, r3											
 5710 00ae BFF36F8F 		isb														
 5711 00b2 BFF34F8F 		dsb														
 5712              	
 5713              	@ 0 "" 2
 5714              	.LVL385:
 5715              		.thumb
 5716              		.syntax unified
 5717              	.L404:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5718              		.loc 2 200 9 is_stmt 0 view .LVU1583
 5719              	.LBE263:
 5720              	.LBE262:
4913:ThirdParty/FreeRTOS/tasks.c **** 
 5721              		.loc 1 4913 21 is_stmt 1 discriminator 3 view .LVU1584
4913:ThirdParty/FreeRTOS/tasks.c **** 
 5722              		.loc 1 4913 21 discriminator 3 view .LVU1585
 5723 00b6 FEE7     		b	.L404
 5724              	.LVL386:
 5725              	.L414:
 5726              	.LBB264:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5727              		.loc 1 4924 17 view .LVU1586
 5728 00b8 6369     		ldr	r3, [r4, #20]
 5729              	.LVL387:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5730              		.loc 1 4924 17 view .LVU1587
 5731 00ba A168     		ldr	r1, [r4, #8]
 5732 00bc E268     		ldr	r2, [r4, #12]
 5733 00be 8A60     		str	r2, [r1, #8]
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5734              		.loc 1 4924 17 view .LVU1588
 5735 00c0 A168     		ldr	r1, [r4, #8]
 5736 00c2 5160     		str	r1, [r2, #4]
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5737              		.loc 1 4924 17 view .LVU1589
 5738 00c4 5A68     		ldr	r2, [r3, #4]
 5739 00c6 211D     		adds	r1, r4, #4
 5740 00c8 8A42     		cmp	r2, r1
 5741 00ca 2BD0     		beq	.L415
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 226


 5742              	.L405:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5743              		.loc 1 4924 17 discriminator 3 view .LVU1590
 5744 00cc 0022     		movs	r2, #0
 5745 00ce 6261     		str	r2, [r4, #20]
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5746              		.loc 1 4924 17 discriminator 3 view .LVU1591
 5747 00d0 1A68     		ldr	r2, [r3]
 5748 00d2 013A     		subs	r2, r2, #1
 5749 00d4 1A60     		str	r2, [r3]
 5750              	.LBE264:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5751              		.loc 1 4924 62 discriminator 3 view .LVU1592
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5752              		.loc 1 4925 17 view .LVU1593
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5753              		.loc 1 4925 17 view .LVU1594
 5754 00d6 E36A     		ldr	r3, [r4, #44]
 5755              	.LVL388:
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5756              		.loc 1 4925 17 is_stmt 0 view .LVU1595
 5757 00d8 0122     		movs	r2, #1
 5758 00da 9A40     		lsls	r2, r2, r3
 5759 00dc 1F48     		ldr	r0, .L416+4
 5760 00de 0568     		ldr	r5, [r0]
 5761 00e0 2A43     		orrs	r2, r2, r5
 5762 00e2 0260     		str	r2, [r0]
 5763              	.LBB265:
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5764              		.loc 1 4925 17 is_stmt 1 view .LVU1596
 5765 00e4 1E4A     		ldr	r2, .L416+8
 5766 00e6 03EB8303 		add	r3, r3, r3, lsl #2
 5767 00ea 02EB8303 		add	r3, r2, r3, lsl #2
 5768 00ee 5B68     		ldr	r3, [r3, #4]
 5769              	.LVL389:
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5770              		.loc 1 4925 17 view .LVU1597
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5771              		.loc 1 4925 17 view .LVU1598
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5772              		.loc 1 4925 17 view .LVU1599
 5773 00f0 A360     		str	r3, [r4, #8]
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5774              		.loc 1 4925 17 view .LVU1600
 5775 00f2 9868     		ldr	r0, [r3, #8]
 5776 00f4 E060     		str	r0, [r4, #12]
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5777              		.loc 1 4925 17 view .LVU1601
 5778 00f6 4160     		str	r1, [r0, #4]
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5779              		.loc 1 4925 17 view .LVU1602
 5780 00f8 9960     		str	r1, [r3, #8]
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5781              		.loc 1 4925 17 view .LVU1603
 5782 00fa E36A     		ldr	r3, [r4, #44]
 5783              	.LVL390:
4925:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 227


 5784              		.loc 1 4925 17 is_stmt 0 view .LVU1604
 5785 00fc 03EB8301 		add	r1, r3, r3, lsl #2
 5786 0100 8800     		lsls	r0, r1, #2
 5787 0102 02EB8101 		add	r1, r2, r1, lsl #2
 5788 0106 6161     		str	r1, [r4, #20]
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5789              		.loc 1 4925 17 is_stmt 1 view .LVU1605
 5790 0108 1158     		ldr	r1, [r2, r0]
 5791 010a 0131     		adds	r1, r1, #1
 5792 010c 1150     		str	r1, [r2, r0]
 5793              	.LBE265:
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5794              		.loc 1 4925 17 view .LVU1606
4925:ThirdParty/FreeRTOS/tasks.c **** 
 5795              		.loc 1 4925 47 view .LVU1607
4928:ThirdParty/FreeRTOS/tasks.c **** 
 5796              		.loc 1 4928 17 view .LVU1608
 5797 010e A36A     		ldr	r3, [r4, #40]
 5798 0110 5BB1     		cbz	r3, .L406
4928:ThirdParty/FreeRTOS/tasks.c **** 
 5799              		.loc 1 4928 17 discriminator 1 view .LVU1609
 5800              	.LBB266:
 5801              	.LBI266:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5802              		.loc 2 196 34 view .LVU1610
 5803              	.LBB267:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5804              		.loc 2 198 9 view .LVU1611
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5805              		.loc 2 200 9 view .LVU1612
 5806              		.syntax unified
 5807              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5808 0112 4FF05003 			mov r3, #80												
 5809 0116 83F31188 		msr basepri, r3											
 5810 011a BFF36F8F 		isb														
 5811 011e BFF34F8F 		dsb														
 5812              	
 5813              	@ 0 "" 2
 5814              		.thumb
 5815              		.syntax unified
 5816              	.L407:
 5817              	.LBE267:
 5818              	.LBE266:
4928:ThirdParty/FreeRTOS/tasks.c **** 
 5819              		.loc 1 4928 17 discriminator 3 view .LVU1613
4928:ThirdParty/FreeRTOS/tasks.c **** 
 5820              		.loc 1 4928 17 discriminator 3 view .LVU1614
 5821 0122 FEE7     		b	.L407
 5822              	.LVL391:
 5823              	.L415:
 5824              	.LBB268:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5825              		.loc 1 4924 17 discriminator 1 view .LVU1615
 5826 0124 E268     		ldr	r2, [r4, #12]
 5827 0126 5A60     		str	r2, [r3, #4]
 5828 0128 D0E7     		b	.L405
 5829              	.LVL392:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 228


 5830              	.L406:
4924:ThirdParty/FreeRTOS/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 5831              		.loc 1 4924 17 is_stmt 0 discriminator 1 view .LVU1616
 5832              	.LBE268:
4928:ThirdParty/FreeRTOS/tasks.c **** 
 5833              		.loc 1 4928 94 is_stmt 1 discriminator 2 view .LVU1617
4946:ThirdParty/FreeRTOS/tasks.c ****                 {
 5834              		.loc 1 4946 17 view .LVU1618
4946:ThirdParty/FreeRTOS/tasks.c ****                 {
 5835              		.loc 1 4946 26 is_stmt 0 view .LVU1619
 5836 012a E26A     		ldr	r2, [r4, #44]
4946:ThirdParty/FreeRTOS/tasks.c ****                 {
 5837              		.loc 1 4946 53 view .LVU1620
 5838 012c 0D4B     		ldr	r3, .L416+12
 5839 012e 1B68     		ldr	r3, [r3]
 5840 0130 DB6A     		ldr	r3, [r3, #44]
4946:ThirdParty/FreeRTOS/tasks.c ****                 {
 5841              		.loc 1 4946 19 view .LVU1621
 5842 0132 9A42     		cmp	r2, r3
 5843 0134 0DD9     		bls	.L410
4950:ThirdParty/FreeRTOS/tasks.c ****                 }
 5844              		.loc 1 4950 21 is_stmt 1 view .LVU1622
 5845 0136 4FF0E023 		mov	r3, #-536813568
 5846 013a 4FF08052 		mov	r2, #268435456
 5847 013e C3F8042D 		str	r2, [r3, #3332]
 5848              	.LVL393:
4950:ThirdParty/FreeRTOS/tasks.c ****                 }
 5849              		.loc 1 4950 21 view .LVU1623
 5850              		.syntax unified
 5851              	@ 4950 "ThirdParty/FreeRTOS/tasks.c" 1
 5852 0142 BFF34F8F 		dsb
 5853              	@ 0 "" 2
4950:ThirdParty/FreeRTOS/tasks.c ****                 }
 5854              		.loc 1 4950 21 view .LVU1624
 5855              	@ 4950 "ThirdParty/FreeRTOS/tasks.c" 1
 5856 0146 BFF36F8F 		isb
 5857              	@ 0 "" 2
4950:ThirdParty/FreeRTOS/tasks.c ****                 }
 5858              		.loc 1 4950 52 view .LVU1625
 5859              		.thumb
 5860              		.syntax unified
 5861 014a 0124     		movs	r4, #1
 5862              	.LVL394:
4950:ThirdParty/FreeRTOS/tasks.c ****                 }
 5863              		.loc 1 4950 52 is_stmt 0 view .LVU1626
 5864 014c 92E7     		b	.L403
 5865              	.LVL395:
 5866              	.L408:
4897:ThirdParty/FreeRTOS/tasks.c ****                     }
 5867              		.loc 1 4897 33 view .LVU1627
 5868 014e 0024     		movs	r4, #0
 5869              	.LVL396:
4897:ThirdParty/FreeRTOS/tasks.c ****                     }
 5870              		.loc 1 4897 33 view .LVU1628
 5871 0150 90E7     		b	.L403
 5872              	.LVL397:
 5873              	.L410:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 229


4897:ThirdParty/FreeRTOS/tasks.c ****                     }
 5874              		.loc 1 4897 33 view .LVU1629
 5875 0152 0124     		movs	r4, #1
 5876              	.LVL398:
4897:ThirdParty/FreeRTOS/tasks.c ****                     }
 5877              		.loc 1 4897 33 view .LVU1630
 5878 0154 8EE7     		b	.L403
 5879              	.L417:
 5880 0156 00BF     		.align	2
 5881              	.L416:
 5882 0158 00000000 		.word	xTickCount
 5883 015c 00000000 		.word	uxTopReadyPriority
 5884 0160 00000000 		.word	pxReadyTasksLists
 5885 0164 00000000 		.word	pxCurrentTCB
 5886              		.cfi_endproc
 5887              	.LFE46:
 5889              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5890              		.align	1
 5891              		.global	xTaskGenericNotifyFromISR
 5892              		.syntax unified
 5893              		.thumb
 5894              		.thumb_func
 5896              	xTaskGenericNotifyFromISR:
 5897              	.LVL399:
 5898              	.LFB47:
4978:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5899              		.loc 1 4978 5 is_stmt 1 view -0
 5900              		.cfi_startproc
 5901              		@ args = 8, pretend = 0, frame = 0
 5902              		@ frame_needed = 0, uses_anonymous_args = 0
4978:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 5903              		.loc 1 4978 5 is_stmt 0 view .LVU1632
 5904 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5905              	.LCFI46:
 5906              		.cfi_def_cfa_offset 24
 5907              		.cfi_offset 3, -24
 5908              		.cfi_offset 4, -20
 5909              		.cfi_offset 5, -16
 5910              		.cfi_offset 6, -12
 5911              		.cfi_offset 7, -8
 5912              		.cfi_offset 14, -4
4979:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 5913              		.loc 1 4979 9 is_stmt 1 view .LVU1633
4980:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn = pdPASS;
 5914              		.loc 1 4980 9 view .LVU1634
4981:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 5915              		.loc 1 4981 9 view .LVU1635
 5916              	.LVL400:
4982:ThirdParty/FreeRTOS/tasks.c **** 
 5917              		.loc 1 4982 9 view .LVU1636
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5918              		.loc 1 4984 9 view .LVU1637
 5919 0002 68B1     		cbz	r0, .L444
 5920 0004 0C46     		mov	r4, r1
 5921 0006 1746     		mov	r7, r2
 5922 0008 1D46     		mov	r5, r3
 5923 000a 0646     		mov	r6, r0
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 230


4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5924              		.loc 1 4984 38 discriminator 2 view .LVU1638
4985:ThirdParty/FreeRTOS/tasks.c **** 
 5925              		.loc 1 4985 9 view .LVU1639
 5926 000c 89B1     		cbz	r1, .L421
4985:ThirdParty/FreeRTOS/tasks.c **** 
 5927              		.loc 1 4985 9 discriminator 1 view .LVU1640
 5928              	.LBB269:
 5929              	.LBI269:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5930              		.loc 2 196 34 view .LVU1641
 5931              	.LBB270:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5932              		.loc 2 198 9 view .LVU1642
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5933              		.loc 2 200 9 view .LVU1643
 5934              		.syntax unified
 5935              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5936 000e 4FF05003 			mov r3, #80												
 5937 0012 83F31188 		msr basepri, r3											
 5938 0016 BFF36F8F 		isb														
 5939 001a BFF34F8F 		dsb														
 5940              	
 5941              	@ 0 "" 2
 5942              	.LVL401:
 5943              		.thumb
 5944              		.syntax unified
 5945              	.L422:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5946              		.loc 2 200 9 is_stmt 0 view .LVU1644
 5947              	.LBE270:
 5948              	.LBE269:
4985:ThirdParty/FreeRTOS/tasks.c **** 
 5949              		.loc 1 4985 9 is_stmt 1 discriminator 3 view .LVU1645
4985:ThirdParty/FreeRTOS/tasks.c **** 
 5950              		.loc 1 4985 9 discriminator 3 view .LVU1646
 5951 001e FEE7     		b	.L422
 5952              	.LVL402:
 5953              	.L444:
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5954              		.loc 1 4984 9 discriminator 1 view .LVU1647
 5955              	.LBB271:
 5956              	.LBI271:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5957              		.loc 2 196 34 view .LVU1648
 5958              	.LBB272:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5959              		.loc 2 198 9 view .LVU1649
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5960              		.loc 2 200 9 view .LVU1650
 5961              		.syntax unified
 5962              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5963 0020 4FF05003 			mov r3, #80												
 5964 0024 83F31188 		msr basepri, r3											
 5965 0028 BFF36F8F 		isb														
 5966 002c BFF34F8F 		dsb														
 5967              	
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 231


 5968              	@ 0 "" 2
 5969              	.LVL403:
 5970              		.thumb
 5971              		.syntax unified
 5972              	.L420:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5973              		.loc 2 200 9 is_stmt 0 view .LVU1651
 5974              	.LBE272:
 5975              	.LBE271:
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5976              		.loc 1 4984 9 is_stmt 1 discriminator 3 view .LVU1652
4984:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5977              		.loc 1 4984 9 discriminator 3 view .LVU1653
 5978 0030 FEE7     		b	.L420
 5979              	.LVL404:
 5980              	.L421:
4985:ThirdParty/FreeRTOS/tasks.c **** 
 5981              		.loc 1 4985 80 discriminator 2 view .LVU1654
5003:ThirdParty/FreeRTOS/tasks.c **** 
 5982              		.loc 1 5003 9 view .LVU1655
 5983 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5984              	.LVL405:
5005:ThirdParty/FreeRTOS/tasks.c **** 
 5985              		.loc 1 5005 9 view .LVU1656
5007:ThirdParty/FreeRTOS/tasks.c ****         {
 5986              		.loc 1 5007 9 view .LVU1657
 5987              	.LBB273:
 5988              	.LBI273:
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 5989              		.loc 2 212 38 view .LVU1658
 5990              	.LBB274:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 5991              		.loc 2 214 9 view .LVU1659
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 5992              		.loc 2 216 9 view .LVU1660
 5993              		.syntax unified
 5994              	@ 216 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 5995 0036 EFF31182 			mrs r2, basepri											
 5996 003a 4FF05003 		mov r3, #80												
 5997 003e 83F31188 		msr basepri, r3											
 5998 0042 BFF36F8F 		isb														
 5999 0046 BFF34F8F 		dsb														
 6000              	
 6001              	@ 0 "" 2
 6002              	.LVL406:
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6003              		.loc 2 228 9 view .LVU1661
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6004              		.loc 2 228 9 is_stmt 0 view .LVU1662
 6005              		.thumb
 6006              		.syntax unified
 6007              	.LBE274:
 6008              	.LBE273:
5009:ThirdParty/FreeRTOS/tasks.c ****             {
 6009              		.loc 1 5009 13 is_stmt 1 view .LVU1663
5009:ThirdParty/FreeRTOS/tasks.c ****             {
 6010              		.loc 1 5009 15 is_stmt 0 view .LVU1664
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 232


 6011 004a 069B     		ldr	r3, [sp, #24]
 6012 004c 2BB1     		cbz	r3, .L423
5011:ThirdParty/FreeRTOS/tasks.c ****             }
 6013              		.loc 1 5011 17 is_stmt 1 view .LVU1665
5011:ThirdParty/FreeRTOS/tasks.c ****             }
 6014              		.loc 1 5011 71 is_stmt 0 view .LVU1666
 6015 004e 04F11003 		add	r3, r4, #16
 6016 0052 56F82330 		ldr	r3, [r6, r3, lsl #2]
5011:ThirdParty/FreeRTOS/tasks.c ****             }
 6017              		.loc 1 5011 47 view .LVU1667
 6018 0056 0699     		ldr	r1, [sp, #24]
 6019 0058 0B60     		str	r3, [r1]
 6020              	.L423:
5014:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6021              		.loc 1 5014 13 is_stmt 1 view .LVU1668
5014:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6022              		.loc 1 5014 35 is_stmt 0 view .LVU1669
 6023 005a 3119     		adds	r1, r6, r4
 6024 005c 91F84430 		ldrb	r3, [r1, #68]	@ zero_extendqisi2
 6025 0060 DBB2     		uxtb	r3, r3
 6026              	.LVL407:
5015:ThirdParty/FreeRTOS/tasks.c **** 
 6027              		.loc 1 5015 13 is_stmt 1 view .LVU1670
5015:ThirdParty/FreeRTOS/tasks.c **** 
 6028              		.loc 1 5015 53 is_stmt 0 view .LVU1671
 6029 0062 0220     		movs	r0, #2
 6030 0064 81F84400 		strb	r0, [r1, #68]
5017:ThirdParty/FreeRTOS/tasks.c ****             {
 6031              		.loc 1 5017 13 is_stmt 1 view .LVU1672
 6032 0068 042D     		cmp	r5, #4
 6033 006a 21D8     		bhi	.L424
 6034 006c DFE805F0 		tbb	[pc, r5]
 6035              	.L426:
 6036 0070 09       		.byte	(.L430-.L426)/2
 6037 0071 03       		.byte	(.L429-.L426)/2
 6038 0072 0F       		.byte	(.L428-.L426)/2
 6039 0073 16       		.byte	(.L427-.L426)/2
 6040 0074 1A       		.byte	(.L425-.L426)/2
 6041 0075 00       		.p2align 1
 6042              	.L429:
5020:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6043              		.loc 1 5020 21 view .LVU1673
5020:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6044              		.loc 1 5020 43 is_stmt 0 view .LVU1674
 6045 0076 1034     		adds	r4, r4, #16
 6046              	.LVL408:
5020:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6047              		.loc 1 5020 43 view .LVU1675
 6048 0078 56F82410 		ldr	r1, [r6, r4, lsl #2]
5020:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6049              		.loc 1 5020 63 view .LVU1676
 6050 007c 3943     		orrs	r1, r1, r7
 6051 007e 46F82410 		str	r1, [r6, r4, lsl #2]
5021:ThirdParty/FreeRTOS/tasks.c **** 
 6052              		.loc 1 5021 21 is_stmt 1 view .LVU1677
 6053              	.LVL409:
 6054              	.L430:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 233


5060:ThirdParty/FreeRTOS/tasks.c **** 
 6055              		.loc 1 5060 57 view .LVU1678
5064:ThirdParty/FreeRTOS/tasks.c ****             {
 6056              		.loc 1 5064 13 view .LVU1679
5064:ThirdParty/FreeRTOS/tasks.c ****             {
 6057              		.loc 1 5064 15 is_stmt 0 view .LVU1680
 6058 0082 012B     		cmp	r3, #1
 6059 0084 21D0     		beq	.L445
 6060 0086 0120     		movs	r0, #1
 6061              	.LVL410:
 6062              	.L431:
5097:ThirdParty/FreeRTOS/tasks.c ****                 }
 6063              		.loc 1 5097 45 is_stmt 1 view .LVU1681
5101:ThirdParty/FreeRTOS/tasks.c **** 
 6064              		.loc 1 5101 9 view .LVU1682
 6065              	.LBB275:
 6066              	.LBI275:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6067              		.loc 2 232 34 view .LVU1683
 6068              	.LBB276:
 6069              		.loc 2 234 9 view .LVU1684
 6070              		.syntax unified
 6071              	@ 234 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6072 0088 82F31188 			msr basepri, r2	
 6073              	@ 0 "" 2
 6074              		.thumb
 6075              		.syntax unified
 6076              	.LBE276:
 6077              	.LBE275:
5103:ThirdParty/FreeRTOS/tasks.c ****     }
 6078              		.loc 1 5103 9 view .LVU1685
5104:ThirdParty/FreeRTOS/tasks.c **** 
 6079              		.loc 1 5104 5 is_stmt 0 view .LVU1686
 6080 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6081              	.LVL411:
 6082              	.L428:
5024:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6083              		.loc 1 5024 21 is_stmt 1 view .LVU1687
5024:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6084              		.loc 1 5024 45 is_stmt 0 view .LVU1688
 6085 008e 1034     		adds	r4, r4, #16
 6086              	.LVL412:
5024:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6087              		.loc 1 5024 45 view .LVU1689
 6088 0090 56F82410 		ldr	r1, [r6, r4, lsl #2]
5024:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6089              		.loc 1 5024 66 view .LVU1690
 6090 0094 0131     		adds	r1, r1, #1
 6091 0096 46F82410 		str	r1, [r6, r4, lsl #2]
5025:ThirdParty/FreeRTOS/tasks.c **** 
 6092              		.loc 1 5025 21 is_stmt 1 view .LVU1691
 6093 009a F2E7     		b	.L430
 6094              	.LVL413:
 6095              	.L427:
5028:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6096              		.loc 1 5028 21 view .LVU1692
5028:ThirdParty/FreeRTOS/tasks.c ****                     break;
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 234


 6097              		.loc 1 5028 63 is_stmt 0 view .LVU1693
 6098 009c 1034     		adds	r4, r4, #16
 6099              	.LVL414:
5028:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6100              		.loc 1 5028 63 view .LVU1694
 6101 009e 46F82470 		str	r7, [r6, r4, lsl #2]
5029:ThirdParty/FreeRTOS/tasks.c **** 
 6102              		.loc 1 5029 21 is_stmt 1 view .LVU1695
 6103 00a2 EEE7     		b	.L430
 6104              	.LVL415:
 6105              	.L425:
5033:ThirdParty/FreeRTOS/tasks.c ****                     {
 6106              		.loc 1 5033 21 view .LVU1696
5033:ThirdParty/FreeRTOS/tasks.c ****                     {
 6107              		.loc 1 5033 23 is_stmt 0 view .LVU1697
 6108 00a4 022B     		cmp	r3, #2
 6109 00a6 6AD0     		beq	.L439
5035:ThirdParty/FreeRTOS/tasks.c ****                     }
 6110              		.loc 1 5035 25 is_stmt 1 view .LVU1698
5035:ThirdParty/FreeRTOS/tasks.c ****                     }
 6111              		.loc 1 5035 67 is_stmt 0 view .LVU1699
 6112 00a8 1034     		adds	r4, r4, #16
 6113              	.LVL416:
5035:ThirdParty/FreeRTOS/tasks.c ****                     }
 6114              		.loc 1 5035 67 view .LVU1700
 6115 00aa 46F82470 		str	r7, [r6, r4, lsl #2]
 6116 00ae E8E7     		b	.L430
 6117              	.LVL417:
 6118              	.L424:
5056:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6119              		.loc 1 5056 21 is_stmt 1 view .LVU1701
 6120 00b0 3549     		ldr	r1, .L447
 6121 00b2 0968     		ldr	r1, [r1]
 6122 00b4 0029     		cmp	r1, #0
 6123 00b6 E4D0     		beq	.L430
5056:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6124              		.loc 1 5056 21 discriminator 1 view .LVU1702
 6125              	.LBB277:
 6126              	.LBI277:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6127              		.loc 2 196 34 view .LVU1703
 6128              	.LBB278:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6129              		.loc 2 198 9 view .LVU1704
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6130              		.loc 2 200 9 view .LVU1705
 6131              		.syntax unified
 6132              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6133 00b8 4FF05003 			mov r3, #80												
 6134 00bc 83F31188 		msr basepri, r3											
 6135 00c0 BFF36F8F 		isb														
 6136 00c4 BFF34F8F 		dsb														
 6137              	
 6138              	@ 0 "" 2
 6139              	.LVL418:
 6140              		.thumb
 6141              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 235


 6142              	.L432:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6143              		.loc 2 200 9 is_stmt 0 view .LVU1706
 6144              	.LBE278:
 6145              	.LBE277:
5056:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6146              		.loc 1 5056 21 is_stmt 1 discriminator 3 view .LVU1707
5056:ThirdParty/FreeRTOS/tasks.c ****                     break;
 6147              		.loc 1 5056 21 discriminator 3 view .LVU1708
 6148 00c8 FEE7     		b	.L432
 6149              	.LVL419:
 6150              	.L445:
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6151              		.loc 1 5067 17 view .LVU1709
 6152 00ca B36A     		ldr	r3, [r6, #40]
 6153              	.LVL420:
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6154              		.loc 1 5067 17 is_stmt 0 view .LVU1710
 6155 00cc 43B1     		cbz	r3, .L433
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6156              		.loc 1 5067 17 is_stmt 1 discriminator 1 view .LVU1711
 6157              	.LBB279:
 6158              	.LBI279:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6159              		.loc 2 196 34 view .LVU1712
 6160              	.LBB280:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6161              		.loc 2 198 9 view .LVU1713
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6162              		.loc 2 200 9 view .LVU1714
 6163              		.syntax unified
 6164              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6165 00ce 4FF05003 			mov r3, #80												
 6166 00d2 83F31188 		msr basepri, r3											
 6167 00d6 BFF36F8F 		isb														
 6168 00da BFF34F8F 		dsb														
 6169              	
 6170              	@ 0 "" 2
 6171              		.thumb
 6172              		.syntax unified
 6173              	.L434:
 6174              	.LBE280:
 6175              	.LBE279:
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6176              		.loc 1 5067 17 discriminator 3 view .LVU1715
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6177              		.loc 1 5067 17 discriminator 3 view .LVU1716
 6178 00de FEE7     		b	.L434
 6179              	.L433:
5067:ThirdParty/FreeRTOS/tasks.c **** 
 6180              		.loc 1 5067 94 discriminator 2 view .LVU1717
5069:ThirdParty/FreeRTOS/tasks.c ****                 {
 6181              		.loc 1 5069 17 view .LVU1718
5069:ThirdParty/FreeRTOS/tasks.c ****                 {
 6182              		.loc 1 5069 42 is_stmt 0 view .LVU1719
 6183 00e0 2A4B     		ldr	r3, .L447+4
 6184 00e2 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 236


5069:ThirdParty/FreeRTOS/tasks.c ****                 {
 6185              		.loc 1 5069 19 view .LVU1720
 6186 00e4 002B     		cmp	r3, #0
 6187 00e6 3CD1     		bne	.L435
 6188              	.LBB281:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6189              		.loc 1 5071 21 is_stmt 1 view .LVU1721
 6190 00e8 7369     		ldr	r3, [r6, #20]
 6191              	.LVL421:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6192              		.loc 1 5071 21 view .LVU1722
 6193 00ea B068     		ldr	r0, [r6, #8]
 6194 00ec F168     		ldr	r1, [r6, #12]
 6195 00ee 8160     		str	r1, [r0, #8]
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6196              		.loc 1 5071 21 view .LVU1723
 6197 00f0 B068     		ldr	r0, [r6, #8]
 6198 00f2 4860     		str	r0, [r1, #4]
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6199              		.loc 1 5071 21 view .LVU1724
 6200 00f4 5968     		ldr	r1, [r3, #4]
 6201 00f6 301D     		adds	r0, r6, #4
 6202 00f8 8142     		cmp	r1, r0
 6203 00fa 2FD0     		beq	.L446
 6204              	.L436:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6205              		.loc 1 5071 21 discriminator 3 view .LVU1725
 6206 00fc 0021     		movs	r1, #0
 6207 00fe 7161     		str	r1, [r6, #20]
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6208              		.loc 1 5071 21 discriminator 3 view .LVU1726
 6209 0100 1968     		ldr	r1, [r3]
 6210 0102 0139     		subs	r1, r1, #1
 6211 0104 1960     		str	r1, [r3]
 6212              	.LBE281:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6213              		.loc 1 5071 66 discriminator 3 view .LVU1727
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6214              		.loc 1 5072 21 view .LVU1728
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6215              		.loc 1 5072 21 view .LVU1729
 6216 0106 F36A     		ldr	r3, [r6, #44]
 6217              	.LVL422:
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6218              		.loc 1 5072 21 is_stmt 0 view .LVU1730
 6219 0108 0121     		movs	r1, #1
 6220 010a 9940     		lsls	r1, r1, r3
 6221 010c 204C     		ldr	r4, .L447+8
 6222 010e 2568     		ldr	r5, [r4]
 6223 0110 2943     		orrs	r1, r1, r5
 6224 0112 2160     		str	r1, [r4]
 6225              	.LBB282:
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6226              		.loc 1 5072 21 is_stmt 1 view .LVU1731
 6227 0114 1F49     		ldr	r1, .L447+12
 6228 0116 03EB8303 		add	r3, r3, r3, lsl #2
 6229 011a 01EB8303 		add	r3, r1, r3, lsl #2
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 237


 6230 011e 5B68     		ldr	r3, [r3, #4]
 6231              	.LVL423:
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6232              		.loc 1 5072 21 view .LVU1732
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6233              		.loc 1 5072 21 view .LVU1733
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6234              		.loc 1 5072 21 view .LVU1734
 6235 0120 B360     		str	r3, [r6, #8]
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6236              		.loc 1 5072 21 view .LVU1735
 6237 0122 9C68     		ldr	r4, [r3, #8]
 6238 0124 F460     		str	r4, [r6, #12]
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6239              		.loc 1 5072 21 view .LVU1736
 6240 0126 6060     		str	r0, [r4, #4]
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6241              		.loc 1 5072 21 view .LVU1737
 6242 0128 9860     		str	r0, [r3, #8]
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6243              		.loc 1 5072 21 view .LVU1738
 6244 012a F36A     		ldr	r3, [r6, #44]
 6245              	.LVL424:
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6246              		.loc 1 5072 21 is_stmt 0 view .LVU1739
 6247 012c 03EB8300 		add	r0, r3, r3, lsl #2
 6248 0130 8400     		lsls	r4, r0, #2
 6249 0132 01EB8000 		add	r0, r1, r0, lsl #2
 6250 0136 7061     		str	r0, [r6, #20]
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6251              		.loc 1 5072 21 is_stmt 1 view .LVU1740
 6252 0138 0859     		ldr	r0, [r1, r4]
 6253 013a 0130     		adds	r0, r0, #1
 6254 013c 0851     		str	r0, [r1, r4]
 6255              	.LBE282:
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6256              		.loc 1 5072 21 view .LVU1741
5072:ThirdParty/FreeRTOS/tasks.c ****                 }
 6257              		.loc 1 5072 51 view .LVU1742
 6258              	.LVL425:
 6259              	.L437:
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6260              		.loc 1 5078 89 discriminator 1 view .LVU1743
5081:ThirdParty/FreeRTOS/tasks.c ****                 {
 6261              		.loc 1 5081 17 view .LVU1744
5081:ThirdParty/FreeRTOS/tasks.c ****                 {
 6262              		.loc 1 5081 26 is_stmt 0 view .LVU1745
 6263 013e F16A     		ldr	r1, [r6, #44]
5081:ThirdParty/FreeRTOS/tasks.c ****                 {
 6264              		.loc 1 5081 53 view .LVU1746
 6265 0140 154B     		ldr	r3, .L447+16
 6266 0142 1B68     		ldr	r3, [r3]
 6267 0144 DB6A     		ldr	r3, [r3, #44]
5081:ThirdParty/FreeRTOS/tasks.c ****                 {
 6268              		.loc 1 5081 19 view .LVU1747
 6269 0146 9942     		cmp	r1, r3
 6270 0148 1BD9     		bls	.L441
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 238


5085:ThirdParty/FreeRTOS/tasks.c ****                     {
 6271              		.loc 1 5085 21 is_stmt 1 view .LVU1748
5085:ThirdParty/FreeRTOS/tasks.c ****                     {
 6272              		.loc 1 5085 23 is_stmt 0 view .LVU1749
 6273 014a 079B     		ldr	r3, [sp, #28]
 6274 014c 13B1     		cbz	r3, .L438
5087:ThirdParty/FreeRTOS/tasks.c ****                     }
 6275              		.loc 1 5087 25 is_stmt 1 view .LVU1750
5087:ThirdParty/FreeRTOS/tasks.c ****                     }
 6276              		.loc 1 5087 52 is_stmt 0 view .LVU1751
 6277 014e 0123     		movs	r3, #1
 6278 0150 0799     		ldr	r1, [sp, #28]
 6279 0152 0B60     		str	r3, [r1]
 6280              	.L438:
5093:ThirdParty/FreeRTOS/tasks.c ****                 }
 6281              		.loc 1 5093 21 is_stmt 1 view .LVU1752
5093:ThirdParty/FreeRTOS/tasks.c ****                 }
 6282              		.loc 1 5093 35 is_stmt 0 view .LVU1753
 6283 0154 0120     		movs	r0, #1
 6284 0156 114B     		ldr	r3, .L447+20
 6285 0158 1860     		str	r0, [r3]
 6286 015a 95E7     		b	.L431
 6287              	.LVL426:
 6288              	.L446:
 6289              	.LBB283:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6290              		.loc 1 5071 21 is_stmt 1 discriminator 1 view .LVU1754
 6291 015c F168     		ldr	r1, [r6, #12]
 6292 015e 5960     		str	r1, [r3, #4]
 6293 0160 CCE7     		b	.L436
 6294              	.LVL427:
 6295              	.L435:
5071:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6296              		.loc 1 5071 21 is_stmt 0 discriminator 1 view .LVU1755
 6297              	.LBE283:
 6298              	.LBB284:
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6299              		.loc 1 5078 21 is_stmt 1 view .LVU1756
 6300 0162 0F4B     		ldr	r3, .L447+24
 6301 0164 5968     		ldr	r1, [r3, #4]
 6302              	.LVL428:
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6303              		.loc 1 5078 21 view .LVU1757
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6304              		.loc 1 5078 21 view .LVU1758
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6305              		.loc 1 5078 21 view .LVU1759
 6306 0166 F161     		str	r1, [r6, #28]
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6307              		.loc 1 5078 21 view .LVU1760
 6308 0168 8C68     		ldr	r4, [r1, #8]
 6309 016a 3462     		str	r4, [r6, #32]
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6310              		.loc 1 5078 21 view .LVU1761
 6311 016c 06F11800 		add	r0, r6, #24
 6312 0170 6060     		str	r0, [r4, #4]
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 239


 6313              		.loc 1 5078 21 view .LVU1762
 6314 0172 8860     		str	r0, [r1, #8]
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6315              		.loc 1 5078 21 view .LVU1763
 6316 0174 B362     		str	r3, [r6, #40]
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6317              		.loc 1 5078 21 view .LVU1764
 6318 0176 1968     		ldr	r1, [r3]
 6319              	.LVL429:
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6320              		.loc 1 5078 21 is_stmt 0 view .LVU1765
 6321 0178 0131     		adds	r1, r1, #1
 6322 017a 1960     		str	r1, [r3]
 6323 017c DFE7     		b	.L437
 6324              	.LVL430:
 6325              	.L439:
5078:ThirdParty/FreeRTOS/tasks.c ****                 }
 6326              		.loc 1 5078 21 view .LVU1766
 6327              	.LBE284:
5040:ThirdParty/FreeRTOS/tasks.c ****                     }
 6328              		.loc 1 5040 33 view .LVU1767
 6329 017e 0020     		movs	r0, #0
 6330 0180 82E7     		b	.L431
 6331              	.LVL431:
 6332              	.L441:
5040:ThirdParty/FreeRTOS/tasks.c ****                     }
 6333              		.loc 1 5040 33 view .LVU1768
 6334 0182 0120     		movs	r0, #1
 6335 0184 80E7     		b	.L431
 6336              	.L448:
 6337 0186 00BF     		.align	2
 6338              	.L447:
 6339 0188 00000000 		.word	xTickCount
 6340 018c 00000000 		.word	uxSchedulerSuspended
 6341 0190 00000000 		.word	uxTopReadyPriority
 6342 0194 00000000 		.word	pxReadyTasksLists
 6343 0198 00000000 		.word	pxCurrentTCB
 6344 019c 00000000 		.word	xYieldPending
 6345 01a0 00000000 		.word	xPendingReadyList
 6346              		.cfi_endproc
 6347              	.LFE47:
 6349              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 6350              		.align	1
 6351              		.global	vTaskGenericNotifyGiveFromISR
 6352              		.syntax unified
 6353              		.thumb
 6354              		.thumb_func
 6356              	vTaskGenericNotifyGiveFromISR:
 6357              	.LVL432:
 6358              	.LFB48:
5114:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6359              		.loc 1 5114 5 is_stmt 1 view -0
 6360              		.cfi_startproc
 6361              		@ args = 0, pretend = 0, frame = 0
 6362              		@ frame_needed = 0, uses_anonymous_args = 0
5114:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6363              		.loc 1 5114 5 is_stmt 0 view .LVU1770
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 240


 6364 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6365              	.LCFI47:
 6366              		.cfi_def_cfa_offset 24
 6367              		.cfi_offset 3, -24
 6368              		.cfi_offset 4, -20
 6369              		.cfi_offset 5, -16
 6370              		.cfi_offset 6, -12
 6371              		.cfi_offset 7, -8
 6372              		.cfi_offset 14, -4
5115:ThirdParty/FreeRTOS/tasks.c ****         uint8_t ucOriginalNotifyState;
 6373              		.loc 1 5115 9 is_stmt 1 view .LVU1771
5116:ThirdParty/FreeRTOS/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 6374              		.loc 1 5116 9 view .LVU1772
5117:ThirdParty/FreeRTOS/tasks.c **** 
 6375              		.loc 1 5117 9 view .LVU1773
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6376              		.loc 1 5119 9 view .LVU1774
 6377 0002 60B1     		cbz	r0, .L462
 6378 0004 0C46     		mov	r4, r1
 6379 0006 1546     		mov	r5, r2
 6380 0008 0646     		mov	r6, r0
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6381              		.loc 1 5119 38 discriminator 2 view .LVU1775
5120:ThirdParty/FreeRTOS/tasks.c **** 
 6382              		.loc 1 5120 9 view .LVU1776
 6383 000a 89B1     		cbz	r1, .L452
5120:ThirdParty/FreeRTOS/tasks.c **** 
 6384              		.loc 1 5120 9 discriminator 1 view .LVU1777
 6385              	.LBB285:
 6386              	.LBI285:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6387              		.loc 2 196 34 view .LVU1778
 6388              	.LBB286:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6389              		.loc 2 198 9 view .LVU1779
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6390              		.loc 2 200 9 view .LVU1780
 6391              		.syntax unified
 6392              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6393 000c 4FF05003 			mov r3, #80												
 6394 0010 83F31188 		msr basepri, r3											
 6395 0014 BFF36F8F 		isb														
 6396 0018 BFF34F8F 		dsb														
 6397              	
 6398              	@ 0 "" 2
 6399              		.thumb
 6400              		.syntax unified
 6401              	.L453:
 6402              	.LBE286:
 6403              	.LBE285:
5120:ThirdParty/FreeRTOS/tasks.c **** 
 6404              		.loc 1 5120 9 discriminator 3 view .LVU1781
5120:ThirdParty/FreeRTOS/tasks.c **** 
 6405              		.loc 1 5120 9 discriminator 3 view .LVU1782
 6406 001c FEE7     		b	.L453
 6407              	.L462:
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 241


 6408              		.loc 1 5119 9 discriminator 1 view .LVU1783
 6409              	.LBB287:
 6410              	.LBI287:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6411              		.loc 2 196 34 view .LVU1784
 6412              	.LBB288:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6413              		.loc 2 198 9 view .LVU1785
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6414              		.loc 2 200 9 view .LVU1786
 6415              		.syntax unified
 6416              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6417 001e 4FF05003 			mov r3, #80												
 6418 0022 83F31188 		msr basepri, r3											
 6419 0026 BFF36F8F 		isb														
 6420 002a BFF34F8F 		dsb														
 6421              	
 6422              	@ 0 "" 2
 6423              		.thumb
 6424              		.syntax unified
 6425              	.L451:
 6426              	.LBE288:
 6427              	.LBE287:
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6428              		.loc 1 5119 9 discriminator 3 view .LVU1787
5119:ThirdParty/FreeRTOS/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 6429              		.loc 1 5119 9 discriminator 3 view .LVU1788
 6430 002e FEE7     		b	.L451
 6431              	.L452:
5120:ThirdParty/FreeRTOS/tasks.c **** 
 6432              		.loc 1 5120 80 discriminator 2 view .LVU1789
5138:ThirdParty/FreeRTOS/tasks.c **** 
 6433              		.loc 1 5138 9 view .LVU1790
 6434 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6435              	.LVL433:
5140:ThirdParty/FreeRTOS/tasks.c **** 
 6436              		.loc 1 5140 9 view .LVU1791
5142:ThirdParty/FreeRTOS/tasks.c ****         {
 6437              		.loc 1 5142 9 view .LVU1792
 6438              	.LBB289:
 6439              	.LBI289:
 212:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6440              		.loc 2 212 38 view .LVU1793
 6441              	.LBB290:
 214:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6442              		.loc 2 214 9 view .LVU1794
 216:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6443              		.loc 2 216 9 view .LVU1795
 6444              		.syntax unified
 6445              	@ 216 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6446 0034 EFF31181 			mrs r1, basepri											
 6447 0038 4FF05003 		mov r3, #80												
 6448 003c 83F31188 		msr basepri, r3											
 6449 0040 BFF36F8F 		isb														
 6450 0044 BFF34F8F 		dsb														
 6451              	
 6452              	@ 0 "" 2
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 242


 6453              	.LVL434:
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6454              		.loc 2 228 9 view .LVU1796
 228:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     }
 6455              		.loc 2 228 9 is_stmt 0 view .LVU1797
 6456              		.thumb
 6457              		.syntax unified
 6458              	.LBE290:
 6459              	.LBE289:
5144:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6460              		.loc 1 5144 13 is_stmt 1 view .LVU1798
5144:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 6461              		.loc 1 5144 35 is_stmt 0 view .LVU1799
 6462 0048 3219     		adds	r2, r6, r4
 6463 004a 92F84430 		ldrb	r3, [r2, #68]	@ zero_extendqisi2
 6464 004e DBB2     		uxtb	r3, r3
 6465              	.LVL435:
5145:ThirdParty/FreeRTOS/tasks.c **** 
 6466              		.loc 1 5145 13 is_stmt 1 view .LVU1800
5145:ThirdParty/FreeRTOS/tasks.c **** 
 6467              		.loc 1 5145 53 is_stmt 0 view .LVU1801
 6468 0050 0220     		movs	r0, #2
 6469 0052 82F84400 		strb	r0, [r2, #68]
5149:ThirdParty/FreeRTOS/tasks.c **** 
 6470              		.loc 1 5149 13 is_stmt 1 view .LVU1802
5149:ThirdParty/FreeRTOS/tasks.c **** 
 6471              		.loc 1 5149 37 is_stmt 0 view .LVU1803
 6472 0056 1034     		adds	r4, r4, #16
 6473              	.LVL436:
5149:ThirdParty/FreeRTOS/tasks.c **** 
 6474              		.loc 1 5149 37 view .LVU1804
 6475 0058 56F82420 		ldr	r2, [r6, r4, lsl #2]
5149:ThirdParty/FreeRTOS/tasks.c **** 
 6476              		.loc 1 5149 58 view .LVU1805
 6477 005c 0132     		adds	r2, r2, #1
 6478 005e 46F82420 		str	r2, [r6, r4, lsl #2]
5151:ThirdParty/FreeRTOS/tasks.c **** 
 6479              		.loc 1 5151 62 is_stmt 1 view .LVU1806
5155:ThirdParty/FreeRTOS/tasks.c ****             {
 6480              		.loc 1 5155 13 view .LVU1807
5155:ThirdParty/FreeRTOS/tasks.c ****             {
 6481              		.loc 1 5155 15 is_stmt 0 view .LVU1808
 6482 0062 012B     		cmp	r3, #1
 6483 0064 02D0     		beq	.L463
 6484              	.LVL437:
 6485              	.L454:
5188:ThirdParty/FreeRTOS/tasks.c ****                 }
 6486              		.loc 1 5188 45 is_stmt 1 view .LVU1809
5192:ThirdParty/FreeRTOS/tasks.c ****     }
 6487              		.loc 1 5192 9 view .LVU1810
 6488              	.LBB291:
 6489              	.LBI291:
 232:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6490              		.loc 2 232 34 view .LVU1811
 6491              	.LBB292:
 6492              		.loc 2 234 9 view .LVU1812
 6493              		.syntax unified
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 243


 6494              	@ 234 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6495 0066 81F31188 			msr basepri, r1	
 6496              	@ 0 "" 2
 6497              		.thumb
 6498              		.syntax unified
 6499              	.LBE292:
 6500              	.LBE291:
5193:ThirdParty/FreeRTOS/tasks.c **** 
 6501              		.loc 1 5193 5 is_stmt 0 view .LVU1813
 6502 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6503              	.LVL438:
 6504              	.L463:
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6505              		.loc 1 5158 17 is_stmt 1 view .LVU1814
 6506 006c B36A     		ldr	r3, [r6, #40]
 6507              	.LVL439:
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6508              		.loc 1 5158 17 is_stmt 0 view .LVU1815
 6509 006e 43B1     		cbz	r3, .L455
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6510              		.loc 1 5158 17 is_stmt 1 discriminator 1 view .LVU1816
 6511              	.LBB293:
 6512              	.LBI293:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6513              		.loc 2 196 34 view .LVU1817
 6514              	.LBB294:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6515              		.loc 2 198 9 view .LVU1818
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6516              		.loc 2 200 9 view .LVU1819
 6517              		.syntax unified
 6518              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6519 0070 4FF05003 			mov r3, #80												
 6520 0074 83F31188 		msr basepri, r3											
 6521 0078 BFF36F8F 		isb														
 6522 007c BFF34F8F 		dsb														
 6523              	
 6524              	@ 0 "" 2
 6525              		.thumb
 6526              		.syntax unified
 6527              	.L456:
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6528              		.loc 2 200 9 is_stmt 0 view .LVU1820
 6529              	.LBE294:
 6530              	.LBE293:
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6531              		.loc 1 5158 17 is_stmt 1 discriminator 3 view .LVU1821
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6532              		.loc 1 5158 17 discriminator 3 view .LVU1822
 6533 0080 FEE7     		b	.L456
 6534              	.L455:
5158:ThirdParty/FreeRTOS/tasks.c **** 
 6535              		.loc 1 5158 94 discriminator 2 view .LVU1823
5160:ThirdParty/FreeRTOS/tasks.c ****                 {
 6536              		.loc 1 5160 17 view .LVU1824
5160:ThirdParty/FreeRTOS/tasks.c ****                 {
 6537              		.loc 1 5160 42 is_stmt 0 view .LVU1825
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 244


 6538 0082 264B     		ldr	r3, .L465
 6539 0084 1B68     		ldr	r3, [r3]
5160:ThirdParty/FreeRTOS/tasks.c ****                 {
 6540              		.loc 1 5160 19 view .LVU1826
 6541 0086 002B     		cmp	r3, #0
 6542 0088 3AD1     		bne	.L457
 6543              	.LBB295:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6544              		.loc 1 5162 21 is_stmt 1 view .LVU1827
 6545 008a 7369     		ldr	r3, [r6, #20]
 6546              	.LVL440:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6547              		.loc 1 5162 21 view .LVU1828
 6548 008c B068     		ldr	r0, [r6, #8]
 6549 008e F268     		ldr	r2, [r6, #12]
 6550 0090 8260     		str	r2, [r0, #8]
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6551              		.loc 1 5162 21 view .LVU1829
 6552 0092 B068     		ldr	r0, [r6, #8]
 6553 0094 5060     		str	r0, [r2, #4]
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6554              		.loc 1 5162 21 view .LVU1830
 6555 0096 5A68     		ldr	r2, [r3, #4]
 6556 0098 301D     		adds	r0, r6, #4
 6557 009a 8242     		cmp	r2, r0
 6558 009c 2DD0     		beq	.L464
 6559              	.L458:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6560              		.loc 1 5162 21 discriminator 3 view .LVU1831
 6561 009e 0022     		movs	r2, #0
 6562 00a0 7261     		str	r2, [r6, #20]
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6563              		.loc 1 5162 21 discriminator 3 view .LVU1832
 6564 00a2 1A68     		ldr	r2, [r3]
 6565 00a4 013A     		subs	r2, r2, #1
 6566 00a6 1A60     		str	r2, [r3]
 6567              	.LBE295:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6568              		.loc 1 5162 66 discriminator 3 view .LVU1833
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6569              		.loc 1 5163 21 view .LVU1834
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6570              		.loc 1 5163 21 view .LVU1835
 6571 00a8 F36A     		ldr	r3, [r6, #44]
 6572              	.LVL441:
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6573              		.loc 1 5163 21 is_stmt 0 view .LVU1836
 6574 00aa 0122     		movs	r2, #1
 6575 00ac 9A40     		lsls	r2, r2, r3
 6576 00ae 1C4C     		ldr	r4, .L465+4
 6577 00b0 2768     		ldr	r7, [r4]
 6578 00b2 3A43     		orrs	r2, r2, r7
 6579 00b4 2260     		str	r2, [r4]
 6580              	.LBB296:
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6581              		.loc 1 5163 21 is_stmt 1 view .LVU1837
 6582 00b6 1B4A     		ldr	r2, .L465+8
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 245


 6583 00b8 03EB8303 		add	r3, r3, r3, lsl #2
 6584 00bc 02EB8303 		add	r3, r2, r3, lsl #2
 6585 00c0 5B68     		ldr	r3, [r3, #4]
 6586              	.LVL442:
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6587              		.loc 1 5163 21 view .LVU1838
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6588              		.loc 1 5163 21 view .LVU1839
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6589              		.loc 1 5163 21 view .LVU1840
 6590 00c2 B360     		str	r3, [r6, #8]
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6591              		.loc 1 5163 21 view .LVU1841
 6592 00c4 9C68     		ldr	r4, [r3, #8]
 6593 00c6 F460     		str	r4, [r6, #12]
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6594              		.loc 1 5163 21 view .LVU1842
 6595 00c8 6060     		str	r0, [r4, #4]
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6596              		.loc 1 5163 21 view .LVU1843
 6597 00ca 9860     		str	r0, [r3, #8]
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6598              		.loc 1 5163 21 view .LVU1844
 6599 00cc F36A     		ldr	r3, [r6, #44]
 6600              	.LVL443:
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6601              		.loc 1 5163 21 is_stmt 0 view .LVU1845
 6602 00ce 03EB8300 		add	r0, r3, r3, lsl #2
 6603 00d2 8400     		lsls	r4, r0, #2
 6604 00d4 02EB8000 		add	r0, r2, r0, lsl #2
 6605 00d8 7061     		str	r0, [r6, #20]
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6606              		.loc 1 5163 21 is_stmt 1 view .LVU1846
 6607 00da 1059     		ldr	r0, [r2, r4]
 6608 00dc 0130     		adds	r0, r0, #1
 6609 00de 1051     		str	r0, [r2, r4]
 6610              	.LBE296:
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6611              		.loc 1 5163 21 view .LVU1847
5163:ThirdParty/FreeRTOS/tasks.c ****                 }
 6612              		.loc 1 5163 51 view .LVU1848
 6613              	.LVL444:
 6614              	.L459:
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6615              		.loc 1 5169 89 discriminator 1 view .LVU1849
5172:ThirdParty/FreeRTOS/tasks.c ****                 {
 6616              		.loc 1 5172 17 view .LVU1850
5172:ThirdParty/FreeRTOS/tasks.c ****                 {
 6617              		.loc 1 5172 26 is_stmt 0 view .LVU1851
 6618 00e0 F26A     		ldr	r2, [r6, #44]
5172:ThirdParty/FreeRTOS/tasks.c ****                 {
 6619              		.loc 1 5172 53 view .LVU1852
 6620 00e2 114B     		ldr	r3, .L465+12
 6621 00e4 1B68     		ldr	r3, [r3]
 6622 00e6 DB6A     		ldr	r3, [r3, #44]
5172:ThirdParty/FreeRTOS/tasks.c ****                 {
 6623              		.loc 1 5172 19 view .LVU1853
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 246


 6624 00e8 9A42     		cmp	r2, r3
 6625 00ea BCD9     		bls	.L454
5176:ThirdParty/FreeRTOS/tasks.c ****                     {
 6626              		.loc 1 5176 21 is_stmt 1 view .LVU1854
5176:ThirdParty/FreeRTOS/tasks.c ****                     {
 6627              		.loc 1 5176 23 is_stmt 0 view .LVU1855
 6628 00ec 0DB1     		cbz	r5, .L460
5178:ThirdParty/FreeRTOS/tasks.c ****                     }
 6629              		.loc 1 5178 25 is_stmt 1 view .LVU1856
5178:ThirdParty/FreeRTOS/tasks.c ****                     }
 6630              		.loc 1 5178 52 is_stmt 0 view .LVU1857
 6631 00ee 0123     		movs	r3, #1
 6632 00f0 2B60     		str	r3, [r5]
 6633              	.L460:
5184:ThirdParty/FreeRTOS/tasks.c ****                 }
 6634              		.loc 1 5184 21 is_stmt 1 view .LVU1858
5184:ThirdParty/FreeRTOS/tasks.c ****                 }
 6635              		.loc 1 5184 35 is_stmt 0 view .LVU1859
 6636 00f2 0E4B     		ldr	r3, .L465+16
 6637 00f4 0122     		movs	r2, #1
 6638 00f6 1A60     		str	r2, [r3]
 6639 00f8 B5E7     		b	.L454
 6640              	.LVL445:
 6641              	.L464:
 6642              	.LBB297:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6643              		.loc 1 5162 21 is_stmt 1 discriminator 1 view .LVU1860
 6644 00fa F268     		ldr	r2, [r6, #12]
 6645 00fc 5A60     		str	r2, [r3, #4]
 6646 00fe CEE7     		b	.L458
 6647              	.LVL446:
 6648              	.L457:
5162:ThirdParty/FreeRTOS/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 6649              		.loc 1 5162 21 is_stmt 0 discriminator 1 view .LVU1861
 6650              	.LBE297:
 6651              	.LBB298:
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6652              		.loc 1 5169 21 is_stmt 1 view .LVU1862
 6653 0100 0B4B     		ldr	r3, .L465+20
 6654 0102 5A68     		ldr	r2, [r3, #4]
 6655              	.LVL447:
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6656              		.loc 1 5169 21 view .LVU1863
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6657              		.loc 1 5169 21 view .LVU1864
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6658              		.loc 1 5169 21 view .LVU1865
 6659 0104 F261     		str	r2, [r6, #28]
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6660              		.loc 1 5169 21 view .LVU1866
 6661 0106 9468     		ldr	r4, [r2, #8]
 6662 0108 3462     		str	r4, [r6, #32]
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6663              		.loc 1 5169 21 view .LVU1867
 6664 010a 06F11800 		add	r0, r6, #24
 6665 010e 6060     		str	r0, [r4, #4]
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 247


 6666              		.loc 1 5169 21 view .LVU1868
 6667 0110 9060     		str	r0, [r2, #8]
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6668              		.loc 1 5169 21 view .LVU1869
 6669 0112 B362     		str	r3, [r6, #40]
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6670              		.loc 1 5169 21 view .LVU1870
 6671 0114 1A68     		ldr	r2, [r3]
 6672              	.LVL448:
5169:ThirdParty/FreeRTOS/tasks.c ****                 }
 6673              		.loc 1 5169 21 is_stmt 0 view .LVU1871
 6674 0116 0132     		adds	r2, r2, #1
 6675 0118 1A60     		str	r2, [r3]
 6676 011a E1E7     		b	.L459
 6677              	.L466:
 6678              		.align	2
 6679              	.L465:
 6680 011c 00000000 		.word	uxSchedulerSuspended
 6681 0120 00000000 		.word	uxTopReadyPriority
 6682 0124 00000000 		.word	pxReadyTasksLists
 6683 0128 00000000 		.word	pxCurrentTCB
 6684 012c 00000000 		.word	xYieldPending
 6685 0130 00000000 		.word	xPendingReadyList
 6686              	.LBE298:
 6687              		.cfi_endproc
 6688              	.LFE48:
 6690              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 6691              		.align	1
 6692              		.global	xTaskGenericNotifyStateClear
 6693              		.syntax unified
 6694              		.thumb
 6695              		.thumb_func
 6697              	xTaskGenericNotifyStateClear:
 6698              	.LVL449:
 6699              	.LFB49:
5202:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6700              		.loc 1 5202 5 is_stmt 1 view -0
 6701              		.cfi_startproc
 6702              		@ args = 0, pretend = 0, frame = 0
 6703              		@ frame_needed = 0, uses_anonymous_args = 0
5202:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6704              		.loc 1 5202 5 is_stmt 0 view .LVU1873
 6705 0000 38B5     		push	{r3, r4, r5, lr}
 6706              	.LCFI48:
 6707              		.cfi_def_cfa_offset 16
 6708              		.cfi_offset 3, -16
 6709              		.cfi_offset 4, -12
 6710              		.cfi_offset 5, -8
 6711              		.cfi_offset 14, -4
5203:ThirdParty/FreeRTOS/tasks.c ****         BaseType_t xReturn;
 6712              		.loc 1 5203 9 is_stmt 1 view .LVU1874
5204:ThirdParty/FreeRTOS/tasks.c **** 
 6713              		.loc 1 5204 9 view .LVU1875
5206:ThirdParty/FreeRTOS/tasks.c **** 
 6714              		.loc 1 5206 9 view .LVU1876
 6715 0002 41B1     		cbz	r1, .L468
5206:ThirdParty/FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 248


 6716              		.loc 1 5206 9 discriminator 1 view .LVU1877
 6717              	.LBB299:
 6718              	.LBI299:
 196:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     {
 6719              		.loc 2 196 34 view .LVU1878
 6720              	.LBB300:
 198:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 6721              		.loc 2 198 9 view .LVU1879
 200:ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****         (
 6722              		.loc 2 200 9 view .LVU1880
 6723              		.syntax unified
 6724              	@ 200 "ThirdParty/FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 6725 0004 4FF05003 			mov r3, #80												
 6726 0008 83F31188 		msr basepri, r3											
 6727 000c BFF36F8F 		isb														
 6728 0010 BFF34F8F 		dsb														
 6729              	
 6730              	@ 0 "" 2
 6731              		.thumb
 6732              		.syntax unified
 6733              	.L469:
 6734              	.LBE300:
 6735              	.LBE299:
5206:ThirdParty/FreeRTOS/tasks.c **** 
 6736              		.loc 1 5206 9 discriminator 3 view .LVU1881
5206:ThirdParty/FreeRTOS/tasks.c **** 
 6737              		.loc 1 5206 9 discriminator 3 view .LVU1882
 6738 0014 FEE7     		b	.L469
 6739              	.L468:
 6740 0016 0446     		mov	r4, r0
 6741 0018 0D46     		mov	r5, r1
5206:ThirdParty/FreeRTOS/tasks.c **** 
 6742              		.loc 1 5206 79 discriminator 2 view .LVU1883
5210:ThirdParty/FreeRTOS/tasks.c **** 
 6743              		.loc 1 5210 9 view .LVU1884
5210:ThirdParty/FreeRTOS/tasks.c **** 
 6744              		.loc 1 5210 17 is_stmt 0 view .LVU1885
 6745 001a 60B1     		cbz	r0, .L474
 6746              	.LVL450:
 6747              	.L470:
5212:ThirdParty/FreeRTOS/tasks.c ****         {
 6748              		.loc 1 5212 9 is_stmt 1 view .LVU1886
 6749 001c FFF7FEFF 		bl	vPortEnterCritical
 6750              	.LVL451:
5214:ThirdParty/FreeRTOS/tasks.c ****             {
 6751              		.loc 1 5214 13 view .LVU1887
5214:ThirdParty/FreeRTOS/tasks.c ****             {
 6752              		.loc 1 5214 37 is_stmt 0 view .LVU1888
 6753 0020 6319     		adds	r3, r4, r5
 6754 0022 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 6755 0026 DBB2     		uxtb	r3, r3
5214:ThirdParty/FreeRTOS/tasks.c ****             {
 6756              		.loc 1 5214 15 view .LVU1889
 6757 0028 022B     		cmp	r3, #2
 6758 002a 07D0     		beq	.L475
5221:ThirdParty/FreeRTOS/tasks.c ****             }
 6759              		.loc 1 5221 25 view .LVU1890
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 249


 6760 002c 0024     		movs	r4, #0
 6761              	.LVL452:
 6762              	.L471:
5224:ThirdParty/FreeRTOS/tasks.c **** 
 6763              		.loc 1 5224 9 is_stmt 1 view .LVU1891
 6764 002e FFF7FEFF 		bl	vPortExitCritical
 6765              	.LVL453:
5226:ThirdParty/FreeRTOS/tasks.c ****     }
 6766              		.loc 1 5226 9 view .LVU1892
5227:ThirdParty/FreeRTOS/tasks.c **** 
 6767              		.loc 1 5227 5 is_stmt 0 view .LVU1893
 6768 0032 2046     		mov	r0, r4
 6769 0034 38BD     		pop	{r3, r4, r5, pc}
 6770              	.LVL454:
 6771              	.L474:
5210:ThirdParty/FreeRTOS/tasks.c **** 
 6772              		.loc 1 5210 17 discriminator 1 view .LVU1894
 6773 0036 044B     		ldr	r3, .L476
 6774 0038 1C68     		ldr	r4, [r3]
 6775              	.LVL455:
5210:ThirdParty/FreeRTOS/tasks.c **** 
 6776              		.loc 1 5210 17 discriminator 1 view .LVU1895
 6777 003a EFE7     		b	.L470
 6778              	.LVL456:
 6779              	.L475:
5216:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6780              		.loc 1 5216 17 is_stmt 1 view .LVU1896
5216:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6781              		.loc 1 5216 56 is_stmt 0 view .LVU1897
 6782 003c 2C44     		add	r4, r4, r5
 6783              	.LVL457:
5216:ThirdParty/FreeRTOS/tasks.c ****                 xReturn = pdPASS;
 6784              		.loc 1 5216 56 view .LVU1898
 6785 003e 0023     		movs	r3, #0
 6786 0040 84F84430 		strb	r3, [r4, #68]
5217:ThirdParty/FreeRTOS/tasks.c ****             }
 6787              		.loc 1 5217 17 is_stmt 1 view .LVU1899
 6788              	.LVL458:
5217:ThirdParty/FreeRTOS/tasks.c ****             }
 6789              		.loc 1 5217 25 is_stmt 0 view .LVU1900
 6790 0044 0124     		movs	r4, #1
 6791 0046 F2E7     		b	.L471
 6792              	.L477:
 6793              		.align	2
 6794              	.L476:
 6795 0048 00000000 		.word	pxCurrentTCB
 6796              		.cfi_endproc
 6797              	.LFE49:
 6799              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 6800              		.align	1
 6801              		.global	ulTaskGenericNotifyValueClear
 6802              		.syntax unified
 6803              		.thumb
 6804              		.thumb_func
 6806              	ulTaskGenericNotifyValueClear:
 6807              	.LVL459:
 6808              	.LFB50:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 250


5237:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6809              		.loc 1 5237 5 is_stmt 1 view -0
 6810              		.cfi_startproc
 6811              		@ args = 0, pretend = 0, frame = 0
 6812              		@ frame_needed = 0, uses_anonymous_args = 0
5237:ThirdParty/FreeRTOS/tasks.c ****         TCB_t * pxTCB;
 6813              		.loc 1 5237 5 is_stmt 0 view .LVU1902
 6814 0000 70B5     		push	{r4, r5, r6, lr}
 6815              	.LCFI49:
 6816              		.cfi_def_cfa_offset 16
 6817              		.cfi_offset 4, -16
 6818              		.cfi_offset 5, -12
 6819              		.cfi_offset 6, -8
 6820              		.cfi_offset 14, -4
 6821 0002 0C46     		mov	r4, r1
 6822 0004 1646     		mov	r6, r2
5238:ThirdParty/FreeRTOS/tasks.c ****         uint32_t ulReturn;
 6823              		.loc 1 5238 9 is_stmt 1 view .LVU1903
5239:ThirdParty/FreeRTOS/tasks.c **** 
 6824              		.loc 1 5239 9 view .LVU1904
5243:ThirdParty/FreeRTOS/tasks.c **** 
 6825              		.loc 1 5243 9 view .LVU1905
5243:ThirdParty/FreeRTOS/tasks.c **** 
 6826              		.loc 1 5243 17 is_stmt 0 view .LVU1906
 6827 0006 0546     		mov	r5, r0
 6828 0008 78B1     		cbz	r0, .L481
 6829              	.LVL460:
 6830              	.L479:
5245:ThirdParty/FreeRTOS/tasks.c ****         {
 6831              		.loc 1 5245 9 is_stmt 1 view .LVU1907
 6832 000a FFF7FEFF 		bl	vPortEnterCritical
 6833              	.LVL461:
5249:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6834              		.loc 1 5249 13 view .LVU1908
5249:ThirdParty/FreeRTOS/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 6835              		.loc 1 5249 22 is_stmt 0 view .LVU1909
 6836 000e 04F11001 		add	r1, r4, #16
 6837 0012 55F82140 		ldr	r4, [r5, r1, lsl #2]
 6838              	.LVL462:
5250:ThirdParty/FreeRTOS/tasks.c ****         }
 6839              		.loc 1 5250 13 is_stmt 1 view .LVU1910
5250:ThirdParty/FreeRTOS/tasks.c ****         }
 6840              		.loc 1 5250 35 is_stmt 0 view .LVU1911
 6841 0016 55F82130 		ldr	r3, [r5, r1, lsl #2]
5250:ThirdParty/FreeRTOS/tasks.c ****         }
 6842              		.loc 1 5250 54 view .LVU1912
 6843 001a 23EA0603 		bic	r3, r3, r6
 6844 001e 45F82130 		str	r3, [r5, r1, lsl #2]
5252:ThirdParty/FreeRTOS/tasks.c **** 
 6845              		.loc 1 5252 9 is_stmt 1 view .LVU1913
 6846 0022 FFF7FEFF 		bl	vPortExitCritical
 6847              	.LVL463:
5254:ThirdParty/FreeRTOS/tasks.c ****     }
 6848              		.loc 1 5254 9 view .LVU1914
5255:ThirdParty/FreeRTOS/tasks.c **** 
 6849              		.loc 1 5255 5 is_stmt 0 view .LVU1915
 6850 0026 2046     		mov	r0, r4
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 251


 6851 0028 70BD     		pop	{r4, r5, r6, pc}
 6852              	.LVL464:
 6853              	.L481:
5243:ThirdParty/FreeRTOS/tasks.c **** 
 6854              		.loc 1 5243 17 discriminator 1 view .LVU1916
 6855 002a 014B     		ldr	r3, .L482
 6856 002c 1D68     		ldr	r5, [r3]
 6857              	.LVL465:
5243:ThirdParty/FreeRTOS/tasks.c **** 
 6858              		.loc 1 5243 17 discriminator 1 view .LVU1917
 6859 002e ECE7     		b	.L479
 6860              	.L483:
 6861              		.align	2
 6862              	.L482:
 6863 0030 00000000 		.word	pxCurrentTCB
 6864              		.cfi_endproc
 6865              	.LFE50:
 6867              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6868              		.align	2
 6871              	uxSchedulerSuspended:
 6872 0000 00000000 		.space	4
 6873              		.global	uxTopUsedPriority
 6874              		.section	.rodata.uxTopUsedPriority,"a"
 6875              		.align	2
 6878              	uxTopUsedPriority:
 6879 0000 04000000 		.word	4
 6880              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6881              		.align	2
 6884              	xIdleTaskHandle:
 6885 0000 00000000 		.space	4
 6886              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6887              		.align	2
 6890              	xNextTaskUnblockTime:
 6891 0000 00000000 		.space	4
 6892              		.section	.bss.uxTaskNumber,"aw",%nobits
 6893              		.align	2
 6896              	uxTaskNumber:
 6897 0000 00000000 		.space	4
 6898              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6899              		.align	2
 6902              	xNumOfOverflows:
 6903 0000 00000000 		.space	4
 6904              		.section	.bss.xYieldPending,"aw",%nobits
 6905              		.align	2
 6908              	xYieldPending:
 6909 0000 00000000 		.space	4
 6910              		.section	.bss.xPendedTicks,"aw",%nobits
 6911              		.align	2
 6914              	xPendedTicks:
 6915 0000 00000000 		.space	4
 6916              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6917              		.align	2
 6920              	xSchedulerRunning:
 6921 0000 00000000 		.space	4
 6922              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6923              		.align	2
 6926              	uxTopReadyPriority:
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 252


 6927 0000 00000000 		.space	4
 6928              		.section	.bss.xTickCount,"aw",%nobits
 6929              		.align	2
 6932              	xTickCount:
 6933 0000 00000000 		.space	4
 6934              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6935              		.align	2
 6938              	uxCurrentNumberOfTasks:
 6939 0000 00000000 		.space	4
 6940              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6941              		.align	2
 6944              	xSuspendedTaskList:
 6945 0000 00000000 		.space	20
 6945      00000000 
 6945      00000000 
 6945      00000000 
 6945      00000000 
 6946              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6947              		.align	2
 6950              	uxDeletedTasksWaitingCleanUp:
 6951 0000 00000000 		.space	4
 6952              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6953              		.align	2
 6956              	xTasksWaitingTermination:
 6957 0000 00000000 		.space	20
 6957      00000000 
 6957      00000000 
 6957      00000000 
 6957      00000000 
 6958              		.section	.bss.xPendingReadyList,"aw",%nobits
 6959              		.align	2
 6962              	xPendingReadyList:
 6963 0000 00000000 		.space	20
 6963      00000000 
 6963      00000000 
 6963      00000000 
 6963      00000000 
 6964              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6965              		.align	2
 6968              	pxOverflowDelayedTaskList:
 6969 0000 00000000 		.space	4
 6970              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6971              		.align	2
 6974              	pxDelayedTaskList:
 6975 0000 00000000 		.space	4
 6976              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6977              		.align	2
 6980              	xDelayedTaskList2:
 6981 0000 00000000 		.space	20
 6981      00000000 
 6981      00000000 
 6981      00000000 
 6981      00000000 
 6982              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6983              		.align	2
 6986              	xDelayedTaskList1:
 6987 0000 00000000 		.space	20
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 253


 6987      00000000 
 6987      00000000 
 6987      00000000 
 6987      00000000 
 6988              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6989              		.align	2
 6992              	pxReadyTasksLists:
 6993 0000 00000000 		.space	100
 6993      00000000 
 6993      00000000 
 6993      00000000 
 6993      00000000 
 6994              		.global	pxCurrentTCB
 6995              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6996              		.align	2
 6999              	pxCurrentTCB:
 7000 0000 00000000 		.space	4
 7001              		.text
 7002              	.Letext0:
 7003              		.file 3 "C:/ArmToolChain/lib/gcc/arm-none-eabi/13.3.1/include/stddef.h"
 7004              		.file 4 "C:/ArmToolChain/arm-none-eabi/include/machine/_default_types.h"
 7005              		.file 5 "C:/ArmToolChain/arm-none-eabi/include/sys/_stdint.h"
 7006              		.file 6 "ThirdParty/FreeRTOS/include/projdefs.h"
 7007              		.file 7 "ThirdParty/FreeRTOS/include/list.h"
 7008              		.file 8 "ThirdParty/FreeRTOS/include/task.h"
 7009              		.file 9 "ThirdParty/FreeRTOS/include/portable.h"
 7010              		.file 10 "C:/ArmToolChain/arm-none-eabi/include/string.h"
 7011              		.file 11 "<built-in>"
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 254


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:19     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:110    .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6944   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6962   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:116    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:121    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:156    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6974   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6890   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:162    .text.prvDeleteTCB:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:167    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:199    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:204    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:361    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:366    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:439    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6992   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6986   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6980   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6956   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6968   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:451    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:456    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:618    .text.prvAddNewTaskToReadyList:000000ac $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6938   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6999   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6920   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6896   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6926   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:628    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:633    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:706    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6950   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:713    .text.prvIdleTask:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:718    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:767    .text.prvIdleTask:00000024 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:772    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:777    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:923    .text.prvAddCurrentTaskToDelayedList:00000094 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6932   .bss.xTickCount:00000000 xTickCount
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:934    .text.xTaskCreate:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:940    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1057   .text.vTaskDelete:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1063   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1254   .text.vTaskDelete:000000c4 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6871   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1267   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1273   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1319   .text.uxTaskPriorityGet:0000001c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1324   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1330   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1409   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1414   .text.vTaskPrioritySet:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1420   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 255


C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1669   .text.vTaskPrioritySet:000000e8 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1676   .text.vTaskResume:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1682   .text.vTaskResume:00000000 vTaskResume
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1835   .text.vTaskResume:00000094 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1842   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:1848   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2048   .text.xTaskResumeFromISR:000000b4 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6908   .bss.xYieldPending:00000000 xYieldPending
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2058   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2062   .text.vTaskStartScheduler:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2068   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2187   .text.vTaskStartScheduler:00000068 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6884   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6878   .rodata.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2198   .text.vTaskEndScheduler:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2204   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2247   .text.vTaskEndScheduler:00000020 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2252   .text.vTaskSuspendAll:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2258   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2277   .text.vTaskSuspendAll:0000000c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2282   .text.xTaskGetTickCount:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2288   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2309   .text.xTaskGetTickCount:00000008 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2314   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2320   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2349   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2354   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2360   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2376   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2381   .text.pcTaskGetName:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2387   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2444   .text.pcTaskGetName:00000024 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2449   .text.xTaskIncrementTick:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2455   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2803   .text.xTaskIncrementTick:0000014c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6902   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6914   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2818   .text.xTaskResumeAll:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:2824   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3148   .text.xTaskResumeAll:0000012c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3160   .text.xTaskDelayUntil:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3166   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3404   .text.xTaskDelayUntil:000000a8 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3410   .text.vTaskDelay:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3416   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3506   .text.vTaskDelay:00000048 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3511   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3517   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3588   .text.xTaskCatchUpTicks:00000038 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3594   .text.vTaskSwitchContext:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3600   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3741   .text.vTaskSwitchContext:00000084 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3752   .text.vTaskSuspend:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3758   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3983   .text.vTaskSuspend:000000dc $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:3994   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4000   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 256


C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4065   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4070   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4076   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4203   .text.vTaskPlaceOnUnorderedEventList:00000068 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4209   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4215   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4468   .text.xTaskRemoveFromEventList:000000d8 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4478   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4484   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4710   .text.vTaskRemoveFromUnorderedEventList:000000cc $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4720   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4726   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4793   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4799   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4805   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4828   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4834   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:4840   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5027   .text.xTaskCheckForTimeOut:00000080 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5033   .text.vTaskMissedYield:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5039   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5056   .text.vTaskMissedYield:00000008 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5061   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5067   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5086   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5091   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5097   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5124   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5129   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5135   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5292   .text.ulTaskGenericNotifyTake:000000a4 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5297   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5303   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5491   .text.xTaskGenericNotifyWait:000000c8 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5496   .text.xTaskGenericNotify:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5502   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5593   .text.xTaskGenericNotify:0000004a $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5882   .text.xTaskGenericNotify:00000158 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5890   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5896   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6036   .text.xTaskGenericNotifyFromISR:00000070 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6339   .text.xTaskGenericNotifyFromISR:00000188 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6350   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6356   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6680   .text.vTaskGenericNotifyGiveFromISR:0000011c $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6691   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6697   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6795   .text.xTaskGenericNotifyStateClear:00000048 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6800   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6806   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6863   .text.ulTaskGenericNotifyValueClear:00000030 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6868   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6875   .rodata.uxTopUsedPriority:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6881   .bss.xIdleTaskHandle:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6887   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6893   .bss.uxTaskNumber:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6899   .bss.xNumOfOverflows:00000000 $d
ARM GAS  C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s 			page 257


C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6905   .bss.xYieldPending:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6911   .bss.xPendedTicks:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6917   .bss.xSchedulerRunning:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6923   .bss.uxTopReadyPriority:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6929   .bss.xTickCount:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6935   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6941   .bss.xSuspendedTaskList:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6947   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6953   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6959   .bss.xPendingReadyList:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6965   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6971   .bss.pxDelayedTaskList:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6977   .bss.xDelayedTaskList2:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6983   .bss.xDelayedTaskList1:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6989   .bss.pxReadyTasksLists:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6996   .bss.pxCurrentTCB:00000000 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5599   .text.xTaskGenericNotify:0000004f $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:5599   .text.xTaskGenericNotify:00000050 $t
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6041   .text.xTaskGenericNotifyFromISR:00000075 $d
C:\Users\Lamp\AppData\Local\Temp\ccu0gewS.s:6041   .text.xTaskGenericNotifyFromISR:00000076 $t

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
memset
vListInsertEnd
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
